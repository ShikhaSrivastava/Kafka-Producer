// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adsafe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace adsafe {

namespace {

const ::google::protobuf::Descriptor* BSCResponse_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BSCResponse_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* IABCategory_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IABCategory_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IABCategory_PB_IABCategory_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IABSubCategory_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IABSubCategory_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IABSubCategory_PB_IABSubCategory_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AdSafeResponse_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdSafeResponse_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdSafeResponse_PB_ActionStatus_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_adsafe_2eproto() {
  protobuf_AddDesc_adsafe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adsafe.proto");
  GOOGLE_CHECK(file != NULL);
  BSCResponse_PB_descriptor_ = file->message_type(0);
  static const int BSCResponse_PB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, adult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, alcohol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, illegal_downloads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, illegal_drugs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, hate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, offensive_language_),
  };
  BSCResponse_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BSCResponse_PB_descriptor_,
      BSCResponse_PB::default_instance_,
      BSCResponse_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSCResponse_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BSCResponse_PB));
  IABCategory_PB_descriptor_ = file->message_type(1);
  static const int IABCategory_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABCategory_PB, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABCategory_PB, raw_value_),
  };
  IABCategory_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IABCategory_PB_descriptor_,
      IABCategory_PB::default_instance_,
      IABCategory_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABCategory_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABCategory_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IABCategory_PB));
  IABCategory_PB_IABCategory_E_descriptor_ = IABCategory_PB_descriptor_->enum_type(0);
  IABSubCategory_PB_descriptor_ = file->message_type(2);
  static const int IABSubCategory_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABSubCategory_PB, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABSubCategory_PB, raw_value_),
  };
  IABSubCategory_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IABSubCategory_PB_descriptor_,
      IABSubCategory_PB::default_instance_,
      IABSubCategory_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABSubCategory_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IABSubCategory_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IABSubCategory_PB));
  IABSubCategory_PB_IABSubCategory_E_descriptor_ = IABSubCategory_PB_descriptor_->enum_type(0);
  AdSafeResponse_PB_descriptor_ = file->message_type(3);
  static const int AdSafeResponse_PB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSafeResponse_PB, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSafeResponse_PB, bsc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSafeResponse_PB, iab_cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSafeResponse_PB, iab_subcat_),
  };
  AdSafeResponse_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdSafeResponse_PB_descriptor_,
      AdSafeResponse_PB::default_instance_,
      AdSafeResponse_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSafeResponse_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdSafeResponse_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdSafeResponse_PB));
  AdSafeResponse_PB_ActionStatus_E_descriptor_ = AdSafeResponse_PB_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adsafe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BSCResponse_PB_descriptor_, &BSCResponse_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IABCategory_PB_descriptor_, &IABCategory_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IABSubCategory_PB_descriptor_, &IABSubCategory_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdSafeResponse_PB_descriptor_, &AdSafeResponse_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adsafe_2eproto() {
  delete BSCResponse_PB::default_instance_;
  delete BSCResponse_PB_reflection_;
  delete IABCategory_PB::default_instance_;
  delete IABCategory_PB_reflection_;
  delete IABSubCategory_PB::default_instance_;
  delete IABSubCategory_PB_reflection_;
  delete AdSafeResponse_PB::default_instance_;
  delete AdSafeResponse_PB_reflection_;
}

void protobuf_AddDesc_adsafe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014adsafe.proto\022\023rubicon.data.adsafe\"\214\001\n\016"
    "BSCResponse_PB\022\r\n\005adult\030\002 \001(\004\022\017\n\007alcohol"
    "\030\003 \001(\004\022\031\n\021illegal_downloads\030\004 \001(\004\022\025\n\rill"
    "egal_drugs\030\005 \001(\004\022\014\n\004hate\030\006 \001(\004\022\032\n\022offens"
    "ive_language\030\007 \001(\004\"\340\003\n\016IABCategory_PB\022\?\n"
    "\004code\030\001 \001(\01621.rubicon.data.adsafe.IABCat"
    "egory_PB.IABCategory_E\022\021\n\traw_value\030\002 \001("
    "\t\"\371\002\n\rIABCategory_E\022\014\n\010IAB_ARTS\020\001\022\014\n\010IAB"
    "_AUTO\020\002\022\020\n\014IAB_BUSINESS\020\003\022\017\n\013IAB_CAREERS"
    "\020\004\022\013\n\007IAB_EDU\020\005\022\016\n\nIAB_FAMILY\020\006\022\017\n\013IAB_F"
    "INANCE\020\007\022\014\n\010IAB_FOOD\020\010\022\016\n\nIAB_HEALTH\020\t\022\017"
    "\n\013IAB_HOBBIES\020\n\022\014\n\010IAB_HOME\020\013\022\017\n\013IAB_LAW"
    "GOVT\020\014\022\014\n\010IAB_NEWS\020\r\022\014\n\010IAB_PETS\020\016\022\022\n\016IA"
    "B_REALESTATE\020\017\022\020\n\014IAB_RELIGION\020\020\022\017\n\013IAB_"
    "SCIENCE\020\021\022\014\n\010IAB_SHOP\020\022\022\017\n\013IAB_SOCIETY\020\023"
    "\022\016\n\nIAB_SPORTS\020\024\022\r\n\tIAB_STYLE\020\025\022\014\n\010IAB_T"
    "ECH\020\026\022\016\n\nIAB_TRAVEL\020\027\"\366\024\n\021IABSubCategory"
    "_PB\022E\n\004code\030\001 \001(\01627.rubicon.data.adsafe."
    "IABSubCategory_PB.IABSubCategory_E\022\021\n\tra"
    "w_value\030\002 \001(\t\"\206\024\n\020IABSubCategory_E\022\023\n\017IA"
    "B_T2_ACCESSOR\020\001\022\023\n\017IAB_T2_ADOPTION\020\002\022\023\n\017"
    "IAB_T2_ADVERTIS\020\003\022\023\n\017IAB_T2_AGRICULT\020\004\022\022"
    "\n\016IAB_T2_ALCOHOL\020\005\022\021\n\rIAB_T2_ALTMED\020\006\022\023\n"
    "\017IAB_T2_ARCHITEC\020\007\022\016\n\nIAB_T2_ART\020\010\022\023\n\017IA"
    "B_T2_ASTROLOG\020\t\022\023\n\017IAB_T2_ASTRONOM\020\n\022\017\n\013"
    "IAB_T2_BANK\020\013\022\023\n\017IAB_T2_BASEBALL\020\014\022\r\n\tIA"
    "B_T2_BB\020\r\022\023\n\017IAB_T2_BEVERAGE\020\016\022\022\n\016IAB_T2"
    "_BIOLOGY\020\017\022\022\n\016IAB_T2_BIOTECH\020\020\022\023\n\017IAB_T2"
    "_BODYBUIL\020\021\022\020\n\014IAB_T2_BOOKS\020\022\022\021\n\rIAB_T2_"
    "BOTANY\020\023\022\021\n\rIAB_T2_BOXING\020\024\022\023\n\017IAB_T2_BS"
    "KTBALL\020\025\022\023\n\017IAB_T2_BUDDHISM\020\026\022\022\n\016IAB_T2_"
    "CAMPING\020\027\022\023\n\017IAB_T2_CARDGAME\020\030\022\023\n\017IAB_T2"
    "_CARDIOLO\020\031\022\023\n\017IAB_T2_CATHOLIC\020\032\022\023\n\017IAB_"
    "T2_CELLPHON\020\033\022\017\n\013IAB_T2_CHAT\020\034\022\023\n\017IAB_T2"
    "_CHEMISTR\020\035\022\020\n\014IAB_T2_CHESS\020\036\022\023\n\017IAB_T2_"
    "CHRISTIA\020\037\022\021\n\rIAB_T2_CITIES\020 \022\023\n\017IAB_T2_"
    "CLOTHING\020!\022\022\n\016IAB_T2_COLLECT\020\"\022\022\n\016IAB_T2"
    "_COLLEGE\020#\022\022\n\016IAB_T2_COMICBK\020$\022\023\n\017IAB_T2"
    "_COMPETIT\020%\022\023\n\017IAB_T2_COMPUTER\020&\022\023\n\017IAB_"
    "T2_CONSTRUC\020\'\022\022\n\016IAB_T2_CRICKET\020(\022\022\n\016IAB"
    "_T2_CRUISES\020)\022\022\n\016IAB_T2_DIETING\020*\022\022\n\016IAB"
    "_T2_DISEASE\020+\022\022\n\016IAB_T2_DIVORCE\020,\022\022\n\016IAB"
    "_T2_DRAWING\020-\022\020\n\014IAB_T2_DRUGS\020.\022\022\n\016IAB_T"
    "2_ECOLOGY\020/\022\023\n\017IAB_T2_ECOMMERC\0200\022\023\n\017IAB_"
    "T2_ELCTRONI\0201\022\020\n\014IAB_T2_EMAIL\0202\022\022\n\016IAB_T"
    "2_FASHION\0203\022\022\n\016IAB_T2_FISHING\0204\022\023\n\017IAB_T"
    "2_FOOTBALL\0205\022\020\n\014IAB_T2_GAMES\0206\022\021\n\rIAB_T2"
    "_GARDEN\0207\022\023\n\017IAB_T2_GASTRONO\0208\022\023\n\017IAB_T2"
    "_GEOGRAPH\0209\022\022\n\016IAB_T2_GEOLOGY\020:\022\017\n\013IAB_T"
    "2_GOLF\020;\022\021\n\rIAB_T2_GOSSIP\020<\022\016\n\nIAB_T2_GO"
    "V\020=\022\023\n\017IAB_T2_HAIRCARE\020>\022\023\n\017IAB_T2_HARDW"
    "ARE\020\?\022\023\n\017IAB_T2_HINDUISM\020@\022\023\n\017IAB_T2_HME"
    "THEAT\020A\022\020\n\014IAB_T2_HOBBY\020B\022\021\n\rIAB_T2_HOCK"
    "EY\020C\022\023\n\017IAB_T2_HOLIDAYS\020D\022\022\n\016IAB_T2_HOME"
    "IMP\020E\022\023\n\017IAB_T2_HONEYMOO\020F\022\023\n\017IAB_T2_HOR"
    "SERAC\020G\022\020\n\014IAB_T2_HOUSE\020H\022\022\n\016IAB_T2_HUNT"
    "ING\020I\022\023\n\017IAB_T2_ICESKATE\020J\022\023\n\017IAB_T2_IMM"
    "IGRAT\020K\022\023\n\017IAB_T2_INSURANC\020L\022\021\n\rIAB_T2_I"
    "NTDEC\020M\022\023\n\017IAB_T2_INTERNET\020N\022\020\n\014IAB_T2_I"
    "SLAM\020O\022\022\n\016IAB_T2_JEWELRY\020P\022\022\n\016IAB_T2_JUD"
    "AISM\020Q\022\020\n\014IAB_T2_KAYAK\020R\022\022\n\016IAB_T2_LAWJU"
    "ST\020S\022\020\n\014IAB_T2_LOANS\020T\022\023\n\017IAB_T2_LOGISTI"
    "C\020U\022\023\n\017IAB_T2_MAGAZINE\020V\022\023\n\017IAB_T2_MARKE"
    "TIN\020W\022\023\n\017IAB_T2_MARRIAGE\020X\022\022\n\016IAB_T2_MIN"
    "IVAN\020Y\022\023\n\017IAB_T2_MOTORCYC\020Z\022\020\n\014IAB_T2_MO"
    "VIE\020[\022\023\n\017IAB_T2_MRTLARTS\020\\\022\020\n\014IAB_T2_MUS"
    "IC\020]\022\023\n\017IAB_T2_NARESRVS\020^\022\021\n\rIAB_T2_NASC"
    "AR\020_\022\023\n\017IAB_T2_NETWORKI\020`\022\023\n\017IAB_T2_OLYM"
    "PICS\020a\022\023\n\017IAB_T2_PAINTING\020b\022\021\n\rIAB_T2_PE"
    "OPLE\020c\022\023\n\017IAB_T2_PHOTOGRA\020d\022\022\n\016IAB_T2_PH"
    "YSICS\020e\022\023\n\017IAB_T2_POLITICS\020f\022\023\n\017IAB_T2_P"
    "REGNANC\020g\022\023\n\017IAB_T2_PSYCHIAT\020h\022\023\n\017IAB_T2"
    "_PURCHASE\020i\022\020\n\014IAB_T2_RADIO\020j\022\020\n\014IAB_T2_"
    "REHAB\020k\022\023\n\017IAB_T2_RETIREME\020l\022\023\n\017IAB_T2_R"
    "OCKCLIM\020m\022\023\n\017IAB_T2_SECURITI\020n\022\020\n\014IAB_T2"
    "_SEDAN\020o\022\023\n\017IAB_T2_SHOWSEVE\020p\022\023\n\017IAB_T2_"
    "SOFTWARE\020q\022\016\n\nIAB_T2_SPA\020r\022\023\n\017IAB_T2_SPO"
    "RTNWS\020s\022\023\n\017IAB_T2_SPRTSCAR\020t\022\021\n\rIAB_T2_S"
    "TAMPS\020u\022\016\n\nIAB_T2_SUV\020v\022\023\n\017IAB_T2_SWIMMI"
    "NG\020w\022\022\n\016IAB_T2_TATTOOS\020x\022\022\n\016IAB_T2_TOURI"
    "SM\020y\022\023\n\017IAB_T2_TRANSPOR\020z\022\r\n\tIAB_T2_TV\020{"
    "\022\023\n\017IAB_T2_UNEMPLOY\020|\022\021\n\rIAB_T2_VETMED\020}"
    "\022\023\n\017IAB_T2_VIDEOGAM\020~\022\022\n\016IAB_T2_WEATHER\020"
    "\177\022\023\n\016IAB_T2_ZOOLOGY\020\200\001\"\312\002\n\021AdSafeRespons"
    "e_PB\022N\n\006action\030\001 \001(\01625.rubicon.data.adsa"
    "fe.AdSafeResponse_PB.ActionStatus_E:\007UNK"
    "NOWN\0220\n\003bsc\030\002 \001(\0132#.rubicon.data.adsafe."
    "BSCResponse_PB\0224\n\007iab_cat\030\003 \003(\0132#.rubico"
    "n.data.adsafe.IABCategory_PB\022:\n\niab_subc"
    "at\030\004 \003(\0132&.rubicon.data.adsafe.IABSubCat"
    "egory_PB\"A\n\016ActionStatus_E\022\n\n\006PASSED\020\001\022\n"
    "\n\006FAILED\020\002\022\013\n\007UNKNOWN\020\003\022\n\n\006IGNORE\020\004B\002H\001", 3679);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adsafe.proto", &protobuf_RegisterTypes);
  BSCResponse_PB::default_instance_ = new BSCResponse_PB();
  IABCategory_PB::default_instance_ = new IABCategory_PB();
  IABSubCategory_PB::default_instance_ = new IABSubCategory_PB();
  AdSafeResponse_PB::default_instance_ = new AdSafeResponse_PB();
  BSCResponse_PB::default_instance_->InitAsDefaultInstance();
  IABCategory_PB::default_instance_->InitAsDefaultInstance();
  IABSubCategory_PB::default_instance_->InitAsDefaultInstance();
  AdSafeResponse_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adsafe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adsafe_2eproto {
  StaticDescriptorInitializer_adsafe_2eproto() {
    protobuf_AddDesc_adsafe_2eproto();
  }
} static_descriptor_initializer_adsafe_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BSCResponse_PB::kAdultFieldNumber;
const int BSCResponse_PB::kAlcoholFieldNumber;
const int BSCResponse_PB::kIllegalDownloadsFieldNumber;
const int BSCResponse_PB::kIllegalDrugsFieldNumber;
const int BSCResponse_PB::kHateFieldNumber;
const int BSCResponse_PB::kOffensiveLanguageFieldNumber;
#endif  // !_MSC_VER

BSCResponse_PB::BSCResponse_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BSCResponse_PB::InitAsDefaultInstance() {
}

BSCResponse_PB::BSCResponse_PB(const BSCResponse_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BSCResponse_PB::SharedCtor() {
  _cached_size_ = 0;
  adult_ = GOOGLE_ULONGLONG(0);
  alcohol_ = GOOGLE_ULONGLONG(0);
  illegal_downloads_ = GOOGLE_ULONGLONG(0);
  illegal_drugs_ = GOOGLE_ULONGLONG(0);
  hate_ = GOOGLE_ULONGLONG(0);
  offensive_language_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BSCResponse_PB::~BSCResponse_PB() {
  SharedDtor();
}

void BSCResponse_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BSCResponse_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BSCResponse_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BSCResponse_PB_descriptor_;
}

const BSCResponse_PB& BSCResponse_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adsafe_2eproto();  return *default_instance_;
}

BSCResponse_PB* BSCResponse_PB::default_instance_ = NULL;

BSCResponse_PB* BSCResponse_PB::New() const {
  return new BSCResponse_PB;
}

void BSCResponse_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    adult_ = GOOGLE_ULONGLONG(0);
    alcohol_ = GOOGLE_ULONGLONG(0);
    illegal_downloads_ = GOOGLE_ULONGLONG(0);
    illegal_drugs_ = GOOGLE_ULONGLONG(0);
    hate_ = GOOGLE_ULONGLONG(0);
    offensive_language_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BSCResponse_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 adult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adult_)));
          set_has_adult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alcohol;
        break;
      }
      
      // optional uint64 alcohol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alcohol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &alcohol_)));
          set_has_alcohol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_illegal_downloads;
        break;
      }
      
      // optional uint64 illegal_downloads = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_illegal_downloads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &illegal_downloads_)));
          set_has_illegal_downloads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_illegal_drugs;
        break;
      }
      
      // optional uint64 illegal_drugs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_illegal_drugs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &illegal_drugs_)));
          set_has_illegal_drugs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hate;
        break;
      }
      
      // optional uint64 hate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hate_)));
          set_has_hate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_offensive_language;
        break;
      }
      
      // optional uint64 offensive_language = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offensive_language:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offensive_language_)));
          set_has_offensive_language();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BSCResponse_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 adult = 2;
  if (has_adult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->adult(), output);
  }
  
  // optional uint64 alcohol = 3;
  if (has_alcohol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->alcohol(), output);
  }
  
  // optional uint64 illegal_downloads = 4;
  if (has_illegal_downloads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->illegal_downloads(), output);
  }
  
  // optional uint64 illegal_drugs = 5;
  if (has_illegal_drugs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->illegal_drugs(), output);
  }
  
  // optional uint64 hate = 6;
  if (has_hate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->hate(), output);
  }
  
  // optional uint64 offensive_language = 7;
  if (has_offensive_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->offensive_language(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BSCResponse_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 adult = 2;
  if (has_adult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->adult(), target);
  }
  
  // optional uint64 alcohol = 3;
  if (has_alcohol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->alcohol(), target);
  }
  
  // optional uint64 illegal_downloads = 4;
  if (has_illegal_downloads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->illegal_downloads(), target);
  }
  
  // optional uint64 illegal_drugs = 5;
  if (has_illegal_drugs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->illegal_drugs(), target);
  }
  
  // optional uint64 hate = 6;
  if (has_hate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->hate(), target);
  }
  
  // optional uint64 offensive_language = 7;
  if (has_offensive_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->offensive_language(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BSCResponse_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 adult = 2;
    if (has_adult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adult());
    }
    
    // optional uint64 alcohol = 3;
    if (has_alcohol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->alcohol());
    }
    
    // optional uint64 illegal_downloads = 4;
    if (has_illegal_downloads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->illegal_downloads());
    }
    
    // optional uint64 illegal_drugs = 5;
    if (has_illegal_drugs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->illegal_drugs());
    }
    
    // optional uint64 hate = 6;
    if (has_hate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hate());
    }
    
    // optional uint64 offensive_language = 7;
    if (has_offensive_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offensive_language());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BSCResponse_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BSCResponse_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BSCResponse_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BSCResponse_PB::MergeFrom(const BSCResponse_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adult()) {
      set_adult(from.adult());
    }
    if (from.has_alcohol()) {
      set_alcohol(from.alcohol());
    }
    if (from.has_illegal_downloads()) {
      set_illegal_downloads(from.illegal_downloads());
    }
    if (from.has_illegal_drugs()) {
      set_illegal_drugs(from.illegal_drugs());
    }
    if (from.has_hate()) {
      set_hate(from.hate());
    }
    if (from.has_offensive_language()) {
      set_offensive_language(from.offensive_language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BSCResponse_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSCResponse_PB::CopyFrom(const BSCResponse_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSCResponse_PB::IsInitialized() const {
  
  return true;
}

void BSCResponse_PB::Swap(BSCResponse_PB* other) {
  if (other != this) {
    std::swap(adult_, other->adult_);
    std::swap(alcohol_, other->alcohol_);
    std::swap(illegal_downloads_, other->illegal_downloads_);
    std::swap(illegal_drugs_, other->illegal_drugs_);
    std::swap(hate_, other->hate_);
    std::swap(offensive_language_, other->offensive_language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BSCResponse_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BSCResponse_PB_descriptor_;
  metadata.reflection = BSCResponse_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IABCategory_PB_IABCategory_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IABCategory_PB_IABCategory_E_descriptor_;
}
bool IABCategory_PB_IABCategory_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_ARTS;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_AUTO;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_BUSINESS;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_CAREERS;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_EDU;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_FAMILY;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_FINANCE;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_FOOD;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_HEALTH;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_HOBBIES;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_HOME;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_LAWGOVT;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_NEWS;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_PETS;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_REALESTATE;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_RELIGION;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_SCIENCE;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_SHOP;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_SOCIETY;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_SPORTS;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_STYLE;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_TECH;
const IABCategory_PB_IABCategory_E IABCategory_PB::IAB_TRAVEL;
const IABCategory_PB_IABCategory_E IABCategory_PB::IABCategory_E_MIN;
const IABCategory_PB_IABCategory_E IABCategory_PB::IABCategory_E_MAX;
const int IABCategory_PB::IABCategory_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IABCategory_PB::kCodeFieldNumber;
const int IABCategory_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

IABCategory_PB::IABCategory_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IABCategory_PB::InitAsDefaultInstance() {
}

IABCategory_PB::IABCategory_PB(const IABCategory_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IABCategory_PB::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IABCategory_PB::~IABCategory_PB() {
  SharedDtor();
}

void IABCategory_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void IABCategory_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IABCategory_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IABCategory_PB_descriptor_;
}

const IABCategory_PB& IABCategory_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adsafe_2eproto();  return *default_instance_;
}

IABCategory_PB* IABCategory_PB::default_instance_ = NULL;

IABCategory_PB* IABCategory_PB::New() const {
  return new IABCategory_PB;
}

void IABCategory_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IABCategory_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.adsafe.IABCategory_PB.IABCategory_E code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::adsafe::IABCategory_PB_IABCategory_E_IsValid(value)) {
            set_code(static_cast< ::rubicon::data::adsafe::IABCategory_PB_IABCategory_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IABCategory_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.adsafe.IABCategory_PB.IABCategory_E code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IABCategory_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.adsafe.IABCategory_PB.IABCategory_E code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IABCategory_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.adsafe.IABCategory_PB.IABCategory_E code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IABCategory_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IABCategory_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IABCategory_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IABCategory_PB::MergeFrom(const IABCategory_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IABCategory_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IABCategory_PB::CopyFrom(const IABCategory_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IABCategory_PB::IsInitialized() const {
  
  return true;
}

void IABCategory_PB::Swap(IABCategory_PB* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IABCategory_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IABCategory_PB_descriptor_;
  metadata.reflection = IABCategory_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IABSubCategory_PB_IABSubCategory_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IABSubCategory_PB_IABSubCategory_E_descriptor_;
}
bool IABSubCategory_PB_IABSubCategory_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ACCESSOR;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ADOPTION;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ADVERTIS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_AGRICULT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ALCOHOL;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ALTMED;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ARCHITEC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ART;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ASTROLOG;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ASTRONOM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BANK;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BASEBALL;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BB;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BEVERAGE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BIOLOGY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BIOTECH;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BODYBUIL;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BOOKS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BOTANY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BOXING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BSKTBALL;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_BUDDHISM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CAMPING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CARDGAME;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CARDIOLO;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CATHOLIC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CELLPHON;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CHAT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CHEMISTR;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CHESS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CHRISTIA;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CITIES;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CLOTHING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_COLLECT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_COLLEGE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_COMICBK;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_COMPETIT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_COMPUTER;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CONSTRUC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CRICKET;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_CRUISES;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_DIETING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_DISEASE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_DIVORCE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_DRAWING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_DRUGS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ECOLOGY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ECOMMERC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ELCTRONI;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_EMAIL;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_FASHION;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_FISHING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_FOOTBALL;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GAMES;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GARDEN;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GASTRONO;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GEOGRAPH;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GEOLOGY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GOLF;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GOSSIP;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_GOV;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HAIRCARE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HARDWARE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HINDUISM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HMETHEAT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HOBBY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HOCKEY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HOLIDAYS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HOMEIMP;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HONEYMOO;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HORSERAC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HOUSE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_HUNTING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ICESKATE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_IMMIGRAT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_INSURANC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_INTDEC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_INTERNET;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ISLAM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_JEWELRY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_JUDAISM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_KAYAK;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_LAWJUST;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_LOANS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_LOGISTIC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MAGAZINE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MARKETIN;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MARRIAGE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MINIVAN;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MOTORCYC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MOVIE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MRTLARTS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_MUSIC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_NARESRVS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_NASCAR;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_NETWORKI;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_OLYMPICS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PAINTING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PEOPLE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PHOTOGRA;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PHYSICS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_POLITICS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PREGNANC;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PSYCHIAT;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_PURCHASE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_RADIO;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_REHAB;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_RETIREME;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ROCKCLIM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SECURITI;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SEDAN;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SHOWSEVE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SOFTWARE;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SPA;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SPORTNWS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SPRTSCAR;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_STAMPS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SUV;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_SWIMMING;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_TATTOOS;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_TOURISM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_TRANSPOR;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_TV;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_UNEMPLOY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_VETMED;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_VIDEOGAM;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_WEATHER;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IAB_T2_ZOOLOGY;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IABSubCategory_E_MIN;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::IABSubCategory_E_MAX;
const int IABSubCategory_PB::IABSubCategory_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IABSubCategory_PB::kCodeFieldNumber;
const int IABSubCategory_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

IABSubCategory_PB::IABSubCategory_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IABSubCategory_PB::InitAsDefaultInstance() {
}

IABSubCategory_PB::IABSubCategory_PB(const IABSubCategory_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IABSubCategory_PB::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IABSubCategory_PB::~IABSubCategory_PB() {
  SharedDtor();
}

void IABSubCategory_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void IABSubCategory_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IABSubCategory_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IABSubCategory_PB_descriptor_;
}

const IABSubCategory_PB& IABSubCategory_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adsafe_2eproto();  return *default_instance_;
}

IABSubCategory_PB* IABSubCategory_PB::default_instance_ = NULL;

IABSubCategory_PB* IABSubCategory_PB::New() const {
  return new IABSubCategory_PB;
}

void IABSubCategory_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 1;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IABSubCategory_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.adsafe.IABSubCategory_PB.IABSubCategory_E code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E_IsValid(value)) {
            set_code(static_cast< ::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IABSubCategory_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.adsafe.IABSubCategory_PB.IABSubCategory_E code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IABSubCategory_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.adsafe.IABSubCategory_PB.IABSubCategory_E code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IABSubCategory_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.adsafe.IABSubCategory_PB.IABSubCategory_E code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IABSubCategory_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IABSubCategory_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IABSubCategory_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IABSubCategory_PB::MergeFrom(const IABSubCategory_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IABSubCategory_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IABSubCategory_PB::CopyFrom(const IABSubCategory_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IABSubCategory_PB::IsInitialized() const {
  
  return true;
}

void IABSubCategory_PB::Swap(IABSubCategory_PB* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IABSubCategory_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IABSubCategory_PB_descriptor_;
  metadata.reflection = IABSubCategory_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AdSafeResponse_PB_ActionStatus_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdSafeResponse_PB_ActionStatus_E_descriptor_;
}
bool AdSafeResponse_PB_ActionStatus_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::PASSED;
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::FAILED;
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::UNKNOWN;
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::IGNORE;
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::ActionStatus_E_MIN;
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::ActionStatus_E_MAX;
const int AdSafeResponse_PB::ActionStatus_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AdSafeResponse_PB::kActionFieldNumber;
const int AdSafeResponse_PB::kBscFieldNumber;
const int AdSafeResponse_PB::kIabCatFieldNumber;
const int AdSafeResponse_PB::kIabSubcatFieldNumber;
#endif  // !_MSC_VER

AdSafeResponse_PB::AdSafeResponse_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdSafeResponse_PB::InitAsDefaultInstance() {
  bsc_ = const_cast< ::rubicon::data::adsafe::BSCResponse_PB*>(&::rubicon::data::adsafe::BSCResponse_PB::default_instance());
}

AdSafeResponse_PB::AdSafeResponse_PB(const AdSafeResponse_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdSafeResponse_PB::SharedCtor() {
  _cached_size_ = 0;
  action_ = 3;
  bsc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdSafeResponse_PB::~AdSafeResponse_PB() {
  SharedDtor();
}

void AdSafeResponse_PB::SharedDtor() {
  if (this != default_instance_) {
    delete bsc_;
  }
}

void AdSafeResponse_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdSafeResponse_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdSafeResponse_PB_descriptor_;
}

const AdSafeResponse_PB& AdSafeResponse_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adsafe_2eproto();  return *default_instance_;
}

AdSafeResponse_PB* AdSafeResponse_PB::default_instance_ = NULL;

AdSafeResponse_PB* AdSafeResponse_PB::New() const {
  return new AdSafeResponse_PB;
}

void AdSafeResponse_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 3;
    if (has_bsc()) {
      if (bsc_ != NULL) bsc_->::rubicon::data::adsafe::BSCResponse_PB::Clear();
    }
  }
  iab_cat_.Clear();
  iab_subcat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdSafeResponse_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.adsafe.AdSafeResponse_PB.ActionStatus_E action = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E_IsValid(value)) {
            set_action(static_cast< ::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bsc;
        break;
      }
      
      // optional .rubicon.data.adsafe.BSCResponse_PB bsc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bsc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iab_cat;
        break;
      }
      
      // repeated .rubicon.data.adsafe.IABCategory_PB iab_cat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iab_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iab_cat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_iab_cat;
        if (input->ExpectTag(34)) goto parse_iab_subcat;
        break;
      }
      
      // repeated .rubicon.data.adsafe.IABSubCategory_PB iab_subcat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iab_subcat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iab_subcat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_iab_subcat;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdSafeResponse_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.adsafe.AdSafeResponse_PB.ActionStatus_E action = 1 [default = UNKNOWN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }
  
  // optional .rubicon.data.adsafe.BSCResponse_PB bsc = 2;
  if (has_bsc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bsc(), output);
  }
  
  // repeated .rubicon.data.adsafe.IABCategory_PB iab_cat = 3;
  for (int i = 0; i < this->iab_cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iab_cat(i), output);
  }
  
  // repeated .rubicon.data.adsafe.IABSubCategory_PB iab_subcat = 4;
  for (int i = 0; i < this->iab_subcat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iab_subcat(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdSafeResponse_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.adsafe.AdSafeResponse_PB.ActionStatus_E action = 1 [default = UNKNOWN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }
  
  // optional .rubicon.data.adsafe.BSCResponse_PB bsc = 2;
  if (has_bsc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bsc(), target);
  }
  
  // repeated .rubicon.data.adsafe.IABCategory_PB iab_cat = 3;
  for (int i = 0; i < this->iab_cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iab_cat(i), target);
  }
  
  // repeated .rubicon.data.adsafe.IABSubCategory_PB iab_subcat = 4;
  for (int i = 0; i < this->iab_subcat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iab_subcat(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdSafeResponse_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.adsafe.AdSafeResponse_PB.ActionStatus_E action = 1 [default = UNKNOWN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }
    
    // optional .rubicon.data.adsafe.BSCResponse_PB bsc = 2;
    if (has_bsc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsc());
    }
    
  }
  // repeated .rubicon.data.adsafe.IABCategory_PB iab_cat = 3;
  total_size += 1 * this->iab_cat_size();
  for (int i = 0; i < this->iab_cat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iab_cat(i));
  }
  
  // repeated .rubicon.data.adsafe.IABSubCategory_PB iab_subcat = 4;
  total_size += 1 * this->iab_subcat_size();
  for (int i = 0; i < this->iab_subcat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iab_subcat(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdSafeResponse_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdSafeResponse_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdSafeResponse_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdSafeResponse_PB::MergeFrom(const AdSafeResponse_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  iab_cat_.MergeFrom(from.iab_cat_);
  iab_subcat_.MergeFrom(from.iab_subcat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_bsc()) {
      mutable_bsc()->::rubicon::data::adsafe::BSCResponse_PB::MergeFrom(from.bsc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdSafeResponse_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdSafeResponse_PB::CopyFrom(const AdSafeResponse_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdSafeResponse_PB::IsInitialized() const {
  
  return true;
}

void AdSafeResponse_PB::Swap(AdSafeResponse_PB* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(bsc_, other->bsc_);
    iab_cat_.Swap(&other->iab_cat_);
    iab_subcat_.Swap(&other->iab_subcat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdSafeResponse_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdSafeResponse_PB_descriptor_;
  metadata.reflection = AdSafeResponse_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace adsafe
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
