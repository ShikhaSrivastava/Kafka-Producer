// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ae_types.proto

#ifndef PROTOBUF_ae_5ftypes_2eproto__INCLUDED
#define PROTOBUF_ae_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ae_5ftypes_2eproto();
void protobuf_AssignDesc_ae_5ftypes_2eproto();
void protobuf_ShutdownFile_ae_5ftypes_2eproto();


enum ClickAdType_E {
  UNSET_CLICK_TYPE = 0,
  IMAGE_CLICK_TYPE = 1,
  MATCHING_CLICK_TYPE = 2,
  REGULAR_CLICK_TYPE = 3
};
bool ClickAdType_E_IsValid(int value);
const ClickAdType_E ClickAdType_E_MIN = UNSET_CLICK_TYPE;
const ClickAdType_E ClickAdType_E_MAX = REGULAR_CLICK_TYPE;
const int ClickAdType_E_ARRAYSIZE = ClickAdType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClickAdType_E_descriptor();
inline const ::std::string& ClickAdType_E_Name(ClickAdType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClickAdType_E_descriptor(), value);
}
inline bool ClickAdType_E_Parse(
    const ::std::string& name, ClickAdType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClickAdType_E>(
    ClickAdType_E_descriptor(), name, value);
}
enum RequestType_E {
  UNKNOWN_REQUEST = 0,
  IMPRESSION_REQUEST = 1,
  IFRAME_REQUEST = 2,
  CLICK_REDIRECT_REQUEST = 3,
  VIEWER_REQUEST = 4,
  CLICK_SERVE_REQUEST = 5,
  PSA_REQUEST = 6
};
bool RequestType_E_IsValid(int value);
const RequestType_E RequestType_E_MIN = UNKNOWN_REQUEST;
const RequestType_E RequestType_E_MAX = PSA_REQUEST;
const int RequestType_E_ARRAYSIZE = RequestType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestType_E_descriptor();
inline const ::std::string& RequestType_E_Name(RequestType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestType_E_descriptor(), value);
}
inline bool RequestType_E_Parse(
    const ::std::string& name, RequestType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestType_E>(
    RequestType_E_descriptor(), name, value);
}
enum RTBOperationResultCode_E {
  UNKNOWN_RTB_CODE = 0,
  BID_ENGINE_RESPONSE_OK = 1,
  BID_ENGINE_RESPONSE_TIMED_OUT = 10,
  BID_ENGINE_EMPTY_RESPONSE = 11,
  BID_ENGINE_DECLINED_TO_SERVICE = 12,
  BID_ENGINE_HTTP_ERROR = 13,
  BID_ENGINE_NETWORK_ERROR = 14,
  BID_ENGINE_INVALID_JSON = 15,
  BID_ENGINE_INVALID_PROTOBUF = 16,
  RTB_DISABLED_USER_OPT_OUT = 30,
  RTB_DISABLED_NOT_SAMPLED = 31,
  RTB_DISABLED_NO_AVAILABLE_ADS = 32,
  RTB_DISABLED_NO_RTB_NETWORKS = 33,
  RTB_DISABLED_NOT_CONFIGURED_IN_RULES = 34,
  RTB_DISABLED_INVALID_MIME_TYPE = 35,
  RTB_DISABLED_NOT_ENABLED_FOR_IMPERSSION = 36,
  RTB_DISABLED_UNKNOWN = 37,
  THROTTLED_AVAILABLE_SLOTS = 50,
  THROTTLES_SYSTEM_LOAD = 51,
  THROTTLED_BE_RESPONSE_LATENCY = 52,
  THROTTLED_ERROR_RATE = 53,
  THROTTLED_TIMEOUT_RATE = 54,
  THROTTLED_SKIPPED = 55
};
bool RTBOperationResultCode_E_IsValid(int value);
const RTBOperationResultCode_E RTBOperationResultCode_E_MIN = UNKNOWN_RTB_CODE;
const RTBOperationResultCode_E RTBOperationResultCode_E_MAX = THROTTLED_SKIPPED;
const int RTBOperationResultCode_E_ARRAYSIZE = RTBOperationResultCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* RTBOperationResultCode_E_descriptor();
inline const ::std::string& RTBOperationResultCode_E_Name(RTBOperationResultCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    RTBOperationResultCode_E_descriptor(), value);
}
inline bool RTBOperationResultCode_E_Parse(
    const ::std::string& name, RTBOperationResultCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RTBOperationResultCode_E>(
    RTBOperationResultCode_E_descriptor(), name, value);
}
enum PSACode_E {
  UNKNOWN_PSA = 0,
  ALG_ERROR_PSA = 1,
  BAD_CLICK_PSA = 2,
  BAD_REQUEST_PSA = 3,
  BAD_REMOTE_IP_PSA = 4,
  BAD_SESSION_ID_PSA = 5,
  DEBUG_NO_AD_PSA = 6,
  DEBUG_TABLE_PSA = 7,
  DK_BAD_TOKEN_PSA = 8,
  DK_END_CHAIN_PSA = 9,
  NO_ADS_PSA = 10,
  NO_BACKFILL_PSA = 11,
  NO_BACKFILL_HOUSE_PSA = 12,
  NO_CREATIVE_PSA = 13,
  NO_DATA_PSA = 14,
  NO_REFERRER_MATCH_PSA = 15,
  NO_RULES_PSA = 16
};
bool PSACode_E_IsValid(int value);
const PSACode_E PSACode_E_MIN = UNKNOWN_PSA;
const PSACode_E PSACode_E_MAX = NO_RULES_PSA;
const int PSACode_E_ARRAYSIZE = PSACode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PSACode_E_descriptor();
inline const ::std::string& PSACode_E_Name(PSACode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PSACode_E_descriptor(), value);
}
inline bool PSACode_E_Parse(
    const ::std::string& name, PSACode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PSACode_E>(
    PSACode_E_descriptor(), name, value);
}
enum AlgorithmCode_E {
  UNKNOWN_ALGORITHM = 0,
  DK_ALGORITHM = 1,
  DK_BACKFILL_ALGORITHM = 2,
  DK_BACKFILL_HOUSE_ALGORITHM = 3,
  DK_BACKFILL_OVERLIMIT_ALGORITHM = 4,
  DK_BACKFILL_PSA_ALGORITHM = 5,
  DK_STATIC_ALGORITHM = 6,
  FIXED_ORDER_FIRST_X_ALGORITHM = 7,
  GUARANTEED_TOURNAMENT_ALGORITHM = 8,
  POOLED_TOURNAMENT_ALGORITHM = 9,
  POOLED_TOURNAMENT_AUDIENCE_ALGORITHM = 10,
  POOLED_TOURNAMENT_HEURISTIC_ALGORITHM = 11,
  ROULETTE_WHEEL_ALGORITHM = 12,
  ROULETTE_WHEEL_TARGETED_ENHANCER_ALGORITHM = 13,
  TARGETED_ENHANCER_ALGORITHM = 14,
  DEBUG_ALGORITHM = 50
};
bool AlgorithmCode_E_IsValid(int value);
const AlgorithmCode_E AlgorithmCode_E_MIN = UNKNOWN_ALGORITHM;
const AlgorithmCode_E AlgorithmCode_E_MAX = DEBUG_ALGORITHM;
const int AlgorithmCode_E_ARRAYSIZE = AlgorithmCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlgorithmCode_E_descriptor();
inline const ::std::string& AlgorithmCode_E_Name(AlgorithmCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlgorithmCode_E_descriptor(), value);
}
inline bool AlgorithmCode_E_Parse(
    const ::std::string& name, AlgorithmCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlgorithmCode_E>(
    AlgorithmCode_E_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::ad_engine::ClickAdType_E>() {
  return rubicon::data::ad_engine::ClickAdType_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::ad_engine::RequestType_E>() {
  return rubicon::data::ad_engine::RequestType_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::ad_engine::RTBOperationResultCode_E>() {
  return rubicon::data::ad_engine::RTBOperationResultCode_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::ad_engine::PSACode_E>() {
  return rubicon::data::ad_engine::PSACode_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::ad_engine::AlgorithmCode_E>() {
  return rubicon::data::ad_engine::AlgorithmCode_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ae_5ftypes_2eproto__INCLUDED
