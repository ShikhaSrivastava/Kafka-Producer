// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ae_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

namespace {

const ::google::protobuf::Descriptor* DataCenter_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCenter_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataCenter_PB_DataCenterCodes_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DKHistory_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DKHistory_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImpressionType_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImpressionType_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImpressionType_PB_ImpressionCode_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MarketPricing_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketPricing_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdCounts_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdCounts_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoInfo_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* InventoryInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InventoryInfo_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemInfo_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SystemInfo_PB_FeatureCode_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransactionInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionInfo_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdEngineLog_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdEngineLog_PB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ae_5flog_2eproto() {
  protobuf_AddDesc_ae_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ae_log.proto");
  GOOGLE_CHECK(file != NULL);
  DataCenter_PB_descriptor_ = file->message_type(0);
  static const int DataCenter_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenter_PB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenter_PB, raw_value_),
  };
  DataCenter_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCenter_PB_descriptor_,
      DataCenter_PB::default_instance_,
      DataCenter_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenter_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCenter_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCenter_PB));
  DataCenter_PB_DataCenterCodes_E_descriptor_ = DataCenter_PB_descriptor_->enum_type(0);
  DKHistory_PB_descriptor_ = file->message_type(1);
  static const int DKHistory_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DKHistory_PB, ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DKHistory_PB, zone_ids_),
  };
  DKHistory_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DKHistory_PB_descriptor_,
      DKHistory_PB::default_instance_,
      DKHistory_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DKHistory_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DKHistory_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DKHistory_PB));
  ImpressionType_PB_descriptor_ = file->message_type(2);
  static const int ImpressionType_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpressionType_PB, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpressionType_PB, raw_value_),
  };
  ImpressionType_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImpressionType_PB_descriptor_,
      ImpressionType_PB::default_instance_,
      ImpressionType_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpressionType_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpressionType_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImpressionType_PB));
  ImpressionType_PB_ImpressionCode_E_descriptor_ = ImpressionType_PB_descriptor_->enum_type(0);
  MarketPricing_PB_descriptor_ = file->message_type(3);
  static const int MarketPricing_PB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPricing_PB, price_points_debug_),
  };
  MarketPricing_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketPricing_PB_descriptor_,
      MarketPricing_PB::default_instance_,
      MarketPricing_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPricing_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPricing_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketPricing_PB));
  AdCounts_PB_descriptor_ = file->message_type(4);
  static const int AdCounts_PB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCounts_PB, guaranteed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCounts_PB, bids_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCounts_PB, bidded_ads_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCounts_PB, total_valid_count_),
  };
  AdCounts_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdCounts_PB_descriptor_,
      AdCounts_PB::default_instance_,
      AdCounts_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCounts_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCounts_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdCounts_PB));
  UserInfo_PB_descriptor_ = file->message_type(5);
  static const int UserInfo_PB_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, sender_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, browser_time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, browser_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, os_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, accept_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, user_agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, behavioral_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, site_size_count_),
  };
  UserInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_PB_descriptor_,
      UserInfo_PB::default_instance_,
      UserInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo_PB));
  GeoInfo_PB_descriptor_ = file->message_type(6);
  static const int GeoInfo_PB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo_PB, geo_),
  };
  GeoInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoInfo_PB_descriptor_,
      GeoInfo_PB::default_instance_,
      GeoInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoInfo_PB));
  InventoryInfo_PB_descriptor_ = file->message_type(7);
  static const int InventoryInfo_PB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, impression_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, refering_domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, refering_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, mime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, publisher_user_),
  };
  InventoryInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InventoryInfo_PB_descriptor_,
      InventoryInfo_PB::default_instance_,
      InventoryInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InventoryInfo_PB));
  SystemInfo_PB_descriptor_ = file->message_type(8);
  static const int SystemInfo_PB_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, ae_response_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, data_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, dk_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, rtb_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, bids_accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, bids_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, opaque_debug_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, market_pricing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, rtb_premium_applied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, psa_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, pi_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, ad_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, imp_quality_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, uri_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, features_),
  };
  SystemInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemInfo_PB_descriptor_,
      SystemInfo_PB::default_instance_,
      SystemInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemInfo_PB));
  SystemInfo_PB_FeatureCode_E_descriptor_ = SystemInfo_PB_descriptor_->enum_type(0);
  TransactionInfo_PB_descriptor_ = file->message_type(9);
  static const int TransactionInfo_PB_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, restrict_block_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, extra_block_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, auction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, revenue_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, ad_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_tech_fee_assessed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_response_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, advertiser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_billable_seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, private_tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, bid_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_seat_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_price_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_second_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, rtb_deal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, second_ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, adsafe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, best_rival_ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, best_rival_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, external_creative_id_),
  };
  TransactionInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionInfo_PB_descriptor_,
      TransactionInfo_PB::default_instance_,
      TransactionInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionInfo_PB));
  AdEngineLog_PB_descriptor_ = file->message_type(10);
  static const int AdEngineLog_PB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, geo_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, inventory_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, transaction_info_),
  };
  AdEngineLog_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdEngineLog_PB_descriptor_,
      AdEngineLog_PB::default_instance_,
      AdEngineLog_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdEngineLog_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdEngineLog_PB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ae_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCenter_PB_descriptor_, &DataCenter_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DKHistory_PB_descriptor_, &DKHistory_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImpressionType_PB_descriptor_, &ImpressionType_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketPricing_PB_descriptor_, &MarketPricing_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdCounts_PB_descriptor_, &AdCounts_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_PB_descriptor_, &UserInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoInfo_PB_descriptor_, &GeoInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InventoryInfo_PB_descriptor_, &InventoryInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemInfo_PB_descriptor_, &SystemInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionInfo_PB_descriptor_, &TransactionInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdEngineLog_PB_descriptor_, &AdEngineLog_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ae_5flog_2eproto() {
  delete DataCenter_PB::default_instance_;
  delete DataCenter_PB_reflection_;
  delete DKHistory_PB::default_instance_;
  delete DKHistory_PB_reflection_;
  delete ImpressionType_PB::default_instance_;
  delete ImpressionType_PB_reflection_;
  delete MarketPricing_PB::default_instance_;
  delete MarketPricing_PB_reflection_;
  delete AdCounts_PB::default_instance_;
  delete AdCounts_PB_reflection_;
  delete UserInfo_PB::default_instance_;
  delete UserInfo_PB_reflection_;
  delete GeoInfo_PB::default_instance_;
  delete GeoInfo_PB_reflection_;
  delete InventoryInfo_PB::default_instance_;
  delete InventoryInfo_PB_reflection_;
  delete SystemInfo_PB::default_instance_;
  delete SystemInfo_PB_reflection_;
  delete TransactionInfo_PB::default_instance_;
  delete TransactionInfo_PB_reflection_;
  delete AdEngineLog_PB::default_instance_;
  delete AdEngineLog_PB_reflection_;
}

void protobuf_AddDesc_ae_5flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rubicon::data::common::protobuf_AddDesc_types_2eproto();
  ::rubicon::data::common::protobuf_AddDesc_num_5ftypes_2eproto();
  ::rubicon::data::common::protobuf_AddDesc_ip_2eproto();
  ::rubicon::data::geo::protobuf_AddDesc_geo_2eproto();
  ::rubicon::data::ad_engine::protobuf_AddDesc_ae_5ftypes_2eproto();
  ::rubicon::data::ad_engine::protobuf_AddDesc_ae_5finventory_2eproto();
  ::rubicon::data::ad_engine::protobuf_AddDesc_ae_5fpublisher_5fuser_2eproto();
  ::rubicon::data::adsafe::protobuf_AddDesc_adsafe_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014ae_log.proto\022\026rubicon.data.ad_engine\032\013"
    "types.proto\032\017num_types.proto\032\010ip.proto\032\t"
    "geo.proto\032\016ae_types.proto\032\022ae_inventory."
    "proto\032\027ae_publisher_user.proto\032\014adsafe.p"
    "roto\"\261\001\n\rDataCenter_PB\022E\n\004name\030\001 \001(\01627.r"
    "ubicon.data.ad_engine.DataCenter_PB.Data"
    "CenterCodes_E\022\021\n\traw_value\030\002 \001(\t\"F\n\021Data"
    "CenterCodes_E\022\013\n\007UNKNOWN\020\000\022\010\n\004IAD1\020\001\022\010\n\004"
    "LAX1\020\003\022\010\n\004AMS2\020\004\022\006\n\002QA\020\024\"Q\n\014DKHistory_PB"
    "\022/\n\005ad_id\030\001 \001(\0132 .rubicon.data.common.An"
    "UInt32_PB\022\020\n\010zone_ids\030\002 \003(\r\"\315\001\n\021Impressi"
    "onType_PB\022H\n\004code\030\002 \002(\0162:.rubicon.data.a"
    "d_engine.ImpressionType_PB.ImpressionCod"
    "e_E\022\021\n\traw_value\030\003 \001(\t\"[\n\020ImpressionCode"
    "_E\022\026\n\022UNKNOWN_IMPRESSION\020\000\022\021\n\rAD_IMPRESS"
    "ION\020\001\022\021\n\rSTART_SESSION\020\002\022\t\n\005CLICK\020\003\".\n\020M"
    "arketPricing_PB\022\032\n\022price_points_debug\030\001 "
    "\001(\t\"p\n\013AdCounts_PB\022\030\n\020guaranteed_count\030\001"
    " \001(\r\022\022\n\nbids_count\030\002 \001(\r\022\030\n\020bidded_ads_c"
    "ount\030\003 \001(\r\022\031\n\021total_valid_count\030\004 \001(\r\"\224\002"
    "\n\013UserInfo_PB\0226\n\013sender_addr\030\001 \001(\0132!.rub"
    "icon.data.common.IPAddress_PB\022\017\n\007user_id"
    "\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\004\022\032\n\022browser_ti"
    "me_stamp\030\004 \001(\r\022\024\n\014browser_code\030\005 \001(\r\022\017\n\007"
    "os_code\030\006 \001(\r\022\027\n\017accept_language\030\007 \001(\t\022\025"
    "\n\ruser_agent_id\030\010 \001(\t\022\031\n\021behavioral_cook"
    "ie\030\t \001(\t\022\032\n\017site_size_count\030\n \001(\004:\0010\"3\n\n"
    "GeoInfo_PB\022%\n\003geo\030\001 \001(\0132\030.rubicon.data.g"
    "eo.Geo_PB\"\275\002\n\020InventoryInfo_PB\022B\n\017impres"
    "sion_type\030\001 \001(\0132).rubicon.data.ad_engine"
    ".ImpressionType_PB\022\027\n\017refering_domain\030\002 "
    "\001(\t\022\024\n\014refering_uri\030\003 \001(\t\022;\n\004mime\030\004 \001(\0162"
    "\037.rubicon.data.common.MimeType_E:\014UNKNOW"
    "N_MIME\0227\n\tinventory\030\005 \001(\0132$.rubicon.data"
    ".ad_engine.Inventory_PB\022@\n\016publisher_use"
    "r\030\006 \001(\0132(.rubicon.data.ad_engine.Publish"
    "erUser_PB\"\371\005\n\rSystemInfo_PB\022\022\n\ntime_stam"
    "p\030\001 \002(\r\022\033\n\020ae_response_time\030\002 \001(\004:\0010\022:\n\013"
    "data_center\030\003 \001(\0132%.rubicon.data.ad_engi"
    "ne.DataCenter_PB\0228\n\ndk_history\030\004 \001(\0132$.r"
    "ubicon.data.ad_engine.DKHistory_PB\022:\n\tal"
    "gorithm\030\005 \001(\0162\'.rubicon.data.ad_engine.A"
    "lgorithmCode_E\022B\n\010rtb_code\030\006 \001(\01620.rubic"
    "on.data.ad_engine.RTBOperationResultCode"
    "_E\022\025\n\rbids_accepted\030\007 \001(\r\022\025\n\rbids_receiv"
    "ed\030\010 \001(\r\022\030\n\020opaque_debug_log\030\t \001(\t\022@\n\016ma"
    "rket_pricing\030\n \001(\0132(.rubicon.data.ad_eng"
    "ine.MarketPricing_PB\022\033\n\023rtb_premium_appl"
    "ied\030\013 \001(\001\0223\n\010psa_code\030\014 \001(\0162!.rubicon.da"
    "ta.ad_engine.PSACode_E\022\020\n\010pi_debug\030\r \001(\t"
    "\0226\n\tad_counts\030\016 \001(\0132#.rubicon.data.ad_en"
    "gine.AdCounts_PB\022\031\n\021imp_quality_score\030\017 "
    "\001(\001\022\025\n\ruri_arguments\030\020 \001(\t\022E\n\010features\030\021"
    " \003(\01623.rubicon.data.ad_engine.SystemInfo"
    "_PB.FeatureCode_E\"\"\n\rFeatureCode_E\022\021\n\rLO"
    "CAL_STORAGE\020\001\"\371\005\n\022TransactionInfo_PB\022/\n\005"
    "ad_id\030\001 \001(\0132 .rubicon.data.common.AnUInt"
    "32_PB\022\025\n\nnetwork_id\030\002 \001(\r:\0010\022\026\n\013campaign"
    "_id\030\003 \001(\005:\0010\022\034\n\024restrict_block_match\030\004 \001"
    "(\t\022\031\n\021extra_block_match\030\005 \001(\t\022\026\n\013creativ"
    "e_id\030\006 \001(\r:\0010\022\022\n\nauction_id\030\007 \001(\t\022\026\n\013rev"
    "enue_cpm\030\010 \001(\001:\0010\0224\n\010ad_class\030\t \001(\0162\".ru"
    "bicon.data.common.AdClassType_E\022\035\n\025rtb_t"
    "ech_fee_assessed\030\n \001(\001\022\031\n\021rtb_response_t"
    "ime\030\013 \001(\004\022\025\n\radvertiser_id\030\014 \001(\r\022\034\n\024rtb_"
    "billable_seat_id\030\r \001(\r\022<\n\014private_tier\030\016"
    " \001(\0162&.rubicon.data.common.PrivateTierTy"
    "pe_E\022\016\n\006bid_id\030\017 \001(\r\022\021\n\tbid_price\030\020 \001(\001\022"
    "\024\n\014rtb_seat_ids\030\021 \003(\r\022\027\n\017rtb_price_floor"
    "\030\022 \001(\001\022\030\n\020rtb_second_price\030\023 \001(\001\022\023\n\013rtb_"
    "deal_id\030\024 \001(\r\022\024\n\014second_ad_id\030\025 \001(\r\0226\n\006a"
    "dsafe\030\026 \001(\0132&.rubicon.data.adsafe.AdSafe"
    "Response_PB\022\030\n\020best_rival_ad_id\030\027 \001(\r\022\034\n"
    "\024best_rival_cpm_price\030\030 \001(\001\022\034\n\024external_"
    "creative_id\030\031 \001(\t\"\302\002\n\016AdEngineLog_PB\0226\n\t"
    "user_info\030\001 \001(\0132#.rubicon.data.ad_engine"
    ".UserInfo_PB\0224\n\010geo_info\030\002 \001(\0132\".rubicon"
    ".data.ad_engine.GeoInfo_PB\022@\n\016inventory_"
    "info\030\003 \001(\0132(.rubicon.data.ad_engine.Inve"
    "ntoryInfo_PB\022:\n\013system_info\030\004 \001(\0132%.rubi"
    "con.data.ad_engine.SystemInfo_PB\022D\n\020tran"
    "saction_info\030\005 \001(\0132*.rubicon.data.ad_eng"
    "ine.TransactionInfo_PBB\002H\001", 3306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ae_log.proto", &protobuf_RegisterTypes);
  DataCenter_PB::default_instance_ = new DataCenter_PB();
  DKHistory_PB::default_instance_ = new DKHistory_PB();
  ImpressionType_PB::default_instance_ = new ImpressionType_PB();
  MarketPricing_PB::default_instance_ = new MarketPricing_PB();
  AdCounts_PB::default_instance_ = new AdCounts_PB();
  UserInfo_PB::default_instance_ = new UserInfo_PB();
  GeoInfo_PB::default_instance_ = new GeoInfo_PB();
  InventoryInfo_PB::default_instance_ = new InventoryInfo_PB();
  SystemInfo_PB::default_instance_ = new SystemInfo_PB();
  TransactionInfo_PB::default_instance_ = new TransactionInfo_PB();
  AdEngineLog_PB::default_instance_ = new AdEngineLog_PB();
  DataCenter_PB::default_instance_->InitAsDefaultInstance();
  DKHistory_PB::default_instance_->InitAsDefaultInstance();
  ImpressionType_PB::default_instance_->InitAsDefaultInstance();
  MarketPricing_PB::default_instance_->InitAsDefaultInstance();
  AdCounts_PB::default_instance_->InitAsDefaultInstance();
  UserInfo_PB::default_instance_->InitAsDefaultInstance();
  GeoInfo_PB::default_instance_->InitAsDefaultInstance();
  InventoryInfo_PB::default_instance_->InitAsDefaultInstance();
  SystemInfo_PB::default_instance_->InitAsDefaultInstance();
  TransactionInfo_PB::default_instance_->InitAsDefaultInstance();
  AdEngineLog_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ae_5flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ae_5flog_2eproto {
  StaticDescriptorInitializer_ae_5flog_2eproto() {
    protobuf_AddDesc_ae_5flog_2eproto();
  }
} static_descriptor_initializer_ae_5flog_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataCenter_PB_DataCenterCodes_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCenter_PB_DataCenterCodes_E_descriptor_;
}
bool DataCenter_PB_DataCenterCodes_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::UNKNOWN;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::IAD1;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::LAX1;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::AMS2;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::QA;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::DataCenterCodes_E_MIN;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB::DataCenterCodes_E_MAX;
const int DataCenter_PB::DataCenterCodes_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataCenter_PB::kNameFieldNumber;
const int DataCenter_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

DataCenter_PB::DataCenter_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCenter_PB::InitAsDefaultInstance() {
}

DataCenter_PB::DataCenter_PB(const DataCenter_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCenter_PB::SharedCtor() {
  _cached_size_ = 0;
  name_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCenter_PB::~DataCenter_PB() {
  SharedDtor();
}

void DataCenter_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void DataCenter_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCenter_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCenter_PB_descriptor_;
}

const DataCenter_PB& DataCenter_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

DataCenter_PB* DataCenter_PB::default_instance_ = NULL;

DataCenter_PB* DataCenter_PB::New() const {
  return new DataCenter_PB;
}

void DataCenter_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = 0;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataCenter_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.ad_engine.DataCenter_PB.DataCenterCodes_E name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E_IsValid(value)) {
            set_name(static_cast< ::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataCenter_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.ad_engine.DataCenter_PB.DataCenterCodes_E name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCenter_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.ad_engine.DataCenter_PB.DataCenterCodes_E name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCenter_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.ad_engine.DataCenter_PB.DataCenterCodes_E name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCenter_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCenter_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCenter_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataCenter_PB::MergeFrom(const DataCenter_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataCenter_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCenter_PB::CopyFrom(const DataCenter_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCenter_PB::IsInitialized() const {
  
  return true;
}

void DataCenter_PB::Swap(DataCenter_PB* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataCenter_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCenter_PB_descriptor_;
  metadata.reflection = DataCenter_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DKHistory_PB::kAdIdFieldNumber;
const int DKHistory_PB::kZoneIdsFieldNumber;
#endif  // !_MSC_VER

DKHistory_PB::DKHistory_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DKHistory_PB::InitAsDefaultInstance() {
  ad_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
}

DKHistory_PB::DKHistory_PB(const DKHistory_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DKHistory_PB::SharedCtor() {
  _cached_size_ = 0;
  ad_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DKHistory_PB::~DKHistory_PB() {
  SharedDtor();
}

void DKHistory_PB::SharedDtor() {
  if (this != default_instance_) {
    delete ad_id_;
  }
}

void DKHistory_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DKHistory_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DKHistory_PB_descriptor_;
}

const DKHistory_PB& DKHistory_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

DKHistory_PB* DKHistory_PB::default_instance_ = NULL;

DKHistory_PB* DKHistory_PB::New() const {
  return new DKHistory_PB;
}

void DKHistory_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ad_id()) {
      if (ad_id_ != NULL) ad_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
  }
  zone_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DKHistory_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ad_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_ids;
        break;
      }
      
      // repeated uint32 zone_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_zone_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zone_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DKHistory_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
  if (has_ad_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ad_id(), output);
  }
  
  // repeated uint32 zone_ids = 2;
  for (int i = 0; i < this->zone_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->zone_ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DKHistory_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
  if (has_ad_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ad_id(), target);
  }
  
  // repeated uint32 zone_ids = 2;
  for (int i = 0; i < this->zone_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->zone_ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DKHistory_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
    if (has_ad_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ad_id());
    }
    
  }
  // repeated uint32 zone_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->zone_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->zone_ids(i));
    }
    total_size += 1 * this->zone_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DKHistory_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DKHistory_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DKHistory_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DKHistory_PB::MergeFrom(const DKHistory_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  zone_ids_.MergeFrom(from.zone_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad_id()) {
      mutable_ad_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.ad_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DKHistory_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DKHistory_PB::CopyFrom(const DKHistory_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DKHistory_PB::IsInitialized() const {
  
  return true;
}

void DKHistory_PB::Swap(DKHistory_PB* other) {
  if (other != this) {
    std::swap(ad_id_, other->ad_id_);
    zone_ids_.Swap(&other->zone_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DKHistory_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DKHistory_PB_descriptor_;
  metadata.reflection = DKHistory_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ImpressionType_PB_ImpressionCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpressionType_PB_ImpressionCode_E_descriptor_;
}
bool ImpressionType_PB_ImpressionCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB::UNKNOWN_IMPRESSION;
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB::AD_IMPRESSION;
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB::START_SESSION;
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB::CLICK;
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB::ImpressionCode_E_MIN;
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB::ImpressionCode_E_MAX;
const int ImpressionType_PB::ImpressionCode_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ImpressionType_PB::kCodeFieldNumber;
const int ImpressionType_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

ImpressionType_PB::ImpressionType_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImpressionType_PB::InitAsDefaultInstance() {
}

ImpressionType_PB::ImpressionType_PB(const ImpressionType_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImpressionType_PB::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImpressionType_PB::~ImpressionType_PB() {
  SharedDtor();
}

void ImpressionType_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void ImpressionType_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpressionType_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpressionType_PB_descriptor_;
}

const ImpressionType_PB& ImpressionType_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

ImpressionType_PB* ImpressionType_PB::default_instance_ = NULL;

ImpressionType_PB* ImpressionType_PB::New() const {
  return new ImpressionType_PB;
}

void ImpressionType_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImpressionType_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rubicon.data.ad_engine.ImpressionType_PB.ImpressionCode_E code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E_IsValid(value)) {
            set_code(static_cast< ::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImpressionType_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rubicon.data.ad_engine.ImpressionType_PB.ImpressionCode_E code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }
  
  // optional string raw_value = 3;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImpressionType_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rubicon.data.ad_engine.ImpressionType_PB.ImpressionCode_E code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }
  
  // optional string raw_value = 3;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImpressionType_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rubicon.data.ad_engine.ImpressionType_PB.ImpressionCode_E code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }
    
    // optional string raw_value = 3;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpressionType_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImpressionType_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImpressionType_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImpressionType_PB::MergeFrom(const ImpressionType_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImpressionType_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpressionType_PB::CopyFrom(const ImpressionType_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpressionType_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ImpressionType_PB::Swap(ImpressionType_PB* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImpressionType_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImpressionType_PB_descriptor_;
  metadata.reflection = ImpressionType_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketPricing_PB::kPricePointsDebugFieldNumber;
#endif  // !_MSC_VER

MarketPricing_PB::MarketPricing_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketPricing_PB::InitAsDefaultInstance() {
}

MarketPricing_PB::MarketPricing_PB(const MarketPricing_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketPricing_PB::SharedCtor() {
  _cached_size_ = 0;
  price_points_debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketPricing_PB::~MarketPricing_PB() {
  SharedDtor();
}

void MarketPricing_PB::SharedDtor() {
  if (price_points_debug_ != &::google::protobuf::internal::kEmptyString) {
    delete price_points_debug_;
  }
  if (this != default_instance_) {
  }
}

void MarketPricing_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketPricing_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketPricing_PB_descriptor_;
}

const MarketPricing_PB& MarketPricing_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

MarketPricing_PB* MarketPricing_PB::default_instance_ = NULL;

MarketPricing_PB* MarketPricing_PB::New() const {
  return new MarketPricing_PB;
}

void MarketPricing_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_price_points_debug()) {
      if (price_points_debug_ != &::google::protobuf::internal::kEmptyString) {
        price_points_debug_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketPricing_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string price_points_debug = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_points_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->price_points_debug().data(), this->price_points_debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketPricing_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string price_points_debug = 1;
  if (has_price_points_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price_points_debug().data(), this->price_points_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->price_points_debug(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketPricing_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string price_points_debug = 1;
  if (has_price_points_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price_points_debug().data(), this->price_points_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->price_points_debug(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketPricing_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string price_points_debug = 1;
    if (has_price_points_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price_points_debug());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketPricing_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketPricing_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketPricing_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketPricing_PB::MergeFrom(const MarketPricing_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_points_debug()) {
      set_price_points_debug(from.price_points_debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketPricing_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketPricing_PB::CopyFrom(const MarketPricing_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPricing_PB::IsInitialized() const {
  
  return true;
}

void MarketPricing_PB::Swap(MarketPricing_PB* other) {
  if (other != this) {
    std::swap(price_points_debug_, other->price_points_debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketPricing_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketPricing_PB_descriptor_;
  metadata.reflection = MarketPricing_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdCounts_PB::kGuaranteedCountFieldNumber;
const int AdCounts_PB::kBidsCountFieldNumber;
const int AdCounts_PB::kBiddedAdsCountFieldNumber;
const int AdCounts_PB::kTotalValidCountFieldNumber;
#endif  // !_MSC_VER

AdCounts_PB::AdCounts_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdCounts_PB::InitAsDefaultInstance() {
}

AdCounts_PB::AdCounts_PB(const AdCounts_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdCounts_PB::SharedCtor() {
  _cached_size_ = 0;
  guaranteed_count_ = 0u;
  bids_count_ = 0u;
  bidded_ads_count_ = 0u;
  total_valid_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdCounts_PB::~AdCounts_PB() {
  SharedDtor();
}

void AdCounts_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdCounts_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdCounts_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdCounts_PB_descriptor_;
}

const AdCounts_PB& AdCounts_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

AdCounts_PB* AdCounts_PB::default_instance_ = NULL;

AdCounts_PB* AdCounts_PB::New() const {
  return new AdCounts_PB;
}

void AdCounts_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guaranteed_count_ = 0u;
    bids_count_ = 0u;
    bidded_ads_count_ = 0u;
    total_valid_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdCounts_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guaranteed_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guaranteed_count_)));
          set_has_guaranteed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bids_count;
        break;
      }
      
      // optional uint32 bids_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bids_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bids_count_)));
          set_has_bids_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bidded_ads_count;
        break;
      }
      
      // optional uint32 bidded_ads_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidded_ads_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bidded_ads_count_)));
          set_has_bidded_ads_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_valid_count;
        break;
      }
      
      // optional uint32 total_valid_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_valid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_valid_count_)));
          set_has_total_valid_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdCounts_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guaranteed_count = 1;
  if (has_guaranteed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guaranteed_count(), output);
  }
  
  // optional uint32 bids_count = 2;
  if (has_bids_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bids_count(), output);
  }
  
  // optional uint32 bidded_ads_count = 3;
  if (has_bidded_ads_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bidded_ads_count(), output);
  }
  
  // optional uint32 total_valid_count = 4;
  if (has_total_valid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_valid_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdCounts_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guaranteed_count = 1;
  if (has_guaranteed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guaranteed_count(), target);
  }
  
  // optional uint32 bids_count = 2;
  if (has_bids_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bids_count(), target);
  }
  
  // optional uint32 bidded_ads_count = 3;
  if (has_bidded_ads_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bidded_ads_count(), target);
  }
  
  // optional uint32 total_valid_count = 4;
  if (has_total_valid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_valid_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdCounts_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guaranteed_count = 1;
    if (has_guaranteed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guaranteed_count());
    }
    
    // optional uint32 bids_count = 2;
    if (has_bids_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bids_count());
    }
    
    // optional uint32 bidded_ads_count = 3;
    if (has_bidded_ads_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bidded_ads_count());
    }
    
    // optional uint32 total_valid_count = 4;
    if (has_total_valid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_valid_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdCounts_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdCounts_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdCounts_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdCounts_PB::MergeFrom(const AdCounts_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guaranteed_count()) {
      set_guaranteed_count(from.guaranteed_count());
    }
    if (from.has_bids_count()) {
      set_bids_count(from.bids_count());
    }
    if (from.has_bidded_ads_count()) {
      set_bidded_ads_count(from.bidded_ads_count());
    }
    if (from.has_total_valid_count()) {
      set_total_valid_count(from.total_valid_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdCounts_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdCounts_PB::CopyFrom(const AdCounts_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdCounts_PB::IsInitialized() const {
  
  return true;
}

void AdCounts_PB::Swap(AdCounts_PB* other) {
  if (other != this) {
    std::swap(guaranteed_count_, other->guaranteed_count_);
    std::swap(bids_count_, other->bids_count_);
    std::swap(bidded_ads_count_, other->bidded_ads_count_);
    std::swap(total_valid_count_, other->total_valid_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdCounts_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdCounts_PB_descriptor_;
  metadata.reflection = AdCounts_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo_PB::kSenderAddrFieldNumber;
const int UserInfo_PB::kUserIdFieldNumber;
const int UserInfo_PB::kSessionIdFieldNumber;
const int UserInfo_PB::kBrowserTimeStampFieldNumber;
const int UserInfo_PB::kBrowserCodeFieldNumber;
const int UserInfo_PB::kOsCodeFieldNumber;
const int UserInfo_PB::kAcceptLanguageFieldNumber;
const int UserInfo_PB::kUserAgentIdFieldNumber;
const int UserInfo_PB::kBehavioralCookieFieldNumber;
const int UserInfo_PB::kSiteSizeCountFieldNumber;
#endif  // !_MSC_VER

UserInfo_PB::UserInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo_PB::InitAsDefaultInstance() {
  sender_addr_ = const_cast< ::rubicon::data::common::IPAddress_PB*>(&::rubicon::data::common::IPAddress_PB::default_instance());
}

UserInfo_PB::UserInfo_PB(const UserInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  sender_addr_ = NULL;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_id_ = GOOGLE_ULONGLONG(0);
  browser_time_stamp_ = 0u;
  browser_code_ = 0u;
  os_code_ = 0u;
  accept_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  behavioral_cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  site_size_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo_PB::~UserInfo_PB() {
  SharedDtor();
}

void UserInfo_PB::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (accept_language_ != &::google::protobuf::internal::kEmptyString) {
    delete accept_language_;
  }
  if (user_agent_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_id_;
  }
  if (behavioral_cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete behavioral_cookie_;
  }
  if (this != default_instance_) {
    delete sender_addr_;
  }
}

void UserInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_PB_descriptor_;
}

const UserInfo_PB& UserInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

UserInfo_PB* UserInfo_PB::default_instance_ = NULL;

UserInfo_PB* UserInfo_PB::New() const {
  return new UserInfo_PB;
}

void UserInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender_addr()) {
      if (sender_addr_ != NULL) sender_addr_->::rubicon::data::common::IPAddress_PB::Clear();
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    session_id_ = GOOGLE_ULONGLONG(0);
    browser_time_stamp_ = 0u;
    browser_code_ = 0u;
    os_code_ = 0u;
    if (has_accept_language()) {
      if (accept_language_ != &::google::protobuf::internal::kEmptyString) {
        accept_language_->clear();
      }
    }
    if (has_user_agent_id()) {
      if (user_agent_id_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_behavioral_cookie()) {
      if (behavioral_cookie_ != &::google::protobuf::internal::kEmptyString) {
        behavioral_cookie_->clear();
      }
    }
    site_size_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.common.IPAddress_PB sender_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }
      
      // optional string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }
      
      // optional uint64 session_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_browser_time_stamp;
        break;
      }
      
      // optional uint32 browser_time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_browser_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_time_stamp_)));
          set_has_browser_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_browser_code;
        break;
      }
      
      // optional uint32 browser_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_browser_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_code_)));
          set_has_browser_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_os_code;
        break;
      }
      
      // optional uint32 os_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_code_)));
          set_has_os_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_accept_language;
        break;
      }
      
      // optional string accept_language = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accept_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accept_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accept_language().data(), this->accept_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_user_agent_id;
        break;
      }
      
      // optional string user_agent_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent_id().data(), this->user_agent_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_behavioral_cookie;
        break;
      }
      
      // optional string behavioral_cookie = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_behavioral_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_behavioral_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->behavioral_cookie().data(), this->behavioral_cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_site_size_count;
        break;
      }
      
      // optional uint64 site_size_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_site_size_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &site_size_count_)));
          set_has_site_size_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.common.IPAddress_PB sender_addr = 1;
  if (has_sender_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sender_addr(), output);
  }
  
  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }
  
  // optional uint64 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->session_id(), output);
  }
  
  // optional uint32 browser_time_stamp = 4;
  if (has_browser_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->browser_time_stamp(), output);
  }
  
  // optional uint32 browser_code = 5;
  if (has_browser_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->browser_code(), output);
  }
  
  // optional uint32 os_code = 6;
  if (has_os_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->os_code(), output);
  }
  
  // optional string accept_language = 7;
  if (has_accept_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accept_language().data(), this->accept_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->accept_language(), output);
  }
  
  // optional string user_agent_id = 8;
  if (has_user_agent_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent_id().data(), this->user_agent_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->user_agent_id(), output);
  }
  
  // optional string behavioral_cookie = 9;
  if (has_behavioral_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->behavioral_cookie().data(), this->behavioral_cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->behavioral_cookie(), output);
  }
  
  // optional uint64 site_size_count = 10 [default = 0];
  if (has_site_size_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->site_size_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.common.IPAddress_PB sender_addr = 1;
  if (has_sender_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sender_addr(), target);
  }
  
  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }
  
  // optional uint64 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->session_id(), target);
  }
  
  // optional uint32 browser_time_stamp = 4;
  if (has_browser_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->browser_time_stamp(), target);
  }
  
  // optional uint32 browser_code = 5;
  if (has_browser_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->browser_code(), target);
  }
  
  // optional uint32 os_code = 6;
  if (has_os_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->os_code(), target);
  }
  
  // optional string accept_language = 7;
  if (has_accept_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accept_language().data(), this->accept_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->accept_language(), target);
  }
  
  // optional string user_agent_id = 8;
  if (has_user_agent_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent_id().data(), this->user_agent_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->user_agent_id(), target);
  }
  
  // optional string behavioral_cookie = 9;
  if (has_behavioral_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->behavioral_cookie().data(), this->behavioral_cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->behavioral_cookie(), target);
  }
  
  // optional uint64 site_size_count = 10 [default = 0];
  if (has_site_size_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->site_size_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.common.IPAddress_PB sender_addr = 1;
    if (has_sender_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender_addr());
    }
    
    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // optional uint64 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session_id());
    }
    
    // optional uint32 browser_time_stamp = 4;
    if (has_browser_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_time_stamp());
    }
    
    // optional uint32 browser_code = 5;
    if (has_browser_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser_code());
    }
    
    // optional uint32 os_code = 6;
    if (has_os_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os_code());
    }
    
    // optional string accept_language = 7;
    if (has_accept_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accept_language());
    }
    
    // optional string user_agent_id = 8;
    if (has_user_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string behavioral_cookie = 9;
    if (has_behavioral_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->behavioral_cookie());
    }
    
    // optional uint64 site_size_count = 10 [default = 0];
    if (has_site_size_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->site_size_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo_PB::MergeFrom(const UserInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_addr()) {
      mutable_sender_addr()->::rubicon::data::common::IPAddress_PB::MergeFrom(from.sender_addr());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_browser_time_stamp()) {
      set_browser_time_stamp(from.browser_time_stamp());
    }
    if (from.has_browser_code()) {
      set_browser_code(from.browser_code());
    }
    if (from.has_os_code()) {
      set_os_code(from.os_code());
    }
    if (from.has_accept_language()) {
      set_accept_language(from.accept_language());
    }
    if (from.has_user_agent_id()) {
      set_user_agent_id(from.user_agent_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_behavioral_cookie()) {
      set_behavioral_cookie(from.behavioral_cookie());
    }
    if (from.has_site_size_count()) {
      set_site_size_count(from.site_size_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo_PB::CopyFrom(const UserInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_PB::IsInitialized() const {
  
  return true;
}

void UserInfo_PB::Swap(UserInfo_PB* other) {
  if (other != this) {
    std::swap(sender_addr_, other->sender_addr_);
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(browser_time_stamp_, other->browser_time_stamp_);
    std::swap(browser_code_, other->browser_code_);
    std::swap(os_code_, other->os_code_);
    std::swap(accept_language_, other->accept_language_);
    std::swap(user_agent_id_, other->user_agent_id_);
    std::swap(behavioral_cookie_, other->behavioral_cookie_);
    std::swap(site_size_count_, other->site_size_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_PB_descriptor_;
  metadata.reflection = UserInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeoInfo_PB::kGeoFieldNumber;
#endif  // !_MSC_VER

GeoInfo_PB::GeoInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeoInfo_PB::InitAsDefaultInstance() {
  geo_ = const_cast< ::rubicon::data::geo::Geo_PB*>(&::rubicon::data::geo::Geo_PB::default_instance());
}

GeoInfo_PB::GeoInfo_PB(const GeoInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeoInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoInfo_PB::~GeoInfo_PB() {
  SharedDtor();
}

void GeoInfo_PB::SharedDtor() {
  if (this != default_instance_) {
    delete geo_;
  }
}

void GeoInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoInfo_PB_descriptor_;
}

const GeoInfo_PB& GeoInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

GeoInfo_PB* GeoInfo_PB::default_instance_ = NULL;

GeoInfo_PB* GeoInfo_PB::New() const {
  return new GeoInfo_PB;
}

void GeoInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geo()) {
      if (geo_ != NULL) geo_->::rubicon::data::geo::Geo_PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.geo.Geo_PB geo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeoInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.geo.Geo_PB geo = 1;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeoInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.geo.Geo_PB geo = 1;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeoInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.geo.Geo_PB geo = 1;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoInfo_PB::MergeFrom(const GeoInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geo()) {
      mutable_geo()->::rubicon::data::geo::Geo_PB::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoInfo_PB::CopyFrom(const GeoInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoInfo_PB::IsInitialized() const {
  
  return true;
}

void GeoInfo_PB::Swap(GeoInfo_PB* other) {
  if (other != this) {
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoInfo_PB_descriptor_;
  metadata.reflection = GeoInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InventoryInfo_PB::kImpressionTypeFieldNumber;
const int InventoryInfo_PB::kReferingDomainFieldNumber;
const int InventoryInfo_PB::kReferingUriFieldNumber;
const int InventoryInfo_PB::kMimeFieldNumber;
const int InventoryInfo_PB::kInventoryFieldNumber;
const int InventoryInfo_PB::kPublisherUserFieldNumber;
#endif  // !_MSC_VER

InventoryInfo_PB::InventoryInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InventoryInfo_PB::InitAsDefaultInstance() {
  impression_type_ = const_cast< ::rubicon::data::ad_engine::ImpressionType_PB*>(&::rubicon::data::ad_engine::ImpressionType_PB::default_instance());
  inventory_ = const_cast< ::rubicon::data::ad_engine::Inventory_PB*>(&::rubicon::data::ad_engine::Inventory_PB::default_instance());
  publisher_user_ = const_cast< ::rubicon::data::ad_engine::PublisherUser_PB*>(&::rubicon::data::ad_engine::PublisherUser_PB::default_instance());
}

InventoryInfo_PB::InventoryInfo_PB(const InventoryInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InventoryInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  impression_type_ = NULL;
  refering_domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refering_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mime_ = 0;
  inventory_ = NULL;
  publisher_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InventoryInfo_PB::~InventoryInfo_PB() {
  SharedDtor();
}

void InventoryInfo_PB::SharedDtor() {
  if (refering_domain_ != &::google::protobuf::internal::kEmptyString) {
    delete refering_domain_;
  }
  if (refering_uri_ != &::google::protobuf::internal::kEmptyString) {
    delete refering_uri_;
  }
  if (this != default_instance_) {
    delete impression_type_;
    delete inventory_;
    delete publisher_user_;
  }
}

void InventoryInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InventoryInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InventoryInfo_PB_descriptor_;
}

const InventoryInfo_PB& InventoryInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

InventoryInfo_PB* InventoryInfo_PB::default_instance_ = NULL;

InventoryInfo_PB* InventoryInfo_PB::New() const {
  return new InventoryInfo_PB;
}

void InventoryInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_impression_type()) {
      if (impression_type_ != NULL) impression_type_->::rubicon::data::ad_engine::ImpressionType_PB::Clear();
    }
    if (has_refering_domain()) {
      if (refering_domain_ != &::google::protobuf::internal::kEmptyString) {
        refering_domain_->clear();
      }
    }
    if (has_refering_uri()) {
      if (refering_uri_ != &::google::protobuf::internal::kEmptyString) {
        refering_uri_->clear();
      }
    }
    mime_ = 0;
    if (has_inventory()) {
      if (inventory_ != NULL) inventory_->::rubicon::data::ad_engine::Inventory_PB::Clear();
    }
    if (has_publisher_user()) {
      if (publisher_user_ != NULL) publisher_user_->::rubicon::data::ad_engine::PublisherUser_PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InventoryInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.ad_engine.ImpressionType_PB impression_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impression_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_refering_domain;
        break;
      }
      
      // optional string refering_domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refering_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refering_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refering_domain().data(), this->refering_domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_refering_uri;
        break;
      }
      
      // optional string refering_uri = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refering_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refering_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refering_uri().data(), this->refering_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mime;
        break;
      }
      
      // optional .rubicon.data.common.MimeType_E mime = 4 [default = UNKNOWN_MIME];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mime:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rubicon::data::common::MimeType_E_IsValid(value)) {
            set_mime(static_cast< rubicon::data::common::MimeType_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inventory;
        break;
      }
      
      // optional .rubicon.data.ad_engine.Inventory_PB inventory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inventory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_publisher_user;
        break;
      }
      
      // optional .rubicon.data.ad_engine.PublisherUser_PB publisher_user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InventoryInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.ad_engine.ImpressionType_PB impression_type = 1;
  if (has_impression_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->impression_type(), output);
  }
  
  // optional string refering_domain = 2;
  if (has_refering_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refering_domain().data(), this->refering_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->refering_domain(), output);
  }
  
  // optional string refering_uri = 3;
  if (has_refering_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refering_uri().data(), this->refering_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->refering_uri(), output);
  }
  
  // optional .rubicon.data.common.MimeType_E mime = 4 [default = UNKNOWN_MIME];
  if (has_mime()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mime(), output);
  }
  
  // optional .rubicon.data.ad_engine.Inventory_PB inventory = 5;
  if (has_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->inventory(), output);
  }
  
  // optional .rubicon.data.ad_engine.PublisherUser_PB publisher_user = 6;
  if (has_publisher_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->publisher_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InventoryInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.ad_engine.ImpressionType_PB impression_type = 1;
  if (has_impression_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->impression_type(), target);
  }
  
  // optional string refering_domain = 2;
  if (has_refering_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refering_domain().data(), this->refering_domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->refering_domain(), target);
  }
  
  // optional string refering_uri = 3;
  if (has_refering_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refering_uri().data(), this->refering_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->refering_uri(), target);
  }
  
  // optional .rubicon.data.common.MimeType_E mime = 4 [default = UNKNOWN_MIME];
  if (has_mime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mime(), target);
  }
  
  // optional .rubicon.data.ad_engine.Inventory_PB inventory = 5;
  if (has_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->inventory(), target);
  }
  
  // optional .rubicon.data.ad_engine.PublisherUser_PB publisher_user = 6;
  if (has_publisher_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->publisher_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InventoryInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.ad_engine.ImpressionType_PB impression_type = 1;
    if (has_impression_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impression_type());
    }
    
    // optional string refering_domain = 2;
    if (has_refering_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refering_domain());
    }
    
    // optional string refering_uri = 3;
    if (has_refering_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refering_uri());
    }
    
    // optional .rubicon.data.common.MimeType_E mime = 4 [default = UNKNOWN_MIME];
    if (has_mime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mime());
    }
    
    // optional .rubicon.data.ad_engine.Inventory_PB inventory = 5;
    if (has_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inventory());
    }
    
    // optional .rubicon.data.ad_engine.PublisherUser_PB publisher_user = 6;
    if (has_publisher_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publisher_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InventoryInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InventoryInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InventoryInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InventoryInfo_PB::MergeFrom(const InventoryInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impression_type()) {
      mutable_impression_type()->::rubicon::data::ad_engine::ImpressionType_PB::MergeFrom(from.impression_type());
    }
    if (from.has_refering_domain()) {
      set_refering_domain(from.refering_domain());
    }
    if (from.has_refering_uri()) {
      set_refering_uri(from.refering_uri());
    }
    if (from.has_mime()) {
      set_mime(from.mime());
    }
    if (from.has_inventory()) {
      mutable_inventory()->::rubicon::data::ad_engine::Inventory_PB::MergeFrom(from.inventory());
    }
    if (from.has_publisher_user()) {
      mutable_publisher_user()->::rubicon::data::ad_engine::PublisherUser_PB::MergeFrom(from.publisher_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InventoryInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventoryInfo_PB::CopyFrom(const InventoryInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryInfo_PB::IsInitialized() const {
  
  if (has_impression_type()) {
    if (!this->impression_type().IsInitialized()) return false;
  }
  return true;
}

void InventoryInfo_PB::Swap(InventoryInfo_PB* other) {
  if (other != this) {
    std::swap(impression_type_, other->impression_type_);
    std::swap(refering_domain_, other->refering_domain_);
    std::swap(refering_uri_, other->refering_uri_);
    std::swap(mime_, other->mime_);
    std::swap(inventory_, other->inventory_);
    std::swap(publisher_user_, other->publisher_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InventoryInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InventoryInfo_PB_descriptor_;
  metadata.reflection = InventoryInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SystemInfo_PB_FeatureCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_PB_FeatureCode_E_descriptor_;
}
bool SystemInfo_PB_FeatureCode_E_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SystemInfo_PB_FeatureCode_E SystemInfo_PB::LOCAL_STORAGE;
const SystemInfo_PB_FeatureCode_E SystemInfo_PB::FeatureCode_E_MIN;
const SystemInfo_PB_FeatureCode_E SystemInfo_PB::FeatureCode_E_MAX;
const int SystemInfo_PB::FeatureCode_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SystemInfo_PB::kTimeStampFieldNumber;
const int SystemInfo_PB::kAeResponseTimeFieldNumber;
const int SystemInfo_PB::kDataCenterFieldNumber;
const int SystemInfo_PB::kDkHistoryFieldNumber;
const int SystemInfo_PB::kAlgorithmFieldNumber;
const int SystemInfo_PB::kRtbCodeFieldNumber;
const int SystemInfo_PB::kBidsAcceptedFieldNumber;
const int SystemInfo_PB::kBidsReceivedFieldNumber;
const int SystemInfo_PB::kOpaqueDebugLogFieldNumber;
const int SystemInfo_PB::kMarketPricingFieldNumber;
const int SystemInfo_PB::kRtbPremiumAppliedFieldNumber;
const int SystemInfo_PB::kPsaCodeFieldNumber;
const int SystemInfo_PB::kPiDebugFieldNumber;
const int SystemInfo_PB::kAdCountsFieldNumber;
const int SystemInfo_PB::kImpQualityScoreFieldNumber;
const int SystemInfo_PB::kUriArgumentsFieldNumber;
const int SystemInfo_PB::kFeaturesFieldNumber;
#endif  // !_MSC_VER

SystemInfo_PB::SystemInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemInfo_PB::InitAsDefaultInstance() {
  data_center_ = const_cast< ::rubicon::data::ad_engine::DataCenter_PB*>(&::rubicon::data::ad_engine::DataCenter_PB::default_instance());
  dk_history_ = const_cast< ::rubicon::data::ad_engine::DKHistory_PB*>(&::rubicon::data::ad_engine::DKHistory_PB::default_instance());
  market_pricing_ = const_cast< ::rubicon::data::ad_engine::MarketPricing_PB*>(&::rubicon::data::ad_engine::MarketPricing_PB::default_instance());
  ad_counts_ = const_cast< ::rubicon::data::ad_engine::AdCounts_PB*>(&::rubicon::data::ad_engine::AdCounts_PB::default_instance());
}

SystemInfo_PB::SystemInfo_PB(const SystemInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0u;
  ae_response_time_ = GOOGLE_ULONGLONG(0);
  data_center_ = NULL;
  dk_history_ = NULL;
  algorithm_ = 0;
  rtb_code_ = 0;
  bids_accepted_ = 0u;
  bids_received_ = 0u;
  opaque_debug_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_pricing_ = NULL;
  rtb_premium_applied_ = 0;
  psa_code_ = 0;
  pi_debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ad_counts_ = NULL;
  imp_quality_score_ = 0;
  uri_arguments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemInfo_PB::~SystemInfo_PB() {
  SharedDtor();
}

void SystemInfo_PB::SharedDtor() {
  if (opaque_debug_log_ != &::google::protobuf::internal::kEmptyString) {
    delete opaque_debug_log_;
  }
  if (pi_debug_ != &::google::protobuf::internal::kEmptyString) {
    delete pi_debug_;
  }
  if (uri_arguments_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_arguments_;
  }
  if (this != default_instance_) {
    delete data_center_;
    delete dk_history_;
    delete market_pricing_;
    delete ad_counts_;
  }
}

void SystemInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemInfo_PB_descriptor_;
}

const SystemInfo_PB& SystemInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

SystemInfo_PB* SystemInfo_PB::default_instance_ = NULL;

SystemInfo_PB* SystemInfo_PB::New() const {
  return new SystemInfo_PB;
}

void SystemInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_stamp_ = 0u;
    ae_response_time_ = GOOGLE_ULONGLONG(0);
    if (has_data_center()) {
      if (data_center_ != NULL) data_center_->::rubicon::data::ad_engine::DataCenter_PB::Clear();
    }
    if (has_dk_history()) {
      if (dk_history_ != NULL) dk_history_->::rubicon::data::ad_engine::DKHistory_PB::Clear();
    }
    algorithm_ = 0;
    rtb_code_ = 0;
    bids_accepted_ = 0u;
    bids_received_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_opaque_debug_log()) {
      if (opaque_debug_log_ != &::google::protobuf::internal::kEmptyString) {
        opaque_debug_log_->clear();
      }
    }
    if (has_market_pricing()) {
      if (market_pricing_ != NULL) market_pricing_->::rubicon::data::ad_engine::MarketPricing_PB::Clear();
    }
    rtb_premium_applied_ = 0;
    psa_code_ = 0;
    if (has_pi_debug()) {
      if (pi_debug_ != &::google::protobuf::internal::kEmptyString) {
        pi_debug_->clear();
      }
    }
    if (has_ad_counts()) {
      if (ad_counts_ != NULL) ad_counts_->::rubicon::data::ad_engine::AdCounts_PB::Clear();
    }
    imp_quality_score_ = 0;
    if (has_uri_arguments()) {
      if (uri_arguments_ != &::google::protobuf::internal::kEmptyString) {
        uri_arguments_->clear();
      }
    }
  }
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ae_response_time;
        break;
      }
      
      // optional uint64 ae_response_time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ae_response_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ae_response_time_)));
          set_has_ae_response_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_center;
        break;
      }
      
      // optional .rubicon.data.ad_engine.DataCenter_PB data_center = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dk_history;
        break;
      }
      
      // optional .rubicon.data.ad_engine.DKHistory_PB dk_history = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dk_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dk_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_algorithm;
        break;
      }
      
      // optional .rubicon.data.ad_engine.AlgorithmCode_E algorithm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rubicon::data::ad_engine::AlgorithmCode_E_IsValid(value)) {
            set_algorithm(static_cast< rubicon::data::ad_engine::AlgorithmCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rtb_code;
        break;
      }
      
      // optional .rubicon.data.ad_engine.RTBOperationResultCode_E rtb_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtb_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rubicon::data::ad_engine::RTBOperationResultCode_E_IsValid(value)) {
            set_rtb_code(static_cast< rubicon::data::ad_engine::RTBOperationResultCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bids_accepted;
        break;
      }
      
      // optional uint32 bids_accepted = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bids_accepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bids_accepted_)));
          set_has_bids_accepted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bids_received;
        break;
      }
      
      // optional uint32 bids_received = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bids_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bids_received_)));
          set_has_bids_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_opaque_debug_log;
        break;
      }
      
      // optional string opaque_debug_log = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opaque_debug_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opaque_debug_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opaque_debug_log().data(), this->opaque_debug_log().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_market_pricing;
        break;
      }
      
      // optional .rubicon.data.ad_engine.MarketPricing_PB market_pricing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_pricing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market_pricing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_rtb_premium_applied;
        break;
      }
      
      // optional double rtb_premium_applied = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtb_premium_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtb_premium_applied_)));
          set_has_rtb_premium_applied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_psa_code;
        break;
      }
      
      // optional .rubicon.data.ad_engine.PSACode_E psa_code = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psa_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rubicon::data::ad_engine::PSACode_E_IsValid(value)) {
            set_psa_code(static_cast< rubicon::data::ad_engine::PSACode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pi_debug;
        break;
      }
      
      // optional string pi_debug = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pi_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pi_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pi_debug().data(), this->pi_debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ad_counts;
        break;
      }
      
      // optional .rubicon.data.ad_engine.AdCounts_PB ad_counts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ad_counts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_imp_quality_score;
        break;
      }
      
      // optional double imp_quality_score = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_imp_quality_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imp_quality_score_)));
          set_has_imp_quality_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_uri_arguments;
        break;
      }
      
      // optional string uri_arguments = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_arguments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri_arguments().data(), this->uri_arguments().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_features;
        break;
      }
      
      // repeated .rubicon.data.ad_engine.SystemInfo_PB.FeatureCode_E features = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_features:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E_IsValid(value)) {
            add_features(static_cast< ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E_IsValid,
                 this->mutable_features())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_features;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }
  
  // optional uint64 ae_response_time = 2 [default = 0];
  if (has_ae_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ae_response_time(), output);
  }
  
  // optional .rubicon.data.ad_engine.DataCenter_PB data_center = 3;
  if (has_data_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_center(), output);
  }
  
  // optional .rubicon.data.ad_engine.DKHistory_PB dk_history = 4;
  if (has_dk_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dk_history(), output);
  }
  
  // optional .rubicon.data.ad_engine.AlgorithmCode_E algorithm = 5;
  if (has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->algorithm(), output);
  }
  
  // optional .rubicon.data.ad_engine.RTBOperationResultCode_E rtb_code = 6;
  if (has_rtb_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rtb_code(), output);
  }
  
  // optional uint32 bids_accepted = 7;
  if (has_bids_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bids_accepted(), output);
  }
  
  // optional uint32 bids_received = 8;
  if (has_bids_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bids_received(), output);
  }
  
  // optional string opaque_debug_log = 9;
  if (has_opaque_debug_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opaque_debug_log().data(), this->opaque_debug_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->opaque_debug_log(), output);
  }
  
  // optional .rubicon.data.ad_engine.MarketPricing_PB market_pricing = 10;
  if (has_market_pricing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->market_pricing(), output);
  }
  
  // optional double rtb_premium_applied = 11;
  if (has_rtb_premium_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->rtb_premium_applied(), output);
  }
  
  // optional .rubicon.data.ad_engine.PSACode_E psa_code = 12;
  if (has_psa_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->psa_code(), output);
  }
  
  // optional string pi_debug = 13;
  if (has_pi_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pi_debug().data(), this->pi_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->pi_debug(), output);
  }
  
  // optional .rubicon.data.ad_engine.AdCounts_PB ad_counts = 14;
  if (has_ad_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ad_counts(), output);
  }
  
  // optional double imp_quality_score = 15;
  if (has_imp_quality_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->imp_quality_score(), output);
  }
  
  // optional string uri_arguments = 16;
  if (has_uri_arguments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri_arguments().data(), this->uri_arguments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->uri_arguments(), output);
  }
  
  // repeated .rubicon.data.ad_engine.SystemInfo_PB.FeatureCode_E features = 17;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->features(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }
  
  // optional uint64 ae_response_time = 2 [default = 0];
  if (has_ae_response_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ae_response_time(), target);
  }
  
  // optional .rubicon.data.ad_engine.DataCenter_PB data_center = 3;
  if (has_data_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_center(), target);
  }
  
  // optional .rubicon.data.ad_engine.DKHistory_PB dk_history = 4;
  if (has_dk_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dk_history(), target);
  }
  
  // optional .rubicon.data.ad_engine.AlgorithmCode_E algorithm = 5;
  if (has_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->algorithm(), target);
  }
  
  // optional .rubicon.data.ad_engine.RTBOperationResultCode_E rtb_code = 6;
  if (has_rtb_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rtb_code(), target);
  }
  
  // optional uint32 bids_accepted = 7;
  if (has_bids_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bids_accepted(), target);
  }
  
  // optional uint32 bids_received = 8;
  if (has_bids_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bids_received(), target);
  }
  
  // optional string opaque_debug_log = 9;
  if (has_opaque_debug_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opaque_debug_log().data(), this->opaque_debug_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->opaque_debug_log(), target);
  }
  
  // optional .rubicon.data.ad_engine.MarketPricing_PB market_pricing = 10;
  if (has_market_pricing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->market_pricing(), target);
  }
  
  // optional double rtb_premium_applied = 11;
  if (has_rtb_premium_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->rtb_premium_applied(), target);
  }
  
  // optional .rubicon.data.ad_engine.PSACode_E psa_code = 12;
  if (has_psa_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->psa_code(), target);
  }
  
  // optional string pi_debug = 13;
  if (has_pi_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pi_debug().data(), this->pi_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->pi_debug(), target);
  }
  
  // optional .rubicon.data.ad_engine.AdCounts_PB ad_counts = 14;
  if (has_ad_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ad_counts(), target);
  }
  
  // optional double imp_quality_score = 15;
  if (has_imp_quality_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->imp_quality_score(), target);
  }
  
  // optional string uri_arguments = 16;
  if (has_uri_arguments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri_arguments().data(), this->uri_arguments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->uri_arguments(), target);
  }
  
  // repeated .rubicon.data.ad_engine.SystemInfo_PB.FeatureCode_E features = 17;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->features(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }
    
    // optional uint64 ae_response_time = 2 [default = 0];
    if (has_ae_response_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ae_response_time());
    }
    
    // optional .rubicon.data.ad_engine.DataCenter_PB data_center = 3;
    if (has_data_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_center());
    }
    
    // optional .rubicon.data.ad_engine.DKHistory_PB dk_history = 4;
    if (has_dk_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dk_history());
    }
    
    // optional .rubicon.data.ad_engine.AlgorithmCode_E algorithm = 5;
    if (has_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
    }
    
    // optional .rubicon.data.ad_engine.RTBOperationResultCode_E rtb_code = 6;
    if (has_rtb_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtb_code());
    }
    
    // optional uint32 bids_accepted = 7;
    if (has_bids_accepted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bids_accepted());
    }
    
    // optional uint32 bids_received = 8;
    if (has_bids_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bids_received());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string opaque_debug_log = 9;
    if (has_opaque_debug_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opaque_debug_log());
    }
    
    // optional .rubicon.data.ad_engine.MarketPricing_PB market_pricing = 10;
    if (has_market_pricing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->market_pricing());
    }
    
    // optional double rtb_premium_applied = 11;
    if (has_rtb_premium_applied()) {
      total_size += 1 + 8;
    }
    
    // optional .rubicon.data.ad_engine.PSACode_E psa_code = 12;
    if (has_psa_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->psa_code());
    }
    
    // optional string pi_debug = 13;
    if (has_pi_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pi_debug());
    }
    
    // optional .rubicon.data.ad_engine.AdCounts_PB ad_counts = 14;
    if (has_ad_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ad_counts());
    }
    
    // optional double imp_quality_score = 15;
    if (has_imp_quality_score()) {
      total_size += 1 + 8;
    }
    
    // optional string uri_arguments = 16;
    if (has_uri_arguments()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri_arguments());
    }
    
  }
  // repeated .rubicon.data.ad_engine.SystemInfo_PB.FeatureCode_E features = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->features(i));
    }
    total_size += 2 * this->features_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemInfo_PB::MergeFrom(const SystemInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_ae_response_time()) {
      set_ae_response_time(from.ae_response_time());
    }
    if (from.has_data_center()) {
      mutable_data_center()->::rubicon::data::ad_engine::DataCenter_PB::MergeFrom(from.data_center());
    }
    if (from.has_dk_history()) {
      mutable_dk_history()->::rubicon::data::ad_engine::DKHistory_PB::MergeFrom(from.dk_history());
    }
    if (from.has_algorithm()) {
      set_algorithm(from.algorithm());
    }
    if (from.has_rtb_code()) {
      set_rtb_code(from.rtb_code());
    }
    if (from.has_bids_accepted()) {
      set_bids_accepted(from.bids_accepted());
    }
    if (from.has_bids_received()) {
      set_bids_received(from.bids_received());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opaque_debug_log()) {
      set_opaque_debug_log(from.opaque_debug_log());
    }
    if (from.has_market_pricing()) {
      mutable_market_pricing()->::rubicon::data::ad_engine::MarketPricing_PB::MergeFrom(from.market_pricing());
    }
    if (from.has_rtb_premium_applied()) {
      set_rtb_premium_applied(from.rtb_premium_applied());
    }
    if (from.has_psa_code()) {
      set_psa_code(from.psa_code());
    }
    if (from.has_pi_debug()) {
      set_pi_debug(from.pi_debug());
    }
    if (from.has_ad_counts()) {
      mutable_ad_counts()->::rubicon::data::ad_engine::AdCounts_PB::MergeFrom(from.ad_counts());
    }
    if (from.has_imp_quality_score()) {
      set_imp_quality_score(from.imp_quality_score());
    }
    if (from.has_uri_arguments()) {
      set_uri_arguments(from.uri_arguments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfo_PB::CopyFrom(const SystemInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SystemInfo_PB::Swap(SystemInfo_PB* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(ae_response_time_, other->ae_response_time_);
    std::swap(data_center_, other->data_center_);
    std::swap(dk_history_, other->dk_history_);
    std::swap(algorithm_, other->algorithm_);
    std::swap(rtb_code_, other->rtb_code_);
    std::swap(bids_accepted_, other->bids_accepted_);
    std::swap(bids_received_, other->bids_received_);
    std::swap(opaque_debug_log_, other->opaque_debug_log_);
    std::swap(market_pricing_, other->market_pricing_);
    std::swap(rtb_premium_applied_, other->rtb_premium_applied_);
    std::swap(psa_code_, other->psa_code_);
    std::swap(pi_debug_, other->pi_debug_);
    std::swap(ad_counts_, other->ad_counts_);
    std::swap(imp_quality_score_, other->imp_quality_score_);
    std::swap(uri_arguments_, other->uri_arguments_);
    features_.Swap(&other->features_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemInfo_PB_descriptor_;
  metadata.reflection = SystemInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionInfo_PB::kAdIdFieldNumber;
const int TransactionInfo_PB::kNetworkIdFieldNumber;
const int TransactionInfo_PB::kCampaignIdFieldNumber;
const int TransactionInfo_PB::kRestrictBlockMatchFieldNumber;
const int TransactionInfo_PB::kExtraBlockMatchFieldNumber;
const int TransactionInfo_PB::kCreativeIdFieldNumber;
const int TransactionInfo_PB::kAuctionIdFieldNumber;
const int TransactionInfo_PB::kRevenueCpmFieldNumber;
const int TransactionInfo_PB::kAdClassFieldNumber;
const int TransactionInfo_PB::kRtbTechFeeAssessedFieldNumber;
const int TransactionInfo_PB::kRtbResponseTimeFieldNumber;
const int TransactionInfo_PB::kAdvertiserIdFieldNumber;
const int TransactionInfo_PB::kRtbBillableSeatIdFieldNumber;
const int TransactionInfo_PB::kPrivateTierFieldNumber;
const int TransactionInfo_PB::kBidIdFieldNumber;
const int TransactionInfo_PB::kBidPriceFieldNumber;
const int TransactionInfo_PB::kRtbSeatIdsFieldNumber;
const int TransactionInfo_PB::kRtbPriceFloorFieldNumber;
const int TransactionInfo_PB::kRtbSecondPriceFieldNumber;
const int TransactionInfo_PB::kRtbDealIdFieldNumber;
const int TransactionInfo_PB::kSecondAdIdFieldNumber;
const int TransactionInfo_PB::kAdsafeFieldNumber;
const int TransactionInfo_PB::kBestRivalAdIdFieldNumber;
const int TransactionInfo_PB::kBestRivalCpmPriceFieldNumber;
const int TransactionInfo_PB::kExternalCreativeIdFieldNumber;
#endif  // !_MSC_VER

TransactionInfo_PB::TransactionInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionInfo_PB::InitAsDefaultInstance() {
  ad_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  adsafe_ = const_cast< ::rubicon::data::adsafe::AdSafeResponse_PB*>(&::rubicon::data::adsafe::AdSafeResponse_PB::default_instance());
}

TransactionInfo_PB::TransactionInfo_PB(const TransactionInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  ad_id_ = NULL;
  network_id_ = 0u;
  campaign_id_ = 0;
  restrict_block_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_block_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_id_ = 0u;
  auction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  revenue_cpm_ = 0;
  ad_class_ = 0;
  rtb_tech_fee_assessed_ = 0;
  rtb_response_time_ = GOOGLE_ULONGLONG(0);
  advertiser_id_ = 0u;
  rtb_billable_seat_id_ = 0u;
  private_tier_ = 0;
  bid_id_ = 0u;
  bid_price_ = 0;
  rtb_price_floor_ = 0;
  rtb_second_price_ = 0;
  rtb_deal_id_ = 0u;
  second_ad_id_ = 0u;
  adsafe_ = NULL;
  best_rival_ad_id_ = 0u;
  best_rival_cpm_price_ = 0;
  external_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionInfo_PB::~TransactionInfo_PB() {
  SharedDtor();
}

void TransactionInfo_PB::SharedDtor() {
  if (restrict_block_match_ != &::google::protobuf::internal::kEmptyString) {
    delete restrict_block_match_;
  }
  if (extra_block_match_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_block_match_;
  }
  if (auction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete auction_id_;
  }
  if (external_creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete external_creative_id_;
  }
  if (this != default_instance_) {
    delete ad_id_;
    delete adsafe_;
  }
}

void TransactionInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionInfo_PB_descriptor_;
}

const TransactionInfo_PB& TransactionInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

TransactionInfo_PB* TransactionInfo_PB::default_instance_ = NULL;

TransactionInfo_PB* TransactionInfo_PB::New() const {
  return new TransactionInfo_PB;
}

void TransactionInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ad_id()) {
      if (ad_id_ != NULL) ad_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    network_id_ = 0u;
    campaign_id_ = 0;
    if (has_restrict_block_match()) {
      if (restrict_block_match_ != &::google::protobuf::internal::kEmptyString) {
        restrict_block_match_->clear();
      }
    }
    if (has_extra_block_match()) {
      if (extra_block_match_ != &::google::protobuf::internal::kEmptyString) {
        extra_block_match_->clear();
      }
    }
    creative_id_ = 0u;
    if (has_auction_id()) {
      if (auction_id_ != &::google::protobuf::internal::kEmptyString) {
        auction_id_->clear();
      }
    }
    revenue_cpm_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ad_class_ = 0;
    rtb_tech_fee_assessed_ = 0;
    rtb_response_time_ = GOOGLE_ULONGLONG(0);
    advertiser_id_ = 0u;
    rtb_billable_seat_id_ = 0u;
    private_tier_ = 0;
    bid_id_ = 0u;
    bid_price_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    rtb_price_floor_ = 0;
    rtb_second_price_ = 0;
    rtb_deal_id_ = 0u;
    second_ad_id_ = 0u;
    if (has_adsafe()) {
      if (adsafe_ != NULL) adsafe_->::rubicon::data::adsafe::AdSafeResponse_PB::Clear();
    }
    best_rival_ad_id_ = 0u;
    best_rival_cpm_price_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_external_creative_id()) {
      if (external_creative_id_ != &::google::protobuf::internal::kEmptyString) {
        external_creative_id_->clear();
      }
    }
  }
  rtb_seat_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ad_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_network_id;
        break;
      }
      
      // optional uint32 network_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_id_)));
          set_has_network_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campaign_id;
        break;
      }
      
      // optional int32 campaign_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campaign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campaign_id_)));
          set_has_campaign_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_restrict_block_match;
        break;
      }
      
      // optional string restrict_block_match = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_restrict_block_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_restrict_block_match()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->restrict_block_match().data(), this->restrict_block_match().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extra_block_match;
        break;
      }
      
      // optional string extra_block_match = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_block_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_block_match()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extra_block_match().data(), this->extra_block_match().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_creative_id;
        break;
      }
      
      // optional uint32 creative_id = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creative_id_)));
          set_has_creative_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_auction_id;
        break;
      }
      
      // optional string auction_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auction_id().data(), this->auction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_revenue_cpm;
        break;
      }
      
      // optional double revenue_cpm = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_revenue_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &revenue_cpm_)));
          set_has_revenue_cpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ad_class;
        break;
      }
      
      // optional .rubicon.data.common.AdClassType_E ad_class = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_class:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rubicon::data::common::AdClassType_E_IsValid(value)) {
            set_ad_class(static_cast< rubicon::data::common::AdClassType_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_rtb_tech_fee_assessed;
        break;
      }
      
      // optional double rtb_tech_fee_assessed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtb_tech_fee_assessed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtb_tech_fee_assessed_)));
          set_has_rtb_tech_fee_assessed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rtb_response_time;
        break;
      }
      
      // optional uint64 rtb_response_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtb_response_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtb_response_time_)));
          set_has_rtb_response_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_advertiser_id;
        break;
      }
      
      // optional uint32 advertiser_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advertiser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advertiser_id_)));
          set_has_advertiser_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rtb_billable_seat_id;
        break;
      }
      
      // optional uint32 rtb_billable_seat_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtb_billable_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtb_billable_seat_id_)));
          set_has_rtb_billable_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_private_tier;
        break;
      }
      
      // optional .rubicon.data.common.PrivateTierType_E private_tier = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_private_tier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (rubicon::data::common::PrivateTierType_E_IsValid(value)) {
            set_private_tier(static_cast< rubicon::data::common::PrivateTierType_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bid_id;
        break;
      }
      
      // optional uint32 bid_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bid_id_)));
          set_has_bid_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_bid_price;
        break;
      }
      
      // optional double bid_price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_rtb_seat_ids;
        break;
      }
      
      // repeated uint32 rtb_seat_ids = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtb_seat_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_rtb_seat_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rtb_seat_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_rtb_seat_ids;
        if (input->ExpectTag(145)) goto parse_rtb_price_floor;
        break;
      }
      
      // optional double rtb_price_floor = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtb_price_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtb_price_floor_)));
          set_has_rtb_price_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_rtb_second_price;
        break;
      }
      
      // optional double rtb_second_price = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtb_second_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtb_second_price_)));
          set_has_rtb_second_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_rtb_deal_id;
        break;
      }
      
      // optional uint32 rtb_deal_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtb_deal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtb_deal_id_)));
          set_has_rtb_deal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_second_ad_id;
        break;
      }
      
      // optional uint32 second_ad_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_ad_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_ad_id_)));
          set_has_second_ad_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_adsafe;
        break;
      }
      
      // optional .rubicon.data.adsafe.AdSafeResponse_PB adsafe = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adsafe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adsafe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_best_rival_ad_id;
        break;
      }
      
      // optional uint32 best_rival_ad_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_rival_ad_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_rival_ad_id_)));
          set_has_best_rival_ad_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_best_rival_cpm_price;
        break;
      }
      
      // optional double best_rival_cpm_price = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_best_rival_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &best_rival_cpm_price_)));
          set_has_best_rival_cpm_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_external_creative_id;
        break;
      }
      
      // optional string external_creative_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_creative_id().data(), this->external_creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
  if (has_ad_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ad_id(), output);
  }
  
  // optional uint32 network_id = 2 [default = 0];
  if (has_network_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->network_id(), output);
  }
  
  // optional int32 campaign_id = 3 [default = 0];
  if (has_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->campaign_id(), output);
  }
  
  // optional string restrict_block_match = 4;
  if (has_restrict_block_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->restrict_block_match().data(), this->restrict_block_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->restrict_block_match(), output);
  }
  
  // optional string extra_block_match = 5;
  if (has_extra_block_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_block_match().data(), this->extra_block_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->extra_block_match(), output);
  }
  
  // optional uint32 creative_id = 6 [default = 0];
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->creative_id(), output);
  }
  
  // optional string auction_id = 7;
  if (has_auction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auction_id().data(), this->auction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->auction_id(), output);
  }
  
  // optional double revenue_cpm = 8 [default = 0];
  if (has_revenue_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->revenue_cpm(), output);
  }
  
  // optional .rubicon.data.common.AdClassType_E ad_class = 9;
  if (has_ad_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->ad_class(), output);
  }
  
  // optional double rtb_tech_fee_assessed = 10;
  if (has_rtb_tech_fee_assessed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->rtb_tech_fee_assessed(), output);
  }
  
  // optional uint64 rtb_response_time = 11;
  if (has_rtb_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->rtb_response_time(), output);
  }
  
  // optional uint32 advertiser_id = 12;
  if (has_advertiser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->advertiser_id(), output);
  }
  
  // optional uint32 rtb_billable_seat_id = 13;
  if (has_rtb_billable_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->rtb_billable_seat_id(), output);
  }
  
  // optional .rubicon.data.common.PrivateTierType_E private_tier = 14;
  if (has_private_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->private_tier(), output);
  }
  
  // optional uint32 bid_id = 15;
  if (has_bid_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bid_id(), output);
  }
  
  // optional double bid_price = 16;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->bid_price(), output);
  }
  
  // repeated uint32 rtb_seat_ids = 17;
  for (int i = 0; i < this->rtb_seat_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->rtb_seat_ids(i), output);
  }
  
  // optional double rtb_price_floor = 18;
  if (has_rtb_price_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->rtb_price_floor(), output);
  }
  
  // optional double rtb_second_price = 19;
  if (has_rtb_second_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->rtb_second_price(), output);
  }
  
  // optional uint32 rtb_deal_id = 20;
  if (has_rtb_deal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->rtb_deal_id(), output);
  }
  
  // optional uint32 second_ad_id = 21;
  if (has_second_ad_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->second_ad_id(), output);
  }
  
  // optional .rubicon.data.adsafe.AdSafeResponse_PB adsafe = 22;
  if (has_adsafe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->adsafe(), output);
  }
  
  // optional uint32 best_rival_ad_id = 23;
  if (has_best_rival_ad_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->best_rival_ad_id(), output);
  }
  
  // optional double best_rival_cpm_price = 24;
  if (has_best_rival_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->best_rival_cpm_price(), output);
  }
  
  // optional string external_creative_id = 25;
  if (has_external_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_creative_id().data(), this->external_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->external_creative_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
  if (has_ad_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ad_id(), target);
  }
  
  // optional uint32 network_id = 2 [default = 0];
  if (has_network_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->network_id(), target);
  }
  
  // optional int32 campaign_id = 3 [default = 0];
  if (has_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->campaign_id(), target);
  }
  
  // optional string restrict_block_match = 4;
  if (has_restrict_block_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->restrict_block_match().data(), this->restrict_block_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->restrict_block_match(), target);
  }
  
  // optional string extra_block_match = 5;
  if (has_extra_block_match()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_block_match().data(), this->extra_block_match().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extra_block_match(), target);
  }
  
  // optional uint32 creative_id = 6 [default = 0];
  if (has_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->creative_id(), target);
  }
  
  // optional string auction_id = 7;
  if (has_auction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auction_id().data(), this->auction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->auction_id(), target);
  }
  
  // optional double revenue_cpm = 8 [default = 0];
  if (has_revenue_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->revenue_cpm(), target);
  }
  
  // optional .rubicon.data.common.AdClassType_E ad_class = 9;
  if (has_ad_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->ad_class(), target);
  }
  
  // optional double rtb_tech_fee_assessed = 10;
  if (has_rtb_tech_fee_assessed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->rtb_tech_fee_assessed(), target);
  }
  
  // optional uint64 rtb_response_time = 11;
  if (has_rtb_response_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->rtb_response_time(), target);
  }
  
  // optional uint32 advertiser_id = 12;
  if (has_advertiser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->advertiser_id(), target);
  }
  
  // optional uint32 rtb_billable_seat_id = 13;
  if (has_rtb_billable_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->rtb_billable_seat_id(), target);
  }
  
  // optional .rubicon.data.common.PrivateTierType_E private_tier = 14;
  if (has_private_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->private_tier(), target);
  }
  
  // optional uint32 bid_id = 15;
  if (has_bid_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bid_id(), target);
  }
  
  // optional double bid_price = 16;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->bid_price(), target);
  }
  
  // repeated uint32 rtb_seat_ids = 17;
  for (int i = 0; i < this->rtb_seat_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->rtb_seat_ids(i), target);
  }
  
  // optional double rtb_price_floor = 18;
  if (has_rtb_price_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->rtb_price_floor(), target);
  }
  
  // optional double rtb_second_price = 19;
  if (has_rtb_second_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->rtb_second_price(), target);
  }
  
  // optional uint32 rtb_deal_id = 20;
  if (has_rtb_deal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->rtb_deal_id(), target);
  }
  
  // optional uint32 second_ad_id = 21;
  if (has_second_ad_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->second_ad_id(), target);
  }
  
  // optional .rubicon.data.adsafe.AdSafeResponse_PB adsafe = 22;
  if (has_adsafe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->adsafe(), target);
  }
  
  // optional uint32 best_rival_ad_id = 23;
  if (has_best_rival_ad_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->best_rival_ad_id(), target);
  }
  
  // optional double best_rival_cpm_price = 24;
  if (has_best_rival_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->best_rival_cpm_price(), target);
  }
  
  // optional string external_creative_id = 25;
  if (has_external_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_creative_id().data(), this->external_creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->external_creative_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
    if (has_ad_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ad_id());
    }
    
    // optional uint32 network_id = 2 [default = 0];
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_id());
    }
    
    // optional int32 campaign_id = 3 [default = 0];
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campaign_id());
    }
    
    // optional string restrict_block_match = 4;
    if (has_restrict_block_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->restrict_block_match());
    }
    
    // optional string extra_block_match = 5;
    if (has_extra_block_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_block_match());
    }
    
    // optional uint32 creative_id = 6 [default = 0];
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creative_id());
    }
    
    // optional string auction_id = 7;
    if (has_auction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auction_id());
    }
    
    // optional double revenue_cpm = 8 [default = 0];
    if (has_revenue_cpm()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rubicon.data.common.AdClassType_E ad_class = 9;
    if (has_ad_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ad_class());
    }
    
    // optional double rtb_tech_fee_assessed = 10;
    if (has_rtb_tech_fee_assessed()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 rtb_response_time = 11;
    if (has_rtb_response_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtb_response_time());
    }
    
    // optional uint32 advertiser_id = 12;
    if (has_advertiser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advertiser_id());
    }
    
    // optional uint32 rtb_billable_seat_id = 13;
    if (has_rtb_billable_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtb_billable_seat_id());
    }
    
    // optional .rubicon.data.common.PrivateTierType_E private_tier = 14;
    if (has_private_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->private_tier());
    }
    
    // optional uint32 bid_id = 15;
    if (has_bid_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bid_id());
    }
    
    // optional double bid_price = 16;
    if (has_bid_price()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional double rtb_price_floor = 18;
    if (has_rtb_price_floor()) {
      total_size += 2 + 8;
    }
    
    // optional double rtb_second_price = 19;
    if (has_rtb_second_price()) {
      total_size += 2 + 8;
    }
    
    // optional uint32 rtb_deal_id = 20;
    if (has_rtb_deal_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtb_deal_id());
    }
    
    // optional uint32 second_ad_id = 21;
    if (has_second_ad_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second_ad_id());
    }
    
    // optional .rubicon.data.adsafe.AdSafeResponse_PB adsafe = 22;
    if (has_adsafe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adsafe());
    }
    
    // optional uint32 best_rival_ad_id = 23;
    if (has_best_rival_ad_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_rival_ad_id());
    }
    
    // optional double best_rival_cpm_price = 24;
    if (has_best_rival_cpm_price()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string external_creative_id = 25;
    if (has_external_creative_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_creative_id());
    }
    
  }
  // repeated uint32 rtb_seat_ids = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->rtb_seat_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rtb_seat_ids(i));
    }
    total_size += 2 * this->rtb_seat_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionInfo_PB::MergeFrom(const TransactionInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  rtb_seat_ids_.MergeFrom(from.rtb_seat_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad_id()) {
      mutable_ad_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.ad_id());
    }
    if (from.has_network_id()) {
      set_network_id(from.network_id());
    }
    if (from.has_campaign_id()) {
      set_campaign_id(from.campaign_id());
    }
    if (from.has_restrict_block_match()) {
      set_restrict_block_match(from.restrict_block_match());
    }
    if (from.has_extra_block_match()) {
      set_extra_block_match(from.extra_block_match());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_auction_id()) {
      set_auction_id(from.auction_id());
    }
    if (from.has_revenue_cpm()) {
      set_revenue_cpm(from.revenue_cpm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ad_class()) {
      set_ad_class(from.ad_class());
    }
    if (from.has_rtb_tech_fee_assessed()) {
      set_rtb_tech_fee_assessed(from.rtb_tech_fee_assessed());
    }
    if (from.has_rtb_response_time()) {
      set_rtb_response_time(from.rtb_response_time());
    }
    if (from.has_advertiser_id()) {
      set_advertiser_id(from.advertiser_id());
    }
    if (from.has_rtb_billable_seat_id()) {
      set_rtb_billable_seat_id(from.rtb_billable_seat_id());
    }
    if (from.has_private_tier()) {
      set_private_tier(from.private_tier());
    }
    if (from.has_bid_id()) {
      set_bid_id(from.bid_id());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_rtb_price_floor()) {
      set_rtb_price_floor(from.rtb_price_floor());
    }
    if (from.has_rtb_second_price()) {
      set_rtb_second_price(from.rtb_second_price());
    }
    if (from.has_rtb_deal_id()) {
      set_rtb_deal_id(from.rtb_deal_id());
    }
    if (from.has_second_ad_id()) {
      set_second_ad_id(from.second_ad_id());
    }
    if (from.has_adsafe()) {
      mutable_adsafe()->::rubicon::data::adsafe::AdSafeResponse_PB::MergeFrom(from.adsafe());
    }
    if (from.has_best_rival_ad_id()) {
      set_best_rival_ad_id(from.best_rival_ad_id());
    }
    if (from.has_best_rival_cpm_price()) {
      set_best_rival_cpm_price(from.best_rival_cpm_price());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_external_creative_id()) {
      set_external_creative_id(from.external_creative_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInfo_PB::CopyFrom(const TransactionInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfo_PB::IsInitialized() const {
  
  return true;
}

void TransactionInfo_PB::Swap(TransactionInfo_PB* other) {
  if (other != this) {
    std::swap(ad_id_, other->ad_id_);
    std::swap(network_id_, other->network_id_);
    std::swap(campaign_id_, other->campaign_id_);
    std::swap(restrict_block_match_, other->restrict_block_match_);
    std::swap(extra_block_match_, other->extra_block_match_);
    std::swap(creative_id_, other->creative_id_);
    std::swap(auction_id_, other->auction_id_);
    std::swap(revenue_cpm_, other->revenue_cpm_);
    std::swap(ad_class_, other->ad_class_);
    std::swap(rtb_tech_fee_assessed_, other->rtb_tech_fee_assessed_);
    std::swap(rtb_response_time_, other->rtb_response_time_);
    std::swap(advertiser_id_, other->advertiser_id_);
    std::swap(rtb_billable_seat_id_, other->rtb_billable_seat_id_);
    std::swap(private_tier_, other->private_tier_);
    std::swap(bid_id_, other->bid_id_);
    std::swap(bid_price_, other->bid_price_);
    rtb_seat_ids_.Swap(&other->rtb_seat_ids_);
    std::swap(rtb_price_floor_, other->rtb_price_floor_);
    std::swap(rtb_second_price_, other->rtb_second_price_);
    std::swap(rtb_deal_id_, other->rtb_deal_id_);
    std::swap(second_ad_id_, other->second_ad_id_);
    std::swap(adsafe_, other->adsafe_);
    std::swap(best_rival_ad_id_, other->best_rival_ad_id_);
    std::swap(best_rival_cpm_price_, other->best_rival_cpm_price_);
    std::swap(external_creative_id_, other->external_creative_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionInfo_PB_descriptor_;
  metadata.reflection = TransactionInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdEngineLog_PB::kUserInfoFieldNumber;
const int AdEngineLog_PB::kGeoInfoFieldNumber;
const int AdEngineLog_PB::kInventoryInfoFieldNumber;
const int AdEngineLog_PB::kSystemInfoFieldNumber;
const int AdEngineLog_PB::kTransactionInfoFieldNumber;
#endif  // !_MSC_VER

AdEngineLog_PB::AdEngineLog_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdEngineLog_PB::InitAsDefaultInstance() {
  user_info_ = const_cast< ::rubicon::data::ad_engine::UserInfo_PB*>(&::rubicon::data::ad_engine::UserInfo_PB::default_instance());
  geo_info_ = const_cast< ::rubicon::data::ad_engine::GeoInfo_PB*>(&::rubicon::data::ad_engine::GeoInfo_PB::default_instance());
  inventory_info_ = const_cast< ::rubicon::data::ad_engine::InventoryInfo_PB*>(&::rubicon::data::ad_engine::InventoryInfo_PB::default_instance());
  system_info_ = const_cast< ::rubicon::data::ad_engine::SystemInfo_PB*>(&::rubicon::data::ad_engine::SystemInfo_PB::default_instance());
  transaction_info_ = const_cast< ::rubicon::data::ad_engine::TransactionInfo_PB*>(&::rubicon::data::ad_engine::TransactionInfo_PB::default_instance());
}

AdEngineLog_PB::AdEngineLog_PB(const AdEngineLog_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdEngineLog_PB::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  geo_info_ = NULL;
  inventory_info_ = NULL;
  system_info_ = NULL;
  transaction_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdEngineLog_PB::~AdEngineLog_PB() {
  SharedDtor();
}

void AdEngineLog_PB::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
    delete geo_info_;
    delete inventory_info_;
    delete system_info_;
    delete transaction_info_;
  }
}

void AdEngineLog_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdEngineLog_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdEngineLog_PB_descriptor_;
}

const AdEngineLog_PB& AdEngineLog_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5flog_2eproto();  return *default_instance_;
}

AdEngineLog_PB* AdEngineLog_PB::default_instance_ = NULL;

AdEngineLog_PB* AdEngineLog_PB::New() const {
  return new AdEngineLog_PB;
}

void AdEngineLog_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::rubicon::data::ad_engine::UserInfo_PB::Clear();
    }
    if (has_geo_info()) {
      if (geo_info_ != NULL) geo_info_->::rubicon::data::ad_engine::GeoInfo_PB::Clear();
    }
    if (has_inventory_info()) {
      if (inventory_info_ != NULL) inventory_info_->::rubicon::data::ad_engine::InventoryInfo_PB::Clear();
    }
    if (has_system_info()) {
      if (system_info_ != NULL) system_info_->::rubicon::data::ad_engine::SystemInfo_PB::Clear();
    }
    if (has_transaction_info()) {
      if (transaction_info_ != NULL) transaction_info_->::rubicon::data::ad_engine::TransactionInfo_PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdEngineLog_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.ad_engine.UserInfo_PB user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geo_info;
        break;
      }
      
      // optional .rubicon.data.ad_engine.GeoInfo_PB geo_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inventory_info;
        break;
      }
      
      // optional .rubicon.data.ad_engine.InventoryInfo_PB inventory_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inventory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inventory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_system_info;
        break;
      }
      
      // optional .rubicon.data.ad_engine.SystemInfo_PB system_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_transaction_info;
        break;
      }
      
      // optional .rubicon.data.ad_engine.TransactionInfo_PB transaction_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdEngineLog_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.ad_engine.UserInfo_PB user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }
  
  // optional .rubicon.data.ad_engine.GeoInfo_PB geo_info = 2;
  if (has_geo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo_info(), output);
  }
  
  // optional .rubicon.data.ad_engine.InventoryInfo_PB inventory_info = 3;
  if (has_inventory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inventory_info(), output);
  }
  
  // optional .rubicon.data.ad_engine.SystemInfo_PB system_info = 4;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->system_info(), output);
  }
  
  // optional .rubicon.data.ad_engine.TransactionInfo_PB transaction_info = 5;
  if (has_transaction_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->transaction_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdEngineLog_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.ad_engine.UserInfo_PB user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }
  
  // optional .rubicon.data.ad_engine.GeoInfo_PB geo_info = 2;
  if (has_geo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geo_info(), target);
  }
  
  // optional .rubicon.data.ad_engine.InventoryInfo_PB inventory_info = 3;
  if (has_inventory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inventory_info(), target);
  }
  
  // optional .rubicon.data.ad_engine.SystemInfo_PB system_info = 4;
  if (has_system_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->system_info(), target);
  }
  
  // optional .rubicon.data.ad_engine.TransactionInfo_PB transaction_info = 5;
  if (has_transaction_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->transaction_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdEngineLog_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.ad_engine.UserInfo_PB user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }
    
    // optional .rubicon.data.ad_engine.GeoInfo_PB geo_info = 2;
    if (has_geo_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_info());
    }
    
    // optional .rubicon.data.ad_engine.InventoryInfo_PB inventory_info = 3;
    if (has_inventory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inventory_info());
    }
    
    // optional .rubicon.data.ad_engine.SystemInfo_PB system_info = 4;
    if (has_system_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system_info());
    }
    
    // optional .rubicon.data.ad_engine.TransactionInfo_PB transaction_info = 5;
    if (has_transaction_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transaction_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdEngineLog_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdEngineLog_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdEngineLog_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdEngineLog_PB::MergeFrom(const AdEngineLog_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::rubicon::data::ad_engine::UserInfo_PB::MergeFrom(from.user_info());
    }
    if (from.has_geo_info()) {
      mutable_geo_info()->::rubicon::data::ad_engine::GeoInfo_PB::MergeFrom(from.geo_info());
    }
    if (from.has_inventory_info()) {
      mutable_inventory_info()->::rubicon::data::ad_engine::InventoryInfo_PB::MergeFrom(from.inventory_info());
    }
    if (from.has_system_info()) {
      mutable_system_info()->::rubicon::data::ad_engine::SystemInfo_PB::MergeFrom(from.system_info());
    }
    if (from.has_transaction_info()) {
      mutable_transaction_info()->::rubicon::data::ad_engine::TransactionInfo_PB::MergeFrom(from.transaction_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdEngineLog_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdEngineLog_PB::CopyFrom(const AdEngineLog_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdEngineLog_PB::IsInitialized() const {
  
  if (has_inventory_info()) {
    if (!this->inventory_info().IsInitialized()) return false;
  }
  if (has_system_info()) {
    if (!this->system_info().IsInitialized()) return false;
  }
  return true;
}

void AdEngineLog_PB::Swap(AdEngineLog_PB* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(geo_info_, other->geo_info_);
    std::swap(inventory_info_, other->inventory_info_);
    std::swap(system_info_, other->system_info_);
    std::swap(transaction_info_, other->transaction_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdEngineLog_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdEngineLog_PB_descriptor_;
  metadata.reflection = AdEngineLog_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
