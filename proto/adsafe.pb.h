// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adsafe.proto

#ifndef PROTOBUF_adsafe_2eproto__INCLUDED
#define PROTOBUF_adsafe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace adsafe {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_adsafe_2eproto();
void protobuf_AssignDesc_adsafe_2eproto();
void protobuf_ShutdownFile_adsafe_2eproto();

class BSCResponse_PB;
class IABCategory_PB;
class IABSubCategory_PB;
class AdSafeResponse_PB;

enum IABCategory_PB_IABCategory_E {
  IABCategory_PB_IABCategory_E_IAB_ARTS = 1,
  IABCategory_PB_IABCategory_E_IAB_AUTO = 2,
  IABCategory_PB_IABCategory_E_IAB_BUSINESS = 3,
  IABCategory_PB_IABCategory_E_IAB_CAREERS = 4,
  IABCategory_PB_IABCategory_E_IAB_EDU = 5,
  IABCategory_PB_IABCategory_E_IAB_FAMILY = 6,
  IABCategory_PB_IABCategory_E_IAB_FINANCE = 7,
  IABCategory_PB_IABCategory_E_IAB_FOOD = 8,
  IABCategory_PB_IABCategory_E_IAB_HEALTH = 9,
  IABCategory_PB_IABCategory_E_IAB_HOBBIES = 10,
  IABCategory_PB_IABCategory_E_IAB_HOME = 11,
  IABCategory_PB_IABCategory_E_IAB_LAWGOVT = 12,
  IABCategory_PB_IABCategory_E_IAB_NEWS = 13,
  IABCategory_PB_IABCategory_E_IAB_PETS = 14,
  IABCategory_PB_IABCategory_E_IAB_REALESTATE = 15,
  IABCategory_PB_IABCategory_E_IAB_RELIGION = 16,
  IABCategory_PB_IABCategory_E_IAB_SCIENCE = 17,
  IABCategory_PB_IABCategory_E_IAB_SHOP = 18,
  IABCategory_PB_IABCategory_E_IAB_SOCIETY = 19,
  IABCategory_PB_IABCategory_E_IAB_SPORTS = 20,
  IABCategory_PB_IABCategory_E_IAB_STYLE = 21,
  IABCategory_PB_IABCategory_E_IAB_TECH = 22,
  IABCategory_PB_IABCategory_E_IAB_TRAVEL = 23
};
bool IABCategory_PB_IABCategory_E_IsValid(int value);
const IABCategory_PB_IABCategory_E IABCategory_PB_IABCategory_E_IABCategory_E_MIN = IABCategory_PB_IABCategory_E_IAB_ARTS;
const IABCategory_PB_IABCategory_E IABCategory_PB_IABCategory_E_IABCategory_E_MAX = IABCategory_PB_IABCategory_E_IAB_TRAVEL;
const int IABCategory_PB_IABCategory_E_IABCategory_E_ARRAYSIZE = IABCategory_PB_IABCategory_E_IABCategory_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* IABCategory_PB_IABCategory_E_descriptor();
inline const ::std::string& IABCategory_PB_IABCategory_E_Name(IABCategory_PB_IABCategory_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    IABCategory_PB_IABCategory_E_descriptor(), value);
}
inline bool IABCategory_PB_IABCategory_E_Parse(
    const ::std::string& name, IABCategory_PB_IABCategory_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IABCategory_PB_IABCategory_E>(
    IABCategory_PB_IABCategory_E_descriptor(), name, value);
}
enum IABSubCategory_PB_IABSubCategory_E {
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ACCESSOR = 1,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ADOPTION = 2,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ADVERTIS = 3,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_AGRICULT = 4,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ALCOHOL = 5,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ALTMED = 6,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ARCHITEC = 7,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ART = 8,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ASTROLOG = 9,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ASTRONOM = 10,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BANK = 11,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BASEBALL = 12,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BB = 13,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BEVERAGE = 14,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BIOLOGY = 15,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BIOTECH = 16,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BODYBUIL = 17,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BOOKS = 18,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BOTANY = 19,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BOXING = 20,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BSKTBALL = 21,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_BUDDHISM = 22,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CAMPING = 23,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CARDGAME = 24,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CARDIOLO = 25,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CATHOLIC = 26,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CELLPHON = 27,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHAT = 28,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHEMISTR = 29,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHESS = 30,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHRISTIA = 31,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CITIES = 32,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CLOTHING = 33,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_COLLECT = 34,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_COLLEGE = 35,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_COMICBK = 36,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_COMPETIT = 37,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_COMPUTER = 38,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CONSTRUC = 39,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CRICKET = 40,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_CRUISES = 41,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_DIETING = 42,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_DISEASE = 43,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_DIVORCE = 44,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_DRAWING = 45,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_DRUGS = 46,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ECOLOGY = 47,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ECOMMERC = 48,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ELCTRONI = 49,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_EMAIL = 50,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_FASHION = 51,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_FISHING = 52,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_FOOTBALL = 53,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GAMES = 54,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GARDEN = 55,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GASTRONO = 56,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GEOGRAPH = 57,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GEOLOGY = 58,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GOLF = 59,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GOSSIP = 60,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_GOV = 61,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HAIRCARE = 62,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HARDWARE = 63,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HINDUISM = 64,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HMETHEAT = 65,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOBBY = 66,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOCKEY = 67,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOLIDAYS = 68,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOMEIMP = 69,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HONEYMOO = 70,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HORSERAC = 71,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOUSE = 72,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_HUNTING = 73,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ICESKATE = 74,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_IMMIGRAT = 75,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_INSURANC = 76,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_INTDEC = 77,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_INTERNET = 78,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ISLAM = 79,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_JEWELRY = 80,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_JUDAISM = 81,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_KAYAK = 82,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_LAWJUST = 83,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_LOANS = 84,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_LOGISTIC = 85,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MAGAZINE = 86,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MARKETIN = 87,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MARRIAGE = 88,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MINIVAN = 89,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MOTORCYC = 90,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MOVIE = 91,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MRTLARTS = 92,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_MUSIC = 93,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_NARESRVS = 94,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_NASCAR = 95,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_NETWORKI = 96,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_OLYMPICS = 97,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PAINTING = 98,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PEOPLE = 99,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PHOTOGRA = 100,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PHYSICS = 101,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_POLITICS = 102,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PREGNANC = 103,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PSYCHIAT = 104,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_PURCHASE = 105,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_RADIO = 106,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_REHAB = 107,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_RETIREME = 108,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ROCKCLIM = 109,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SECURITI = 110,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SEDAN = 111,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SHOWSEVE = 112,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SOFTWARE = 113,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SPA = 114,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SPORTNWS = 115,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SPRTSCAR = 116,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_STAMPS = 117,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SUV = 118,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_SWIMMING = 119,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_TATTOOS = 120,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_TOURISM = 121,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_TRANSPOR = 122,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_TV = 123,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_UNEMPLOY = 124,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_VETMED = 125,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_VIDEOGAM = 126,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_WEATHER = 127,
  IABSubCategory_PB_IABSubCategory_E_IAB_T2_ZOOLOGY = 128
};
bool IABSubCategory_PB_IABSubCategory_E_IsValid(int value);
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_MIN = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ACCESSOR;
const IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_MAX = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ZOOLOGY;
const int IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_ARRAYSIZE = IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* IABSubCategory_PB_IABSubCategory_E_descriptor();
inline const ::std::string& IABSubCategory_PB_IABSubCategory_E_Name(IABSubCategory_PB_IABSubCategory_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    IABSubCategory_PB_IABSubCategory_E_descriptor(), value);
}
inline bool IABSubCategory_PB_IABSubCategory_E_Parse(
    const ::std::string& name, IABSubCategory_PB_IABSubCategory_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IABSubCategory_PB_IABSubCategory_E>(
    IABSubCategory_PB_IABSubCategory_E_descriptor(), name, value);
}
enum AdSafeResponse_PB_ActionStatus_E {
  AdSafeResponse_PB_ActionStatus_E_PASSED = 1,
  AdSafeResponse_PB_ActionStatus_E_FAILED = 2,
  AdSafeResponse_PB_ActionStatus_E_UNKNOWN = 3,
  AdSafeResponse_PB_ActionStatus_E_IGNORE = 4
};
bool AdSafeResponse_PB_ActionStatus_E_IsValid(int value);
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_MIN = AdSafeResponse_PB_ActionStatus_E_PASSED;
const AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_MAX = AdSafeResponse_PB_ActionStatus_E_IGNORE;
const int AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_ARRAYSIZE = AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdSafeResponse_PB_ActionStatus_E_descriptor();
inline const ::std::string& AdSafeResponse_PB_ActionStatus_E_Name(AdSafeResponse_PB_ActionStatus_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdSafeResponse_PB_ActionStatus_E_descriptor(), value);
}
inline bool AdSafeResponse_PB_ActionStatus_E_Parse(
    const ::std::string& name, AdSafeResponse_PB_ActionStatus_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdSafeResponse_PB_ActionStatus_E>(
    AdSafeResponse_PB_ActionStatus_E_descriptor(), name, value);
}
// ===================================================================

class BSCResponse_PB : public ::google::protobuf::Message {
 public:
  BSCResponse_PB();
  virtual ~BSCResponse_PB();
  
  BSCResponse_PB(const BSCResponse_PB& from);
  
  inline BSCResponse_PB& operator=(const BSCResponse_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BSCResponse_PB& default_instance();
  
  void Swap(BSCResponse_PB* other);
  
  // implements Message ----------------------------------------------
  
  BSCResponse_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BSCResponse_PB& from);
  void MergeFrom(const BSCResponse_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 adult = 2;
  inline bool has_adult() const;
  inline void clear_adult();
  static const int kAdultFieldNumber = 2;
  inline ::google::protobuf::uint64 adult() const;
  inline void set_adult(::google::protobuf::uint64 value);
  
  // optional uint64 alcohol = 3;
  inline bool has_alcohol() const;
  inline void clear_alcohol();
  static const int kAlcoholFieldNumber = 3;
  inline ::google::protobuf::uint64 alcohol() const;
  inline void set_alcohol(::google::protobuf::uint64 value);
  
  // optional uint64 illegal_downloads = 4;
  inline bool has_illegal_downloads() const;
  inline void clear_illegal_downloads();
  static const int kIllegalDownloadsFieldNumber = 4;
  inline ::google::protobuf::uint64 illegal_downloads() const;
  inline void set_illegal_downloads(::google::protobuf::uint64 value);
  
  // optional uint64 illegal_drugs = 5;
  inline bool has_illegal_drugs() const;
  inline void clear_illegal_drugs();
  static const int kIllegalDrugsFieldNumber = 5;
  inline ::google::protobuf::uint64 illegal_drugs() const;
  inline void set_illegal_drugs(::google::protobuf::uint64 value);
  
  // optional uint64 hate = 6;
  inline bool has_hate() const;
  inline void clear_hate();
  static const int kHateFieldNumber = 6;
  inline ::google::protobuf::uint64 hate() const;
  inline void set_hate(::google::protobuf::uint64 value);
  
  // optional uint64 offensive_language = 7;
  inline bool has_offensive_language() const;
  inline void clear_offensive_language();
  static const int kOffensiveLanguageFieldNumber = 7;
  inline ::google::protobuf::uint64 offensive_language() const;
  inline void set_offensive_language(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rubicon.data.adsafe.BSCResponse_PB)
 private:
  inline void set_has_adult();
  inline void clear_has_adult();
  inline void set_has_alcohol();
  inline void clear_has_alcohol();
  inline void set_has_illegal_downloads();
  inline void clear_has_illegal_downloads();
  inline void set_has_illegal_drugs();
  inline void clear_has_illegal_drugs();
  inline void set_has_hate();
  inline void clear_has_hate();
  inline void set_has_offensive_language();
  inline void clear_has_offensive_language();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 adult_;
  ::google::protobuf::uint64 alcohol_;
  ::google::protobuf::uint64 illegal_downloads_;
  ::google::protobuf::uint64 illegal_drugs_;
  ::google::protobuf::uint64 hate_;
  ::google::protobuf::uint64 offensive_language_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_adsafe_2eproto();
  friend void protobuf_AssignDesc_adsafe_2eproto();
  friend void protobuf_ShutdownFile_adsafe_2eproto();
  
  void InitAsDefaultInstance();
  static BSCResponse_PB* default_instance_;
};
// -------------------------------------------------------------------

class IABCategory_PB : public ::google::protobuf::Message {
 public:
  IABCategory_PB();
  virtual ~IABCategory_PB();
  
  IABCategory_PB(const IABCategory_PB& from);
  
  inline IABCategory_PB& operator=(const IABCategory_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IABCategory_PB& default_instance();
  
  void Swap(IABCategory_PB* other);
  
  // implements Message ----------------------------------------------
  
  IABCategory_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IABCategory_PB& from);
  void MergeFrom(const IABCategory_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef IABCategory_PB_IABCategory_E IABCategory_E;
  static const IABCategory_E IAB_ARTS = IABCategory_PB_IABCategory_E_IAB_ARTS;
  static const IABCategory_E IAB_AUTO = IABCategory_PB_IABCategory_E_IAB_AUTO;
  static const IABCategory_E IAB_BUSINESS = IABCategory_PB_IABCategory_E_IAB_BUSINESS;
  static const IABCategory_E IAB_CAREERS = IABCategory_PB_IABCategory_E_IAB_CAREERS;
  static const IABCategory_E IAB_EDU = IABCategory_PB_IABCategory_E_IAB_EDU;
  static const IABCategory_E IAB_FAMILY = IABCategory_PB_IABCategory_E_IAB_FAMILY;
  static const IABCategory_E IAB_FINANCE = IABCategory_PB_IABCategory_E_IAB_FINANCE;
  static const IABCategory_E IAB_FOOD = IABCategory_PB_IABCategory_E_IAB_FOOD;
  static const IABCategory_E IAB_HEALTH = IABCategory_PB_IABCategory_E_IAB_HEALTH;
  static const IABCategory_E IAB_HOBBIES = IABCategory_PB_IABCategory_E_IAB_HOBBIES;
  static const IABCategory_E IAB_HOME = IABCategory_PB_IABCategory_E_IAB_HOME;
  static const IABCategory_E IAB_LAWGOVT = IABCategory_PB_IABCategory_E_IAB_LAWGOVT;
  static const IABCategory_E IAB_NEWS = IABCategory_PB_IABCategory_E_IAB_NEWS;
  static const IABCategory_E IAB_PETS = IABCategory_PB_IABCategory_E_IAB_PETS;
  static const IABCategory_E IAB_REALESTATE = IABCategory_PB_IABCategory_E_IAB_REALESTATE;
  static const IABCategory_E IAB_RELIGION = IABCategory_PB_IABCategory_E_IAB_RELIGION;
  static const IABCategory_E IAB_SCIENCE = IABCategory_PB_IABCategory_E_IAB_SCIENCE;
  static const IABCategory_E IAB_SHOP = IABCategory_PB_IABCategory_E_IAB_SHOP;
  static const IABCategory_E IAB_SOCIETY = IABCategory_PB_IABCategory_E_IAB_SOCIETY;
  static const IABCategory_E IAB_SPORTS = IABCategory_PB_IABCategory_E_IAB_SPORTS;
  static const IABCategory_E IAB_STYLE = IABCategory_PB_IABCategory_E_IAB_STYLE;
  static const IABCategory_E IAB_TECH = IABCategory_PB_IABCategory_E_IAB_TECH;
  static const IABCategory_E IAB_TRAVEL = IABCategory_PB_IABCategory_E_IAB_TRAVEL;
  static inline bool IABCategory_E_IsValid(int value) {
    return IABCategory_PB_IABCategory_E_IsValid(value);
  }
  static const IABCategory_E IABCategory_E_MIN =
    IABCategory_PB_IABCategory_E_IABCategory_E_MIN;
  static const IABCategory_E IABCategory_E_MAX =
    IABCategory_PB_IABCategory_E_IABCategory_E_MAX;
  static const int IABCategory_E_ARRAYSIZE =
    IABCategory_PB_IABCategory_E_IABCategory_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IABCategory_E_descriptor() {
    return IABCategory_PB_IABCategory_E_descriptor();
  }
  static inline const ::std::string& IABCategory_E_Name(IABCategory_E value) {
    return IABCategory_PB_IABCategory_E_Name(value);
  }
  static inline bool IABCategory_E_Parse(const ::std::string& name,
      IABCategory_E* value) {
    return IABCategory_PB_IABCategory_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.adsafe.IABCategory_PB.IABCategory_E code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::rubicon::data::adsafe::IABCategory_PB_IABCategory_E code() const;
  inline void set_code(::rubicon::data::adsafe::IABCategory_PB_IABCategory_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.adsafe.IABCategory_PB)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_adsafe_2eproto();
  friend void protobuf_AssignDesc_adsafe_2eproto();
  friend void protobuf_ShutdownFile_adsafe_2eproto();
  
  void InitAsDefaultInstance();
  static IABCategory_PB* default_instance_;
};
// -------------------------------------------------------------------

class IABSubCategory_PB : public ::google::protobuf::Message {
 public:
  IABSubCategory_PB();
  virtual ~IABSubCategory_PB();
  
  IABSubCategory_PB(const IABSubCategory_PB& from);
  
  inline IABSubCategory_PB& operator=(const IABSubCategory_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IABSubCategory_PB& default_instance();
  
  void Swap(IABSubCategory_PB* other);
  
  // implements Message ----------------------------------------------
  
  IABSubCategory_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IABSubCategory_PB& from);
  void MergeFrom(const IABSubCategory_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef IABSubCategory_PB_IABSubCategory_E IABSubCategory_E;
  static const IABSubCategory_E IAB_T2_ACCESSOR = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ACCESSOR;
  static const IABSubCategory_E IAB_T2_ADOPTION = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ADOPTION;
  static const IABSubCategory_E IAB_T2_ADVERTIS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ADVERTIS;
  static const IABSubCategory_E IAB_T2_AGRICULT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_AGRICULT;
  static const IABSubCategory_E IAB_T2_ALCOHOL = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ALCOHOL;
  static const IABSubCategory_E IAB_T2_ALTMED = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ALTMED;
  static const IABSubCategory_E IAB_T2_ARCHITEC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ARCHITEC;
  static const IABSubCategory_E IAB_T2_ART = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ART;
  static const IABSubCategory_E IAB_T2_ASTROLOG = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ASTROLOG;
  static const IABSubCategory_E IAB_T2_ASTRONOM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ASTRONOM;
  static const IABSubCategory_E IAB_T2_BANK = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BANK;
  static const IABSubCategory_E IAB_T2_BASEBALL = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BASEBALL;
  static const IABSubCategory_E IAB_T2_BB = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BB;
  static const IABSubCategory_E IAB_T2_BEVERAGE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BEVERAGE;
  static const IABSubCategory_E IAB_T2_BIOLOGY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BIOLOGY;
  static const IABSubCategory_E IAB_T2_BIOTECH = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BIOTECH;
  static const IABSubCategory_E IAB_T2_BODYBUIL = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BODYBUIL;
  static const IABSubCategory_E IAB_T2_BOOKS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BOOKS;
  static const IABSubCategory_E IAB_T2_BOTANY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BOTANY;
  static const IABSubCategory_E IAB_T2_BOXING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BOXING;
  static const IABSubCategory_E IAB_T2_BSKTBALL = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BSKTBALL;
  static const IABSubCategory_E IAB_T2_BUDDHISM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_BUDDHISM;
  static const IABSubCategory_E IAB_T2_CAMPING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CAMPING;
  static const IABSubCategory_E IAB_T2_CARDGAME = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CARDGAME;
  static const IABSubCategory_E IAB_T2_CARDIOLO = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CARDIOLO;
  static const IABSubCategory_E IAB_T2_CATHOLIC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CATHOLIC;
  static const IABSubCategory_E IAB_T2_CELLPHON = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CELLPHON;
  static const IABSubCategory_E IAB_T2_CHAT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHAT;
  static const IABSubCategory_E IAB_T2_CHEMISTR = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHEMISTR;
  static const IABSubCategory_E IAB_T2_CHESS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHESS;
  static const IABSubCategory_E IAB_T2_CHRISTIA = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CHRISTIA;
  static const IABSubCategory_E IAB_T2_CITIES = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CITIES;
  static const IABSubCategory_E IAB_T2_CLOTHING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CLOTHING;
  static const IABSubCategory_E IAB_T2_COLLECT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_COLLECT;
  static const IABSubCategory_E IAB_T2_COLLEGE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_COLLEGE;
  static const IABSubCategory_E IAB_T2_COMICBK = IABSubCategory_PB_IABSubCategory_E_IAB_T2_COMICBK;
  static const IABSubCategory_E IAB_T2_COMPETIT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_COMPETIT;
  static const IABSubCategory_E IAB_T2_COMPUTER = IABSubCategory_PB_IABSubCategory_E_IAB_T2_COMPUTER;
  static const IABSubCategory_E IAB_T2_CONSTRUC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CONSTRUC;
  static const IABSubCategory_E IAB_T2_CRICKET = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CRICKET;
  static const IABSubCategory_E IAB_T2_CRUISES = IABSubCategory_PB_IABSubCategory_E_IAB_T2_CRUISES;
  static const IABSubCategory_E IAB_T2_DIETING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_DIETING;
  static const IABSubCategory_E IAB_T2_DISEASE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_DISEASE;
  static const IABSubCategory_E IAB_T2_DIVORCE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_DIVORCE;
  static const IABSubCategory_E IAB_T2_DRAWING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_DRAWING;
  static const IABSubCategory_E IAB_T2_DRUGS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_DRUGS;
  static const IABSubCategory_E IAB_T2_ECOLOGY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ECOLOGY;
  static const IABSubCategory_E IAB_T2_ECOMMERC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ECOMMERC;
  static const IABSubCategory_E IAB_T2_ELCTRONI = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ELCTRONI;
  static const IABSubCategory_E IAB_T2_EMAIL = IABSubCategory_PB_IABSubCategory_E_IAB_T2_EMAIL;
  static const IABSubCategory_E IAB_T2_FASHION = IABSubCategory_PB_IABSubCategory_E_IAB_T2_FASHION;
  static const IABSubCategory_E IAB_T2_FISHING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_FISHING;
  static const IABSubCategory_E IAB_T2_FOOTBALL = IABSubCategory_PB_IABSubCategory_E_IAB_T2_FOOTBALL;
  static const IABSubCategory_E IAB_T2_GAMES = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GAMES;
  static const IABSubCategory_E IAB_T2_GARDEN = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GARDEN;
  static const IABSubCategory_E IAB_T2_GASTRONO = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GASTRONO;
  static const IABSubCategory_E IAB_T2_GEOGRAPH = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GEOGRAPH;
  static const IABSubCategory_E IAB_T2_GEOLOGY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GEOLOGY;
  static const IABSubCategory_E IAB_T2_GOLF = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GOLF;
  static const IABSubCategory_E IAB_T2_GOSSIP = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GOSSIP;
  static const IABSubCategory_E IAB_T2_GOV = IABSubCategory_PB_IABSubCategory_E_IAB_T2_GOV;
  static const IABSubCategory_E IAB_T2_HAIRCARE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HAIRCARE;
  static const IABSubCategory_E IAB_T2_HARDWARE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HARDWARE;
  static const IABSubCategory_E IAB_T2_HINDUISM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HINDUISM;
  static const IABSubCategory_E IAB_T2_HMETHEAT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HMETHEAT;
  static const IABSubCategory_E IAB_T2_HOBBY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOBBY;
  static const IABSubCategory_E IAB_T2_HOCKEY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOCKEY;
  static const IABSubCategory_E IAB_T2_HOLIDAYS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOLIDAYS;
  static const IABSubCategory_E IAB_T2_HOMEIMP = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOMEIMP;
  static const IABSubCategory_E IAB_T2_HONEYMOO = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HONEYMOO;
  static const IABSubCategory_E IAB_T2_HORSERAC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HORSERAC;
  static const IABSubCategory_E IAB_T2_HOUSE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HOUSE;
  static const IABSubCategory_E IAB_T2_HUNTING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_HUNTING;
  static const IABSubCategory_E IAB_T2_ICESKATE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ICESKATE;
  static const IABSubCategory_E IAB_T2_IMMIGRAT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_IMMIGRAT;
  static const IABSubCategory_E IAB_T2_INSURANC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_INSURANC;
  static const IABSubCategory_E IAB_T2_INTDEC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_INTDEC;
  static const IABSubCategory_E IAB_T2_INTERNET = IABSubCategory_PB_IABSubCategory_E_IAB_T2_INTERNET;
  static const IABSubCategory_E IAB_T2_ISLAM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ISLAM;
  static const IABSubCategory_E IAB_T2_JEWELRY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_JEWELRY;
  static const IABSubCategory_E IAB_T2_JUDAISM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_JUDAISM;
  static const IABSubCategory_E IAB_T2_KAYAK = IABSubCategory_PB_IABSubCategory_E_IAB_T2_KAYAK;
  static const IABSubCategory_E IAB_T2_LAWJUST = IABSubCategory_PB_IABSubCategory_E_IAB_T2_LAWJUST;
  static const IABSubCategory_E IAB_T2_LOANS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_LOANS;
  static const IABSubCategory_E IAB_T2_LOGISTIC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_LOGISTIC;
  static const IABSubCategory_E IAB_T2_MAGAZINE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MAGAZINE;
  static const IABSubCategory_E IAB_T2_MARKETIN = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MARKETIN;
  static const IABSubCategory_E IAB_T2_MARRIAGE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MARRIAGE;
  static const IABSubCategory_E IAB_T2_MINIVAN = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MINIVAN;
  static const IABSubCategory_E IAB_T2_MOTORCYC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MOTORCYC;
  static const IABSubCategory_E IAB_T2_MOVIE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MOVIE;
  static const IABSubCategory_E IAB_T2_MRTLARTS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MRTLARTS;
  static const IABSubCategory_E IAB_T2_MUSIC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_MUSIC;
  static const IABSubCategory_E IAB_T2_NARESRVS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_NARESRVS;
  static const IABSubCategory_E IAB_T2_NASCAR = IABSubCategory_PB_IABSubCategory_E_IAB_T2_NASCAR;
  static const IABSubCategory_E IAB_T2_NETWORKI = IABSubCategory_PB_IABSubCategory_E_IAB_T2_NETWORKI;
  static const IABSubCategory_E IAB_T2_OLYMPICS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_OLYMPICS;
  static const IABSubCategory_E IAB_T2_PAINTING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PAINTING;
  static const IABSubCategory_E IAB_T2_PEOPLE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PEOPLE;
  static const IABSubCategory_E IAB_T2_PHOTOGRA = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PHOTOGRA;
  static const IABSubCategory_E IAB_T2_PHYSICS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PHYSICS;
  static const IABSubCategory_E IAB_T2_POLITICS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_POLITICS;
  static const IABSubCategory_E IAB_T2_PREGNANC = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PREGNANC;
  static const IABSubCategory_E IAB_T2_PSYCHIAT = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PSYCHIAT;
  static const IABSubCategory_E IAB_T2_PURCHASE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_PURCHASE;
  static const IABSubCategory_E IAB_T2_RADIO = IABSubCategory_PB_IABSubCategory_E_IAB_T2_RADIO;
  static const IABSubCategory_E IAB_T2_REHAB = IABSubCategory_PB_IABSubCategory_E_IAB_T2_REHAB;
  static const IABSubCategory_E IAB_T2_RETIREME = IABSubCategory_PB_IABSubCategory_E_IAB_T2_RETIREME;
  static const IABSubCategory_E IAB_T2_ROCKCLIM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ROCKCLIM;
  static const IABSubCategory_E IAB_T2_SECURITI = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SECURITI;
  static const IABSubCategory_E IAB_T2_SEDAN = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SEDAN;
  static const IABSubCategory_E IAB_T2_SHOWSEVE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SHOWSEVE;
  static const IABSubCategory_E IAB_T2_SOFTWARE = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SOFTWARE;
  static const IABSubCategory_E IAB_T2_SPA = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SPA;
  static const IABSubCategory_E IAB_T2_SPORTNWS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SPORTNWS;
  static const IABSubCategory_E IAB_T2_SPRTSCAR = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SPRTSCAR;
  static const IABSubCategory_E IAB_T2_STAMPS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_STAMPS;
  static const IABSubCategory_E IAB_T2_SUV = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SUV;
  static const IABSubCategory_E IAB_T2_SWIMMING = IABSubCategory_PB_IABSubCategory_E_IAB_T2_SWIMMING;
  static const IABSubCategory_E IAB_T2_TATTOOS = IABSubCategory_PB_IABSubCategory_E_IAB_T2_TATTOOS;
  static const IABSubCategory_E IAB_T2_TOURISM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_TOURISM;
  static const IABSubCategory_E IAB_T2_TRANSPOR = IABSubCategory_PB_IABSubCategory_E_IAB_T2_TRANSPOR;
  static const IABSubCategory_E IAB_T2_TV = IABSubCategory_PB_IABSubCategory_E_IAB_T2_TV;
  static const IABSubCategory_E IAB_T2_UNEMPLOY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_UNEMPLOY;
  static const IABSubCategory_E IAB_T2_VETMED = IABSubCategory_PB_IABSubCategory_E_IAB_T2_VETMED;
  static const IABSubCategory_E IAB_T2_VIDEOGAM = IABSubCategory_PB_IABSubCategory_E_IAB_T2_VIDEOGAM;
  static const IABSubCategory_E IAB_T2_WEATHER = IABSubCategory_PB_IABSubCategory_E_IAB_T2_WEATHER;
  static const IABSubCategory_E IAB_T2_ZOOLOGY = IABSubCategory_PB_IABSubCategory_E_IAB_T2_ZOOLOGY;
  static inline bool IABSubCategory_E_IsValid(int value) {
    return IABSubCategory_PB_IABSubCategory_E_IsValid(value);
  }
  static const IABSubCategory_E IABSubCategory_E_MIN =
    IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_MIN;
  static const IABSubCategory_E IABSubCategory_E_MAX =
    IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_MAX;
  static const int IABSubCategory_E_ARRAYSIZE =
    IABSubCategory_PB_IABSubCategory_E_IABSubCategory_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IABSubCategory_E_descriptor() {
    return IABSubCategory_PB_IABSubCategory_E_descriptor();
  }
  static inline const ::std::string& IABSubCategory_E_Name(IABSubCategory_E value) {
    return IABSubCategory_PB_IABSubCategory_E_Name(value);
  }
  static inline bool IABSubCategory_E_Parse(const ::std::string& name,
      IABSubCategory_E* value) {
    return IABSubCategory_PB_IABSubCategory_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.adsafe.IABSubCategory_PB.IABSubCategory_E code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E code() const;
  inline void set_code(::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.adsafe.IABSubCategory_PB)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_adsafe_2eproto();
  friend void protobuf_AssignDesc_adsafe_2eproto();
  friend void protobuf_ShutdownFile_adsafe_2eproto();
  
  void InitAsDefaultInstance();
  static IABSubCategory_PB* default_instance_;
};
// -------------------------------------------------------------------

class AdSafeResponse_PB : public ::google::protobuf::Message {
 public:
  AdSafeResponse_PB();
  virtual ~AdSafeResponse_PB();
  
  AdSafeResponse_PB(const AdSafeResponse_PB& from);
  
  inline AdSafeResponse_PB& operator=(const AdSafeResponse_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdSafeResponse_PB& default_instance();
  
  void Swap(AdSafeResponse_PB* other);
  
  // implements Message ----------------------------------------------
  
  AdSafeResponse_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdSafeResponse_PB& from);
  void MergeFrom(const AdSafeResponse_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AdSafeResponse_PB_ActionStatus_E ActionStatus_E;
  static const ActionStatus_E PASSED = AdSafeResponse_PB_ActionStatus_E_PASSED;
  static const ActionStatus_E FAILED = AdSafeResponse_PB_ActionStatus_E_FAILED;
  static const ActionStatus_E UNKNOWN = AdSafeResponse_PB_ActionStatus_E_UNKNOWN;
  static const ActionStatus_E IGNORE = AdSafeResponse_PB_ActionStatus_E_IGNORE;
  static inline bool ActionStatus_E_IsValid(int value) {
    return AdSafeResponse_PB_ActionStatus_E_IsValid(value);
  }
  static const ActionStatus_E ActionStatus_E_MIN =
    AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_MIN;
  static const ActionStatus_E ActionStatus_E_MAX =
    AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_MAX;
  static const int ActionStatus_E_ARRAYSIZE =
    AdSafeResponse_PB_ActionStatus_E_ActionStatus_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionStatus_E_descriptor() {
    return AdSafeResponse_PB_ActionStatus_E_descriptor();
  }
  static inline const ::std::string& ActionStatus_E_Name(ActionStatus_E value) {
    return AdSafeResponse_PB_ActionStatus_E_Name(value);
  }
  static inline bool ActionStatus_E_Parse(const ::std::string& name,
      ActionStatus_E* value) {
    return AdSafeResponse_PB_ActionStatus_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.adsafe.AdSafeResponse_PB.ActionStatus_E action = 1 [default = UNKNOWN];
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E action() const;
  inline void set_action(::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E value);
  
  // optional .rubicon.data.adsafe.BSCResponse_PB bsc = 2;
  inline bool has_bsc() const;
  inline void clear_bsc();
  static const int kBscFieldNumber = 2;
  inline const ::rubicon::data::adsafe::BSCResponse_PB& bsc() const;
  inline ::rubicon::data::adsafe::BSCResponse_PB* mutable_bsc();
  inline ::rubicon::data::adsafe::BSCResponse_PB* release_bsc();
  
  // repeated .rubicon.data.adsafe.IABCategory_PB iab_cat = 3;
  inline int iab_cat_size() const;
  inline void clear_iab_cat();
  static const int kIabCatFieldNumber = 3;
  inline const ::rubicon::data::adsafe::IABCategory_PB& iab_cat(int index) const;
  inline ::rubicon::data::adsafe::IABCategory_PB* mutable_iab_cat(int index);
  inline ::rubicon::data::adsafe::IABCategory_PB* add_iab_cat();
  inline const ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABCategory_PB >&
      iab_cat() const;
  inline ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABCategory_PB >*
      mutable_iab_cat();
  
  // repeated .rubicon.data.adsafe.IABSubCategory_PB iab_subcat = 4;
  inline int iab_subcat_size() const;
  inline void clear_iab_subcat();
  static const int kIabSubcatFieldNumber = 4;
  inline const ::rubicon::data::adsafe::IABSubCategory_PB& iab_subcat(int index) const;
  inline ::rubicon::data::adsafe::IABSubCategory_PB* mutable_iab_subcat(int index);
  inline ::rubicon::data::adsafe::IABSubCategory_PB* add_iab_subcat();
  inline const ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABSubCategory_PB >&
      iab_subcat() const;
  inline ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABSubCategory_PB >*
      mutable_iab_subcat();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.adsafe.AdSafeResponse_PB)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_bsc();
  inline void clear_has_bsc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::adsafe::BSCResponse_PB* bsc_;
  ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABCategory_PB > iab_cat_;
  ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABSubCategory_PB > iab_subcat_;
  int action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_adsafe_2eproto();
  friend void protobuf_AssignDesc_adsafe_2eproto();
  friend void protobuf_ShutdownFile_adsafe_2eproto();
  
  void InitAsDefaultInstance();
  static AdSafeResponse_PB* default_instance_;
};
// ===================================================================


// ===================================================================

// BSCResponse_PB

// optional uint64 adult = 2;
inline bool BSCResponse_PB::has_adult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BSCResponse_PB::set_has_adult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BSCResponse_PB::clear_has_adult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BSCResponse_PB::clear_adult() {
  adult_ = GOOGLE_ULONGLONG(0);
  clear_has_adult();
}
inline ::google::protobuf::uint64 BSCResponse_PB::adult() const {
  return adult_;
}
inline void BSCResponse_PB::set_adult(::google::protobuf::uint64 value) {
  set_has_adult();
  adult_ = value;
}

// optional uint64 alcohol = 3;
inline bool BSCResponse_PB::has_alcohol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BSCResponse_PB::set_has_alcohol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BSCResponse_PB::clear_has_alcohol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BSCResponse_PB::clear_alcohol() {
  alcohol_ = GOOGLE_ULONGLONG(0);
  clear_has_alcohol();
}
inline ::google::protobuf::uint64 BSCResponse_PB::alcohol() const {
  return alcohol_;
}
inline void BSCResponse_PB::set_alcohol(::google::protobuf::uint64 value) {
  set_has_alcohol();
  alcohol_ = value;
}

// optional uint64 illegal_downloads = 4;
inline bool BSCResponse_PB::has_illegal_downloads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BSCResponse_PB::set_has_illegal_downloads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BSCResponse_PB::clear_has_illegal_downloads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BSCResponse_PB::clear_illegal_downloads() {
  illegal_downloads_ = GOOGLE_ULONGLONG(0);
  clear_has_illegal_downloads();
}
inline ::google::protobuf::uint64 BSCResponse_PB::illegal_downloads() const {
  return illegal_downloads_;
}
inline void BSCResponse_PB::set_illegal_downloads(::google::protobuf::uint64 value) {
  set_has_illegal_downloads();
  illegal_downloads_ = value;
}

// optional uint64 illegal_drugs = 5;
inline bool BSCResponse_PB::has_illegal_drugs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BSCResponse_PB::set_has_illegal_drugs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BSCResponse_PB::clear_has_illegal_drugs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BSCResponse_PB::clear_illegal_drugs() {
  illegal_drugs_ = GOOGLE_ULONGLONG(0);
  clear_has_illegal_drugs();
}
inline ::google::protobuf::uint64 BSCResponse_PB::illegal_drugs() const {
  return illegal_drugs_;
}
inline void BSCResponse_PB::set_illegal_drugs(::google::protobuf::uint64 value) {
  set_has_illegal_drugs();
  illegal_drugs_ = value;
}

// optional uint64 hate = 6;
inline bool BSCResponse_PB::has_hate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BSCResponse_PB::set_has_hate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BSCResponse_PB::clear_has_hate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BSCResponse_PB::clear_hate() {
  hate_ = GOOGLE_ULONGLONG(0);
  clear_has_hate();
}
inline ::google::protobuf::uint64 BSCResponse_PB::hate() const {
  return hate_;
}
inline void BSCResponse_PB::set_hate(::google::protobuf::uint64 value) {
  set_has_hate();
  hate_ = value;
}

// optional uint64 offensive_language = 7;
inline bool BSCResponse_PB::has_offensive_language() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BSCResponse_PB::set_has_offensive_language() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BSCResponse_PB::clear_has_offensive_language() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BSCResponse_PB::clear_offensive_language() {
  offensive_language_ = GOOGLE_ULONGLONG(0);
  clear_has_offensive_language();
}
inline ::google::protobuf::uint64 BSCResponse_PB::offensive_language() const {
  return offensive_language_;
}
inline void BSCResponse_PB::set_offensive_language(::google::protobuf::uint64 value) {
  set_has_offensive_language();
  offensive_language_ = value;
}

// -------------------------------------------------------------------

// IABCategory_PB

// optional .rubicon.data.adsafe.IABCategory_PB.IABCategory_E code = 1;
inline bool IABCategory_PB::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IABCategory_PB::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IABCategory_PB::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IABCategory_PB::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::rubicon::data::adsafe::IABCategory_PB_IABCategory_E IABCategory_PB::code() const {
  return static_cast< ::rubicon::data::adsafe::IABCategory_PB_IABCategory_E >(code_);
}
inline void IABCategory_PB::set_code(::rubicon::data::adsafe::IABCategory_PB_IABCategory_E value) {
  GOOGLE_DCHECK(::rubicon::data::adsafe::IABCategory_PB_IABCategory_E_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string raw_value = 2;
inline bool IABCategory_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IABCategory_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IABCategory_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IABCategory_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& IABCategory_PB::raw_value() const {
  return *raw_value_;
}
inline void IABCategory_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void IABCategory_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void IABCategory_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IABCategory_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* IABCategory_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IABSubCategory_PB

// optional .rubicon.data.adsafe.IABSubCategory_PB.IABSubCategory_E code = 1;
inline bool IABSubCategory_PB::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IABSubCategory_PB::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IABSubCategory_PB::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IABSubCategory_PB::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E IABSubCategory_PB::code() const {
  return static_cast< ::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E >(code_);
}
inline void IABSubCategory_PB::set_code(::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E value) {
  GOOGLE_DCHECK(::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string raw_value = 2;
inline bool IABSubCategory_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IABSubCategory_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IABSubCategory_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IABSubCategory_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& IABSubCategory_PB::raw_value() const {
  return *raw_value_;
}
inline void IABSubCategory_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void IABSubCategory_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void IABSubCategory_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IABSubCategory_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* IABSubCategory_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AdSafeResponse_PB

// optional .rubicon.data.adsafe.AdSafeResponse_PB.ActionStatus_E action = 1 [default = UNKNOWN];
inline bool AdSafeResponse_PB::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdSafeResponse_PB::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdSafeResponse_PB::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdSafeResponse_PB::clear_action() {
  action_ = 3;
  clear_has_action();
}
inline ::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E AdSafeResponse_PB::action() const {
  return static_cast< ::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E >(action_);
}
inline void AdSafeResponse_PB::set_action(::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E value) {
  GOOGLE_DCHECK(::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional .rubicon.data.adsafe.BSCResponse_PB bsc = 2;
inline bool AdSafeResponse_PB::has_bsc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdSafeResponse_PB::set_has_bsc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdSafeResponse_PB::clear_has_bsc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdSafeResponse_PB::clear_bsc() {
  if (bsc_ != NULL) bsc_->::rubicon::data::adsafe::BSCResponse_PB::Clear();
  clear_has_bsc();
}
inline const ::rubicon::data::adsafe::BSCResponse_PB& AdSafeResponse_PB::bsc() const {
  return bsc_ != NULL ? *bsc_ : *default_instance_->bsc_;
}
inline ::rubicon::data::adsafe::BSCResponse_PB* AdSafeResponse_PB::mutable_bsc() {
  set_has_bsc();
  if (bsc_ == NULL) bsc_ = new ::rubicon::data::adsafe::BSCResponse_PB;
  return bsc_;
}
inline ::rubicon::data::adsafe::BSCResponse_PB* AdSafeResponse_PB::release_bsc() {
  clear_has_bsc();
  ::rubicon::data::adsafe::BSCResponse_PB* temp = bsc_;
  bsc_ = NULL;
  return temp;
}

// repeated .rubicon.data.adsafe.IABCategory_PB iab_cat = 3;
inline int AdSafeResponse_PB::iab_cat_size() const {
  return iab_cat_.size();
}
inline void AdSafeResponse_PB::clear_iab_cat() {
  iab_cat_.Clear();
}
inline const ::rubicon::data::adsafe::IABCategory_PB& AdSafeResponse_PB::iab_cat(int index) const {
  return iab_cat_.Get(index);
}
inline ::rubicon::data::adsafe::IABCategory_PB* AdSafeResponse_PB::mutable_iab_cat(int index) {
  return iab_cat_.Mutable(index);
}
inline ::rubicon::data::adsafe::IABCategory_PB* AdSafeResponse_PB::add_iab_cat() {
  return iab_cat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABCategory_PB >&
AdSafeResponse_PB::iab_cat() const {
  return iab_cat_;
}
inline ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABCategory_PB >*
AdSafeResponse_PB::mutable_iab_cat() {
  return &iab_cat_;
}

// repeated .rubicon.data.adsafe.IABSubCategory_PB iab_subcat = 4;
inline int AdSafeResponse_PB::iab_subcat_size() const {
  return iab_subcat_.size();
}
inline void AdSafeResponse_PB::clear_iab_subcat() {
  iab_subcat_.Clear();
}
inline const ::rubicon::data::adsafe::IABSubCategory_PB& AdSafeResponse_PB::iab_subcat(int index) const {
  return iab_subcat_.Get(index);
}
inline ::rubicon::data::adsafe::IABSubCategory_PB* AdSafeResponse_PB::mutable_iab_subcat(int index) {
  return iab_subcat_.Mutable(index);
}
inline ::rubicon::data::adsafe::IABSubCategory_PB* AdSafeResponse_PB::add_iab_subcat() {
  return iab_subcat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABSubCategory_PB >&
AdSafeResponse_PB::iab_subcat() const {
  return iab_subcat_;
}
inline ::google::protobuf::RepeatedPtrField< ::rubicon::data::adsafe::IABSubCategory_PB >*
AdSafeResponse_PB::mutable_iab_subcat() {
  return &iab_subcat_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace adsafe
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::adsafe::IABCategory_PB_IABCategory_E>() {
  return ::rubicon::data::adsafe::IABCategory_PB_IABCategory_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E>() {
  return ::rubicon::data::adsafe::IABSubCategory_PB_IABSubCategory_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E>() {
  return ::rubicon::data::adsafe::AdSafeResponse_PB_ActionStatus_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_adsafe_2eproto__INCLUDED
