// 
// Copyright (C) 2009 Fox Interactive Media
// 

//
// Protocol Buffer definition for "EventBus" library.
//

package fim.eventbus;
option java_outer_classname = "EventBusMessageProto";
option optimize_for = SPEED;

message EndPoint {
    optional fixed32 addr = 2; // IP address or multicast channel
    optional uint32  port = 3; // port
}

message EventBusMessage {
    // ID 1 is reserved in case we ever want to add 
    // self-describing attribute.

    required bytes    event = 2;    // original message, usually the byte
                                    // representation of another protocol
                                    // buffer data
    optional fixed64  sequence = 3; // sequence number that an eventbus sender
                                    // object adds to the original message
                                    // before sending the message
    optional uint32   pid = 4;      // pid of the process sending the message
    optional uint32   id = 5 [default = 0];  // unique ID per sender
    optional EndPoint sender = 6;   // address/port of the sender of the
                                    // message
    optional bool     is_valid = 7 [default = true]; // if the event is valid
    optional fixed64  emit_time_millis = 8 [default = 0]; // time of emission
}


message SenderInfo_PB {
    required uint32 pid = 1;         // The process ID of server emitting
                                     // messages
    required uint32 session_id = 2;  // The session ID of the sender
}

message HostInfo_PB {
    required fixed32 ip = 1;           // Host IP address
    repeated SenderInfo_PB sender = 2; // All senders running on the host
}

enum Role_E {
    PROD = 1;
    DEV = 2;
    QA = 3;
    STAGING = 4;
    RESEARCH = 5;
}

enum ListenerType_E {
    JOURNALLER = 1;
    STORM = 2;
    AD_HOC_LISTENER = 3;
    OTHER = 4;
    
}


// Feedback message sent from journallers to the serving systesm
message EventBusFeedback_PB {
    required EndPoint       multicast_channel = 1;
    required uint32         ip_addr = 2;
    required uint32         partition_count = 3;
    required uint32         partition_index = 4;
    optional Role_E         role = 5;
    optional ListenerType_E type = 6;
    repeated HostInfo_PB    host = 7;
}
