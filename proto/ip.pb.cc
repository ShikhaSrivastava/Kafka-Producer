// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace common {

namespace {

const ::google::protobuf::Descriptor* IPAddress_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPAddress_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IPAddress_PB_IPAddressType_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ip_2eproto() {
  protobuf_AddDesc_ip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ip.proto");
  GOOGLE_CHECK(file != NULL);
  IPAddress_PB_descriptor_ = file->message_type(0);
  static const int IPAddress_PB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAddress_PB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAddress_PB, ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAddress_PB, ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAddress_PB, masked_),
  };
  IPAddress_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IPAddress_PB_descriptor_,
      IPAddress_PB::default_instance_,
      IPAddress_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAddress_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPAddress_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IPAddress_PB));
  IPAddress_PB_IPAddressType_E_descriptor_ = IPAddress_PB_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IPAddress_PB_descriptor_, &IPAddress_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ip_2eproto() {
  delete IPAddress_PB::default_instance_;
  delete IPAddress_PB_reflection_;
}

void protobuf_AddDesc_ip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ip.proto\022\023rubicon.data.common\"\257\001\n\014IPAd"
    "dress_PB\022E\n\004type\030\001 \001(\01621.rubicon.data.co"
    "mmon.IPAddress_PB.IPAddressType_E:\004IPV4\022"
    "\014\n\004ipv4\030\002 \001(\007\022\014\n\004ipv6\030\003 \001(\014\022\025\n\006masked\030\004 "
    "\001(\010:\005false\"%\n\017IPAddressType_E\022\010\n\004IPV4\020\000\022"
    "\010\n\004IPV6\020\001B\002H\001", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ip.proto", &protobuf_RegisterTypes);
  IPAddress_PB::default_instance_ = new IPAddress_PB();
  IPAddress_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ip_2eproto {
  StaticDescriptorInitializer_ip_2eproto() {
    protobuf_AddDesc_ip_2eproto();
  }
} static_descriptor_initializer_ip_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* IPAddress_PB_IPAddressType_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAddress_PB_IPAddressType_E_descriptor_;
}
bool IPAddress_PB_IPAddressType_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IPAddress_PB_IPAddressType_E IPAddress_PB::IPV4;
const IPAddress_PB_IPAddressType_E IPAddress_PB::IPV6;
const IPAddress_PB_IPAddressType_E IPAddress_PB::IPAddressType_E_MIN;
const IPAddress_PB_IPAddressType_E IPAddress_PB::IPAddressType_E_MAX;
const int IPAddress_PB::IPAddressType_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IPAddress_PB::kTypeFieldNumber;
const int IPAddress_PB::kIpv4FieldNumber;
const int IPAddress_PB::kIpv6FieldNumber;
const int IPAddress_PB::kMaskedFieldNumber;
#endif  // !_MSC_VER

IPAddress_PB::IPAddress_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IPAddress_PB::InitAsDefaultInstance() {
}

IPAddress_PB::IPAddress_PB(const IPAddress_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IPAddress_PB::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ipv4_ = 0u;
  ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  masked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IPAddress_PB::~IPAddress_PB() {
  SharedDtor();
}

void IPAddress_PB::SharedDtor() {
  if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
    delete ipv6_;
  }
  if (this != default_instance_) {
  }
}

void IPAddress_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPAddress_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAddress_PB_descriptor_;
}

const IPAddress_PB& IPAddress_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ip_2eproto();  return *default_instance_;
}

IPAddress_PB* IPAddress_PB::default_instance_ = NULL;

IPAddress_PB* IPAddress_PB::New() const {
  return new IPAddress_PB;
}

void IPAddress_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ipv4_ = 0u;
    if (has_ipv6()) {
      if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
        ipv6_->clear();
      }
    }
    masked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IPAddress_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.common.IPAddress_PB.IPAddressType_E type = 1 [default = IPV4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::common::IPAddress_PB_IPAddressType_E_IsValid(value)) {
            set_type(static_cast< ::rubicon::data::common::IPAddress_PB_IPAddressType_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ipv4;
        break;
      }
      
      // optional fixed32 ipv4 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ipv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ipv4_)));
          set_has_ipv4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ipv6;
        break;
      }
      
      // optional bytes ipv6 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_masked;
        break;
      }
      
      // optional bool masked = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masked_)));
          set_has_masked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IPAddress_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.common.IPAddress_PB.IPAddressType_E type = 1 [default = IPV4];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional fixed32 ipv4 = 2;
  if (has_ipv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ipv4(), output);
  }
  
  // optional bytes ipv6 = 3;
  if (has_ipv6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ipv6(), output);
  }
  
  // optional bool masked = 4 [default = false];
  if (has_masked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->masked(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IPAddress_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.common.IPAddress_PB.IPAddressType_E type = 1 [default = IPV4];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional fixed32 ipv4 = 2;
  if (has_ipv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ipv4(), target);
  }
  
  // optional bytes ipv6 = 3;
  if (has_ipv6()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ipv6(), target);
  }
  
  // optional bool masked = 4 [default = false];
  if (has_masked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->masked(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IPAddress_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.common.IPAddress_PB.IPAddressType_E type = 1 [default = IPV4];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional fixed32 ipv4 = 2;
    if (has_ipv4()) {
      total_size += 1 + 4;
    }
    
    // optional bytes ipv6 = 3;
    if (has_ipv6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipv6());
    }
    
    // optional bool masked = 4 [default = false];
    if (has_masked()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPAddress_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IPAddress_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IPAddress_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IPAddress_PB::MergeFrom(const IPAddress_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ipv4()) {
      set_ipv4(from.ipv4());
    }
    if (from.has_ipv6()) {
      set_ipv6(from.ipv6());
    }
    if (from.has_masked()) {
      set_masked(from.masked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IPAddress_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAddress_PB::CopyFrom(const IPAddress_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddress_PB::IsInitialized() const {
  
  return true;
}

void IPAddress_PB::Swap(IPAddress_PB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ipv4_, other->ipv4_);
    std::swap(ipv6_, other->ipv6_);
    std::swap(masked_, other->masked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IPAddress_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPAddress_PB_descriptor_;
  metadata.reflection = IPAddress_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
