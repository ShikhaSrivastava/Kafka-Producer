// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "num_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace common {

namespace {

const ::google::protobuf::Descriptor* AnInt32_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnInt32_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnUInt32_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnUInt32_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnInt64_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnInt64_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnUInt64_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnUInt64_PB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_num_5ftypes_2eproto() {
  protobuf_AddDesc_num_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "num_types.proto");
  GOOGLE_CHECK(file != NULL);
  AnInt32_PB_descriptor_ = file->message_type(0);
  static const int AnInt32_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt32_PB, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt32_PB, raw_value_),
  };
  AnInt32_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnInt32_PB_descriptor_,
      AnInt32_PB::default_instance_,
      AnInt32_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt32_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt32_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnInt32_PB));
  AnUInt32_PB_descriptor_ = file->message_type(1);
  static const int AnUInt32_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt32_PB, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt32_PB, raw_value_),
  };
  AnUInt32_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnUInt32_PB_descriptor_,
      AnUInt32_PB::default_instance_,
      AnUInt32_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt32_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt32_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnUInt32_PB));
  AnInt64_PB_descriptor_ = file->message_type(2);
  static const int AnInt64_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt64_PB, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt64_PB, raw_value_),
  };
  AnInt64_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnInt64_PB_descriptor_,
      AnInt64_PB::default_instance_,
      AnInt64_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt64_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnInt64_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnInt64_PB));
  AnUInt64_PB_descriptor_ = file->message_type(3);
  static const int AnUInt64_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt64_PB, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt64_PB, raw_value_),
  };
  AnUInt64_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnUInt64_PB_descriptor_,
      AnUInt64_PB::default_instance_,
      AnUInt64_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt64_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnUInt64_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnUInt64_PB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_num_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnInt32_PB_descriptor_, &AnInt32_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnUInt32_PB_descriptor_, &AnUInt32_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnInt64_PB_descriptor_, &AnInt64_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnUInt64_PB_descriptor_, &AnUInt64_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_num_5ftypes_2eproto() {
  delete AnInt32_PB::default_instance_;
  delete AnInt32_PB_reflection_;
  delete AnUInt32_PB::default_instance_;
  delete AnUInt32_PB_reflection_;
  delete AnInt64_PB::default_instance_;
  delete AnInt64_PB_reflection_;
  delete AnUInt64_PB::default_instance_;
  delete AnUInt64_PB_reflection_;
}

void protobuf_AddDesc_num_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017num_types.proto\022\023rubicon.data.common\"."
    "\n\nAnInt32_PB\022\r\n\005value\030\001 \001(\005\022\021\n\traw_value"
    "\030\002 \001(\t\"/\n\013AnUInt32_PB\022\r\n\005value\030\001 \001(\r\022\021\n\t"
    "raw_value\030\002 \001(\t\".\n\nAnInt64_PB\022\r\n\005value\030\001"
    " \001(\003\022\021\n\traw_value\030\002 \001(\t\"/\n\013AnUInt64_PB\022\r"
    "\n\005value\030\001 \001(\004\022\021\n\traw_value\030\002 \001(\tB\002H\001", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "num_types.proto", &protobuf_RegisterTypes);
  AnInt32_PB::default_instance_ = new AnInt32_PB();
  AnUInt32_PB::default_instance_ = new AnUInt32_PB();
  AnInt64_PB::default_instance_ = new AnInt64_PB();
  AnUInt64_PB::default_instance_ = new AnUInt64_PB();
  AnInt32_PB::default_instance_->InitAsDefaultInstance();
  AnUInt32_PB::default_instance_->InitAsDefaultInstance();
  AnInt64_PB::default_instance_->InitAsDefaultInstance();
  AnUInt64_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_num_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_num_5ftypes_2eproto {
  StaticDescriptorInitializer_num_5ftypes_2eproto() {
    protobuf_AddDesc_num_5ftypes_2eproto();
  }
} static_descriptor_initializer_num_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AnInt32_PB::kValueFieldNumber;
const int AnInt32_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

AnInt32_PB::AnInt32_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnInt32_PB::InitAsDefaultInstance() {
}

AnInt32_PB::AnInt32_PB(const AnInt32_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnInt32_PB::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnInt32_PB::~AnInt32_PB() {
  SharedDtor();
}

void AnInt32_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void AnInt32_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnInt32_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnInt32_PB_descriptor_;
}

const AnInt32_PB& AnInt32_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_num_5ftypes_2eproto();  return *default_instance_;
}

AnInt32_PB* AnInt32_PB::default_instance_ = NULL;

AnInt32_PB* AnInt32_PB::New() const {
  return new AnInt32_PB;
}

void AnInt32_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnInt32_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnInt32_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnInt32_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnInt32_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnInt32_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnInt32_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnInt32_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnInt32_PB::MergeFrom(const AnInt32_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnInt32_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnInt32_PB::CopyFrom(const AnInt32_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnInt32_PB::IsInitialized() const {
  
  return true;
}

void AnInt32_PB::Swap(AnInt32_PB* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnInt32_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnInt32_PB_descriptor_;
  metadata.reflection = AnInt32_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnUInt32_PB::kValueFieldNumber;
const int AnUInt32_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

AnUInt32_PB::AnUInt32_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnUInt32_PB::InitAsDefaultInstance() {
}

AnUInt32_PB::AnUInt32_PB(const AnUInt32_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnUInt32_PB::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnUInt32_PB::~AnUInt32_PB() {
  SharedDtor();
}

void AnUInt32_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void AnUInt32_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnUInt32_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnUInt32_PB_descriptor_;
}

const AnUInt32_PB& AnUInt32_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_num_5ftypes_2eproto();  return *default_instance_;
}

AnUInt32_PB* AnUInt32_PB::default_instance_ = NULL;

AnUInt32_PB* AnUInt32_PB::New() const {
  return new AnUInt32_PB;
}

void AnUInt32_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnUInt32_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnUInt32_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnUInt32_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnUInt32_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnUInt32_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnUInt32_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnUInt32_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnUInt32_PB::MergeFrom(const AnUInt32_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnUInt32_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnUInt32_PB::CopyFrom(const AnUInt32_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnUInt32_PB::IsInitialized() const {
  
  return true;
}

void AnUInt32_PB::Swap(AnUInt32_PB* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnUInt32_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnUInt32_PB_descriptor_;
  metadata.reflection = AnUInt32_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnInt64_PB::kValueFieldNumber;
const int AnInt64_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

AnInt64_PB::AnInt64_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnInt64_PB::InitAsDefaultInstance() {
}

AnInt64_PB::AnInt64_PB(const AnInt64_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnInt64_PB::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnInt64_PB::~AnInt64_PB() {
  SharedDtor();
}

void AnInt64_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void AnInt64_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnInt64_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnInt64_PB_descriptor_;
}

const AnInt64_PB& AnInt64_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_num_5ftypes_2eproto();  return *default_instance_;
}

AnInt64_PB* AnInt64_PB::default_instance_ = NULL;

AnInt64_PB* AnInt64_PB::New() const {
  return new AnInt64_PB;
}

void AnInt64_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnInt64_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnInt64_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnInt64_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnInt64_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnInt64_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnInt64_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnInt64_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnInt64_PB::MergeFrom(const AnInt64_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnInt64_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnInt64_PB::CopyFrom(const AnInt64_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnInt64_PB::IsInitialized() const {
  
  return true;
}

void AnInt64_PB::Swap(AnInt64_PB* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnInt64_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnInt64_PB_descriptor_;
  metadata.reflection = AnInt64_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnUInt64_PB::kValueFieldNumber;
const int AnUInt64_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

AnUInt64_PB::AnUInt64_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnUInt64_PB::InitAsDefaultInstance() {
}

AnUInt64_PB::AnUInt64_PB(const AnUInt64_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnUInt64_PB::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnUInt64_PB::~AnUInt64_PB() {
  SharedDtor();
}

void AnUInt64_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void AnUInt64_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnUInt64_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnUInt64_PB_descriptor_;
}

const AnUInt64_PB& AnUInt64_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_num_5ftypes_2eproto();  return *default_instance_;
}

AnUInt64_PB* AnUInt64_PB::default_instance_ = NULL;

AnUInt64_PB* AnUInt64_PB::New() const {
  return new AnUInt64_PB;
}

void AnUInt64_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_ULONGLONG(0);
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnUInt64_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnUInt64_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnUInt64_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnUInt64_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnUInt64_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnUInt64_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnUInt64_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnUInt64_PB::MergeFrom(const AnUInt64_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnUInt64_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnUInt64_PB::CopyFrom(const AnUInt64_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnUInt64_PB::IsInitialized() const {
  
  return true;
}

void AnUInt64_PB::Swap(AnUInt64_PB* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnUInt64_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnUInt64_PB_descriptor_;
  metadata.reflection = AnUInt64_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
