// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef PROTOBUF_types_2eproto__INCLUDED
#define PROTOBUF_types_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_types_2eproto();
void protobuf_AssignDesc_types_2eproto();
void protobuf_ShutdownFile_types_2eproto();


enum MimeType_E {
  UNKNOWN_MIME = 0,
  JS_MIME = 1,
  HTML_MIME = 2,
  IMAGE_MIME = 3,
  REDIRECT_MIME = 4,
  PSA_MIME = 5
};
bool MimeType_E_IsValid(int value);
const MimeType_E MimeType_E_MIN = UNKNOWN_MIME;
const MimeType_E MimeType_E_MAX = PSA_MIME;
const int MimeType_E_ARRAYSIZE = MimeType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* MimeType_E_descriptor();
inline const ::std::string& MimeType_E_Name(MimeType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    MimeType_E_descriptor(), value);
}
inline bool MimeType_E_Parse(
    const ::std::string& name, MimeType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MimeType_E>(
    MimeType_E_descriptor(), name, value);
}
enum AdClassType_E {
  UNKNOWN_AD_CLASS = 0,
  PARTNER_AD_CLASS = 1,
  DIRECT_AD_CLASS = 2,
  RTB_AD_CLASS = 3,
  STATIC_BID_AD_CLASS = 4,
  PSA_AD_CLASS = 5,
  HOUSE_AD_CLASS = 6
};
bool AdClassType_E_IsValid(int value);
const AdClassType_E AdClassType_E_MIN = UNKNOWN_AD_CLASS;
const AdClassType_E AdClassType_E_MAX = HOUSE_AD_CLASS;
const int AdClassType_E_ARRAYSIZE = AdClassType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdClassType_E_descriptor();
inline const ::std::string& AdClassType_E_Name(AdClassType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdClassType_E_descriptor(), value);
}
inline bool AdClassType_E_Parse(
    const ::std::string& name, AdClassType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdClassType_E>(
    AdClassType_E_descriptor(), name, value);
}
enum PMPClassType_E {
  UNSPECIFIED_PMP_CLASS = 0,
  STANDARD_PMP_CLASS = 1,
  OVERRIDE_PMP_CLASS = 2,
  PRIORITY_PMP_CLASS = 3,
  PRIVATE_PMP_CLASS = 4
};
bool PMPClassType_E_IsValid(int value);
const PMPClassType_E PMPClassType_E_MIN = UNSPECIFIED_PMP_CLASS;
const PMPClassType_E PMPClassType_E_MAX = PRIVATE_PMP_CLASS;
const int PMPClassType_E_ARRAYSIZE = PMPClassType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PMPClassType_E_descriptor();
inline const ::std::string& PMPClassType_E_Name(PMPClassType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PMPClassType_E_descriptor(), value);
}
inline bool PMPClassType_E_Parse(
    const ::std::string& name, PMPClassType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PMPClassType_E>(
    PMPClassType_E_descriptor(), name, value);
}
enum PrivateTierType_E {
  UNKNOWN_TIER = 0,
  STANDARD_TIER = 1,
  FLOOR_OVERRIDE_TIER = 2,
  PRIORITY_FIRST_RIGHT_TIER = 3,
  PRIVATE_TIER = 4
};
bool PrivateTierType_E_IsValid(int value);
const PrivateTierType_E PrivateTierType_E_MIN = UNKNOWN_TIER;
const PrivateTierType_E PrivateTierType_E_MAX = PRIVATE_TIER;
const int PrivateTierType_E_ARRAYSIZE = PrivateTierType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrivateTierType_E_descriptor();
inline const ::std::string& PrivateTierType_E_Name(PrivateTierType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrivateTierType_E_descriptor(), value);
}
inline bool PrivateTierType_E_Parse(
    const ::std::string& name, PrivateTierType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrivateTierType_E>(
    PrivateTierType_E_descriptor(), name, value);
}
enum BERequestResponseType_E {
  JSON_BE_TYPE = 0,
  PROTOBUF_BE_TYPE = 1
};
bool BERequestResponseType_E_IsValid(int value);
const BERequestResponseType_E BERequestResponseType_E_MIN = JSON_BE_TYPE;
const BERequestResponseType_E BERequestResponseType_E_MAX = PROTOBUF_BE_TYPE;
const int BERequestResponseType_E_ARRAYSIZE = BERequestResponseType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* BERequestResponseType_E_descriptor();
inline const ::std::string& BERequestResponseType_E_Name(BERequestResponseType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    BERequestResponseType_E_descriptor(), value);
}
inline bool BERequestResponseType_E_Parse(
    const ::std::string& name, BERequestResponseType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BERequestResponseType_E>(
    BERequestResponseType_E_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::common::MimeType_E>() {
  return rubicon::data::common::MimeType_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::common::AdClassType_E>() {
  return rubicon::data::common::AdClassType_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::common::PMPClassType_E>() {
  return rubicon::data::common::PMPClassType_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::common::PrivateTierType_E>() {
  return rubicon::data::common::PrivateTierType_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< rubicon::data::common::BERequestResponseType_E>() {
  return rubicon::data::common::BERequestResponseType_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_types_2eproto__INCLUDED
