// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo.proto

#ifndef PROTOBUF_geo_2eproto__INCLUDED
#define PROTOBUF_geo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "num_types.pb.h"
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace geo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_geo_2eproto();
void protobuf_AssignDesc_geo_2eproto();
void protobuf_ShutdownFile_geo_2eproto();

class Continent_PB;
class Country_PB;
class Region_PB;
class Speed_PB;
class Geo_PB;

enum Continent_PB_ContinentCode_E {
  Continent_PB_ContinentCode_E_UNKNOWN = 0,
  Continent_PB_ContinentCode_E_AFRICA = 1,
  Continent_PB_ContinentCode_E_ANTARCTICA = 2,
  Continent_PB_ContinentCode_E_ASIA = 3,
  Continent_PB_ContinentCode_E_AUSTRALIA = 4,
  Continent_PB_ContinentCode_E_EUROPE = 5,
  Continent_PB_ContinentCode_E_NORTH_AMERICA = 6,
  Continent_PB_ContinentCode_E_SOUTH_AMERICA = 7
};
bool Continent_PB_ContinentCode_E_IsValid(int value);
const Continent_PB_ContinentCode_E Continent_PB_ContinentCode_E_ContinentCode_E_MIN = Continent_PB_ContinentCode_E_UNKNOWN;
const Continent_PB_ContinentCode_E Continent_PB_ContinentCode_E_ContinentCode_E_MAX = Continent_PB_ContinentCode_E_SOUTH_AMERICA;
const int Continent_PB_ContinentCode_E_ContinentCode_E_ARRAYSIZE = Continent_PB_ContinentCode_E_ContinentCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* Continent_PB_ContinentCode_E_descriptor();
inline const ::std::string& Continent_PB_ContinentCode_E_Name(Continent_PB_ContinentCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    Continent_PB_ContinentCode_E_descriptor(), value);
}
inline bool Continent_PB_ContinentCode_E_Parse(
    const ::std::string& name, Continent_PB_ContinentCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Continent_PB_ContinentCode_E>(
    Continent_PB_ContinentCode_E_descriptor(), name, value);
}
enum Country_PB_CountryCode_E {
  Country_PB_CountryCode_E_UNKNOWN = 0,
  Country_PB_CountryCode_E_AD = 1,
  Country_PB_CountryCode_E_AE = 2,
  Country_PB_CountryCode_E_AF = 3,
  Country_PB_CountryCode_E_AG = 4,
  Country_PB_CountryCode_E_AI = 5,
  Country_PB_CountryCode_E_AL = 6,
  Country_PB_CountryCode_E_AM = 7,
  Country_PB_CountryCode_E_AN = 8,
  Country_PB_CountryCode_E_AO = 9,
  Country_PB_CountryCode_E_AP = 10,
  Country_PB_CountryCode_E_AQ = 11,
  Country_PB_CountryCode_E_AR = 12,
  Country_PB_CountryCode_E_AS = 13,
  Country_PB_CountryCode_E_AT = 14,
  Country_PB_CountryCode_E_AU = 15,
  Country_PB_CountryCode_E_AW = 16,
  Country_PB_CountryCode_E_AZ = 17,
  Country_PB_CountryCode_E_BA = 18,
  Country_PB_CountryCode_E_BB = 19,
  Country_PB_CountryCode_E_BD = 20,
  Country_PB_CountryCode_E_BE = 21,
  Country_PB_CountryCode_E_BF = 22,
  Country_PB_CountryCode_E_BG = 23,
  Country_PB_CountryCode_E_BH = 24,
  Country_PB_CountryCode_E_BI = 25,
  Country_PB_CountryCode_E_BJ = 26,
  Country_PB_CountryCode_E_BM = 27,
  Country_PB_CountryCode_E_BN = 28,
  Country_PB_CountryCode_E_BO = 29,
  Country_PB_CountryCode_E_BR = 30,
  Country_PB_CountryCode_E_BS = 31,
  Country_PB_CountryCode_E_BT = 32,
  Country_PB_CountryCode_E_BV = 33,
  Country_PB_CountryCode_E_BW = 34,
  Country_PB_CountryCode_E_BY = 35,
  Country_PB_CountryCode_E_BZ = 36,
  Country_PB_CountryCode_E_CA = 37,
  Country_PB_CountryCode_E_CC = 38,
  Country_PB_CountryCode_E_CD = 39,
  Country_PB_CountryCode_E_CF = 40,
  Country_PB_CountryCode_E_CG = 41,
  Country_PB_CountryCode_E_CH = 42,
  Country_PB_CountryCode_E_CI = 43,
  Country_PB_CountryCode_E_CK = 44,
  Country_PB_CountryCode_E_CL = 45,
  Country_PB_CountryCode_E_CM = 46,
  Country_PB_CountryCode_E_CN = 47,
  Country_PB_CountryCode_E_CO = 48,
  Country_PB_CountryCode_E_CR_ = 49,
  Country_PB_CountryCode_E_CS = 50,
  Country_PB_CountryCode_E_CU = 51,
  Country_PB_CountryCode_E_CV = 52,
  Country_PB_CountryCode_E_CX = 53,
  Country_PB_CountryCode_E_CY = 54,
  Country_PB_CountryCode_E_CZ = 55,
  Country_PB_CountryCode_E_DE = 56,
  Country_PB_CountryCode_E_DJ = 57,
  Country_PB_CountryCode_E_DK = 58,
  Country_PB_CountryCode_E_DM = 59,
  Country_PB_CountryCode_E_DO = 60,
  Country_PB_CountryCode_E_DZ = 61,
  Country_PB_CountryCode_E_EC = 62,
  Country_PB_CountryCode_E_EE = 63,
  Country_PB_CountryCode_E_EG = 64,
  Country_PB_CountryCode_E_EH = 65,
  Country_PB_CountryCode_E_ER = 66,
  Country_PB_CountryCode_E_ES = 67,
  Country_PB_CountryCode_E_ET = 68,
  Country_PB_CountryCode_E_EU = 69,
  Country_PB_CountryCode_E_FI = 70,
  Country_PB_CountryCode_E_FJ = 71,
  Country_PB_CountryCode_E_FK = 72,
  Country_PB_CountryCode_E_FM = 73,
  Country_PB_CountryCode_E_FO = 74,
  Country_PB_CountryCode_E_FR = 75,
  Country_PB_CountryCode_E_GA = 76,
  Country_PB_CountryCode_E_GD = 77,
  Country_PB_CountryCode_E_GE = 78,
  Country_PB_CountryCode_E_GF = 79,
  Country_PB_CountryCode_E_GH = 80,
  Country_PB_CountryCode_E_GI = 81,
  Country_PB_CountryCode_E_GL = 82,
  Country_PB_CountryCode_E_GM = 83,
  Country_PB_CountryCode_E_GN = 84,
  Country_PB_CountryCode_E_GP = 85,
  Country_PB_CountryCode_E_GQ = 86,
  Country_PB_CountryCode_E_GR = 87,
  Country_PB_CountryCode_E_GS = 88,
  Country_PB_CountryCode_E_GT = 89,
  Country_PB_CountryCode_E_GU = 90,
  Country_PB_CountryCode_E_GW = 91,
  Country_PB_CountryCode_E_GY = 92,
  Country_PB_CountryCode_E_HK = 93,
  Country_PB_CountryCode_E_HM = 94,
  Country_PB_CountryCode_E_HN = 95,
  Country_PB_CountryCode_E_HR = 96,
  Country_PB_CountryCode_E_HT = 97,
  Country_PB_CountryCode_E_HU = 98,
  Country_PB_CountryCode_E_ID = 99,
  Country_PB_CountryCode_E_IE = 100,
  Country_PB_CountryCode_E_IL = 101,
  Country_PB_CountryCode_E_IN = 102,
  Country_PB_CountryCode_E_IO = 103,
  Country_PB_CountryCode_E_IQ = 104,
  Country_PB_CountryCode_E_IR = 105,
  Country_PB_CountryCode_E_IS = 106,
  Country_PB_CountryCode_E_IT = 107,
  Country_PB_CountryCode_E_JM = 108,
  Country_PB_CountryCode_E_JO = 109,
  Country_PB_CountryCode_E_JP = 110,
  Country_PB_CountryCode_E_KE = 111,
  Country_PB_CountryCode_E_KG = 112,
  Country_PB_CountryCode_E_KH = 113,
  Country_PB_CountryCode_E_KI = 114,
  Country_PB_CountryCode_E_KM = 115,
  Country_PB_CountryCode_E_KN = 116,
  Country_PB_CountryCode_E_KP = 117,
  Country_PB_CountryCode_E_KR = 118,
  Country_PB_CountryCode_E_KW = 119,
  Country_PB_CountryCode_E_KY = 120,
  Country_PB_CountryCode_E_KZ = 121,
  Country_PB_CountryCode_E_LA = 122,
  Country_PB_CountryCode_E_LB = 123,
  Country_PB_CountryCode_E_LC = 124,
  Country_PB_CountryCode_E_LI = 125,
  Country_PB_CountryCode_E_LK = 126,
  Country_PB_CountryCode_E_LR = 127,
  Country_PB_CountryCode_E_LS = 128,
  Country_PB_CountryCode_E_LT = 129,
  Country_PB_CountryCode_E_LU = 130,
  Country_PB_CountryCode_E_LV = 131,
  Country_PB_CountryCode_E_LY = 132,
  Country_PB_CountryCode_E_MA = 133,
  Country_PB_CountryCode_E_MC = 134,
  Country_PB_CountryCode_E_MD = 135,
  Country_PB_CountryCode_E_MG = 136,
  Country_PB_CountryCode_E_MH = 137,
  Country_PB_CountryCode_E_MK = 138,
  Country_PB_CountryCode_E_ML = 139,
  Country_PB_CountryCode_E_MM = 140,
  Country_PB_CountryCode_E_MN = 141,
  Country_PB_CountryCode_E_MO = 142,
  Country_PB_CountryCode_E_MP = 143,
  Country_PB_CountryCode_E_MQ = 144,
  Country_PB_CountryCode_E_MR = 145,
  Country_PB_CountryCode_E_MS = 146,
  Country_PB_CountryCode_E_MT = 147,
  Country_PB_CountryCode_E_MU = 148,
  Country_PB_CountryCode_E_MV = 149,
  Country_PB_CountryCode_E_MW = 150,
  Country_PB_CountryCode_E_MX = 151,
  Country_PB_CountryCode_E_MY = 152,
  Country_PB_CountryCode_E_MZ = 153,
  Country_PB_CountryCode_E_NA = 154,
  Country_PB_CountryCode_E_NC = 155,
  Country_PB_CountryCode_E_NE = 156,
  Country_PB_CountryCode_E_NF = 157,
  Country_PB_CountryCode_E_NG = 158,
  Country_PB_CountryCode_E_NI = 159,
  Country_PB_CountryCode_E_NL = 160,
  Country_PB_CountryCode_E_NO = 161,
  Country_PB_CountryCode_E_NP = 162,
  Country_PB_CountryCode_E_NR = 163,
  Country_PB_CountryCode_E_NU = 164,
  Country_PB_CountryCode_E_NZ = 165,
  Country_PB_CountryCode_E_OM = 166,
  Country_PB_CountryCode_E_PA = 167,
  Country_PB_CountryCode_E_PE = 168,
  Country_PB_CountryCode_E_PF = 169,
  Country_PB_CountryCode_E_PG = 170,
  Country_PB_CountryCode_E_PH = 171,
  Country_PB_CountryCode_E_PK = 172,
  Country_PB_CountryCode_E_PL = 173,
  Country_PB_CountryCode_E_PM = 174,
  Country_PB_CountryCode_E_PN = 175,
  Country_PB_CountryCode_E_PR = 176,
  Country_PB_CountryCode_E_PS = 177,
  Country_PB_CountryCode_E_PT = 178,
  Country_PB_CountryCode_E_PW = 179,
  Country_PB_CountryCode_E_PY = 180,
  Country_PB_CountryCode_E_QA = 181,
  Country_PB_CountryCode_E_RE = 182,
  Country_PB_CountryCode_E_RO = 183,
  Country_PB_CountryCode_E_RU = 184,
  Country_PB_CountryCode_E_RW = 185,
  Country_PB_CountryCode_E_SA = 186,
  Country_PB_CountryCode_E_SB = 187,
  Country_PB_CountryCode_E_SC = 188,
  Country_PB_CountryCode_E_SD = 189,
  Country_PB_CountryCode_E_SE = 190,
  Country_PB_CountryCode_E_SG = 191,
  Country_PB_CountryCode_E_SH = 192,
  Country_PB_CountryCode_E_SI = 193,
  Country_PB_CountryCode_E_SJ = 194,
  Country_PB_CountryCode_E_SK = 195,
  Country_PB_CountryCode_E_SL = 196,
  Country_PB_CountryCode_E_SM = 197,
  Country_PB_CountryCode_E_SN = 198,
  Country_PB_CountryCode_E_SO = 199,
  Country_PB_CountryCode_E_SR = 200,
  Country_PB_CountryCode_E_ST = 201,
  Country_PB_CountryCode_E_SV = 202,
  Country_PB_CountryCode_E_SY = 203,
  Country_PB_CountryCode_E_SZ = 204,
  Country_PB_CountryCode_E_TC = 205,
  Country_PB_CountryCode_E_TD = 206,
  Country_PB_CountryCode_E_TF = 207,
  Country_PB_CountryCode_E_TG = 208,
  Country_PB_CountryCode_E_TH = 209,
  Country_PB_CountryCode_E_TJ = 210,
  Country_PB_CountryCode_E_TK = 211,
  Country_PB_CountryCode_E_TL = 212,
  Country_PB_CountryCode_E_TM = 213,
  Country_PB_CountryCode_E_TN = 214,
  Country_PB_CountryCode_E_TO = 215,
  Country_PB_CountryCode_E_TR = 216,
  Country_PB_CountryCode_E_TT = 217,
  Country_PB_CountryCode_E_TV = 218,
  Country_PB_CountryCode_E_TW = 219,
  Country_PB_CountryCode_E_TZ = 220,
  Country_PB_CountryCode_E_UA = 221,
  Country_PB_CountryCode_E_UG = 222,
  Country_PB_CountryCode_E_UK = 223,
  Country_PB_CountryCode_E_UM = 224,
  Country_PB_CountryCode_E_US = 225,
  Country_PB_CountryCode_E_UY = 226,
  Country_PB_CountryCode_E_UZ = 227,
  Country_PB_CountryCode_E_VA = 228,
  Country_PB_CountryCode_E_VC = 229,
  Country_PB_CountryCode_E_VE = 230,
  Country_PB_CountryCode_E_VG = 231,
  Country_PB_CountryCode_E_VN = 232,
  Country_PB_CountryCode_E_VU = 233,
  Country_PB_CountryCode_E_WF = 234,
  Country_PB_CountryCode_E_WS = 235,
  Country_PB_CountryCode_E_YE = 236,
  Country_PB_CountryCode_E_YT = 237,
  Country_PB_CountryCode_E_ZA = 238,
  Country_PB_CountryCode_E_ZM = 239,
  Country_PB_CountryCode_E_ZW = 240,
  Country_PB_CountryCode_E_IM = 241,
  Country_PB_CountryCode_E_JE = 242,
  Country_PB_CountryCode_E_RS = 243,
  Country_PB_CountryCode_E_VI = 244,
  Country_PB_CountryCode_E_AX = 245,
  Country_PB_CountryCode_E_GG = 246,
  Country_PB_CountryCode_E_ME = 247,
  Country_PB_CountryCode_E_STAR = 500
};
bool Country_PB_CountryCode_E_IsValid(int value);
const Country_PB_CountryCode_E Country_PB_CountryCode_E_CountryCode_E_MIN = Country_PB_CountryCode_E_UNKNOWN;
const Country_PB_CountryCode_E Country_PB_CountryCode_E_CountryCode_E_MAX = Country_PB_CountryCode_E_STAR;
const int Country_PB_CountryCode_E_CountryCode_E_ARRAYSIZE = Country_PB_CountryCode_E_CountryCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* Country_PB_CountryCode_E_descriptor();
inline const ::std::string& Country_PB_CountryCode_E_Name(Country_PB_CountryCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    Country_PB_CountryCode_E_descriptor(), value);
}
inline bool Country_PB_CountryCode_E_Parse(
    const ::std::string& name, Country_PB_CountryCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Country_PB_CountryCode_E>(
    Country_PB_CountryCode_E_descriptor(), name, value);
}
enum Region_PB_RegionCode_E {
  Region_PB_RegionCode_E_UNKNOWN = 0,
  Region_PB_RegionCode_E_AL = 1,
  Region_PB_RegionCode_E_AK = 2,
  Region_PB_RegionCode_E_AZ = 3,
  Region_PB_RegionCode_E_AR = 4,
  Region_PB_RegionCode_E_CA = 5,
  Region_PB_RegionCode_E_CO = 6,
  Region_PB_RegionCode_E_CT = 7,
  Region_PB_RegionCode_E_DE = 8,
  Region_PB_RegionCode_E_FL = 9,
  Region_PB_RegionCode_E_GA = 10,
  Region_PB_RegionCode_E_HI = 11,
  Region_PB_RegionCode_E_ID = 12,
  Region_PB_RegionCode_E_IL = 13,
  Region_PB_RegionCode_E_IN = 14,
  Region_PB_RegionCode_E_IA = 15,
  Region_PB_RegionCode_E_KS = 16,
  Region_PB_RegionCode_E_KY = 17,
  Region_PB_RegionCode_E_LA = 18,
  Region_PB_RegionCode_E_ME = 19,
  Region_PB_RegionCode_E_MD = 20,
  Region_PB_RegionCode_E_MA = 21,
  Region_PB_RegionCode_E_MI = 22,
  Region_PB_RegionCode_E_MN = 23,
  Region_PB_RegionCode_E_MS = 24,
  Region_PB_RegionCode_E_MO = 25,
  Region_PB_RegionCode_E_MT = 26,
  Region_PB_RegionCode_E_NE = 27,
  Region_PB_RegionCode_E_NV = 28,
  Region_PB_RegionCode_E_NH = 29,
  Region_PB_RegionCode_E_NJ = 30,
  Region_PB_RegionCode_E_NM = 31,
  Region_PB_RegionCode_E_NY = 32,
  Region_PB_RegionCode_E_NC = 33,
  Region_PB_RegionCode_E_ND = 34,
  Region_PB_RegionCode_E_OH = 35,
  Region_PB_RegionCode_E_OK_ = 36,
  Region_PB_RegionCode_E_OR = 37,
  Region_PB_RegionCode_E_PA = 38,
  Region_PB_RegionCode_E_RI = 39,
  Region_PB_RegionCode_E_SC = 40,
  Region_PB_RegionCode_E_SD = 41,
  Region_PB_RegionCode_E_TN = 42,
  Region_PB_RegionCode_E_TX = 43,
  Region_PB_RegionCode_E_UT = 44,
  Region_PB_RegionCode_E_VT = 45,
  Region_PB_RegionCode_E_VA = 46,
  Region_PB_RegionCode_E_WA = 47,
  Region_PB_RegionCode_E_WV = 48,
  Region_PB_RegionCode_E_WI = 49,
  Region_PB_RegionCode_E_WY = 50,
  Region_PB_RegionCode_E_AB = 51,
  Region_PB_RegionCode_E_AOL = 52,
  Region_PB_RegionCode_E_B = 53,
  Region_PB_RegionCode_E_BC = 54,
  Region_PB_RegionCode_E_BE = 55,
  Region_PB_RegionCode_E_BR = 56,
  Region_PB_RegionCode_E_BW = 57,
  Region_PB_RegionCode_E_BY = 58,
  Region_PB_RegionCode_E_C = 59,
  Region_PB_RegionCode_E_D = 60,
  Region_PB_RegionCode_E_DC = 61,
  Region_PB_RegionCode_E_E = 62,
  Region_PB_RegionCode_E_ENG = 63,
  Region_PB_RegionCode_E_F = 64,
  Region_PB_RegionCode_E_G = 65,
  Region_PB_RegionCode_E_H = 66,
  Region_PB_RegionCode_E_HB = 67,
  Region_PB_RegionCode_E_HE = 68,
  Region_PB_RegionCode_E_HH = 69,
  Region_PB_RegionCode_E_I = 70,
  Region_PB_RegionCode_E_J = 71,
  Region_PB_RegionCode_E_K = 72,
  Region_PB_RegionCode_E_L = 73,
  Region_PB_RegionCode_E_M = 74,
  Region_PB_RegionCode_E_MB = 75,
  Region_PB_RegionCode_E_MV = 76,
  Region_PB_RegionCode_E_N = 77,
  Region_PB_RegionCode_E_NB = 78,
  Region_PB_RegionCode_E_NF = 79,
  Region_PB_RegionCode_E_NI = 80,
  Region_PB_RegionCode_E_NIR = 81,
  Region_PB_RegionCode_E_NS = 82,
  Region_PB_RegionCode_E_NT = 83,
  Region_PB_RegionCode_E_NU = 84,
  Region_PB_RegionCode_E_NW = 85,
  Region_PB_RegionCode_E_O = 86,
  Region_PB_RegionCode_E_ON = 87,
  Region_PB_RegionCode_E_P = 88,
  Region_PB_RegionCode_E_PE = 89,
  Region_PB_RegionCode_E_Q = 90,
  Region_PB_RegionCode_E_QC = 91,
  Region_PB_RegionCode_E_QL = 92,
  Region_PB_RegionCode_E_R = 93,
  Region_PB_RegionCode_E_RP = 94,
  Region_PB_RegionCode_E_S = 95,
  Region_PB_RegionCode_E_SA = 96,
  Region_PB_RegionCode_E_SH = 97,
  Region_PB_RegionCode_E_SK = 98,
  Region_PB_RegionCode_E_SL = 99,
  Region_PB_RegionCode_E_SN = 100,
  Region_PB_RegionCode_E_ST = 101,
  Region_PB_RegionCode_E_T = 102,
  Region_PB_RegionCode_E_TH = 103,
  Region_PB_RegionCode_E_TS = 104,
  Region_PB_RegionCode_E_U = 105,
  Region_PB_RegionCode_E_V = 106,
  Region_PB_RegionCode_E_VI = 107,
  Region_PB_RegionCode_E_WLS = 108,
  Region_PB_RegionCode_E_YT = 109
};
bool Region_PB_RegionCode_E_IsValid(int value);
const Region_PB_RegionCode_E Region_PB_RegionCode_E_RegionCode_E_MIN = Region_PB_RegionCode_E_UNKNOWN;
const Region_PB_RegionCode_E Region_PB_RegionCode_E_RegionCode_E_MAX = Region_PB_RegionCode_E_YT;
const int Region_PB_RegionCode_E_RegionCode_E_ARRAYSIZE = Region_PB_RegionCode_E_RegionCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* Region_PB_RegionCode_E_descriptor();
inline const ::std::string& Region_PB_RegionCode_E_Name(Region_PB_RegionCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    Region_PB_RegionCode_E_descriptor(), value);
}
inline bool Region_PB_RegionCode_E_Parse(
    const ::std::string& name, Region_PB_RegionCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Region_PB_RegionCode_E>(
    Region_PB_RegionCode_E_descriptor(), name, value);
}
enum Speed_PB_SpeedType_E {
  Speed_PB_SpeedType_E_UNKNOWN = 1,
  Speed_PB_SpeedType_E_DIALUP = 2,
  Speed_PB_SpeedType_E_BROADBAND = 3,
  Speed_PB_SpeedType_E_CABLE = 4,
  Speed_PB_SpeedType_E_XSDL = 5,
  Speed_PB_SpeedType_E_T1 = 6,
  Speed_PB_SpeedType_E_T3 = 7,
  Speed_PB_SpeedType_E_OC3 = 8,
  Speed_PB_SpeedType_E_OC12 = 9,
  Speed_PB_SpeedType_E_SATELLITE = 10,
  Speed_PB_SpeedType_E_WIRELESS = 11,
  Speed_PB_SpeedType_E_MOBILE = 12
};
bool Speed_PB_SpeedType_E_IsValid(int value);
const Speed_PB_SpeedType_E Speed_PB_SpeedType_E_SpeedType_E_MIN = Speed_PB_SpeedType_E_UNKNOWN;
const Speed_PB_SpeedType_E Speed_PB_SpeedType_E_SpeedType_E_MAX = Speed_PB_SpeedType_E_MOBILE;
const int Speed_PB_SpeedType_E_SpeedType_E_ARRAYSIZE = Speed_PB_SpeedType_E_SpeedType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* Speed_PB_SpeedType_E_descriptor();
inline const ::std::string& Speed_PB_SpeedType_E_Name(Speed_PB_SpeedType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    Speed_PB_SpeedType_E_descriptor(), value);
}
inline bool Speed_PB_SpeedType_E_Parse(
    const ::std::string& name, Speed_PB_SpeedType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Speed_PB_SpeedType_E>(
    Speed_PB_SpeedType_E_descriptor(), name, value);
}
// ===================================================================

class Continent_PB : public ::google::protobuf::Message {
 public:
  Continent_PB();
  virtual ~Continent_PB();
  
  Continent_PB(const Continent_PB& from);
  
  inline Continent_PB& operator=(const Continent_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Continent_PB& default_instance();
  
  void Swap(Continent_PB* other);
  
  // implements Message ----------------------------------------------
  
  Continent_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Continent_PB& from);
  void MergeFrom(const Continent_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Continent_PB_ContinentCode_E ContinentCode_E;
  static const ContinentCode_E UNKNOWN = Continent_PB_ContinentCode_E_UNKNOWN;
  static const ContinentCode_E AFRICA = Continent_PB_ContinentCode_E_AFRICA;
  static const ContinentCode_E ANTARCTICA = Continent_PB_ContinentCode_E_ANTARCTICA;
  static const ContinentCode_E ASIA = Continent_PB_ContinentCode_E_ASIA;
  static const ContinentCode_E AUSTRALIA = Continent_PB_ContinentCode_E_AUSTRALIA;
  static const ContinentCode_E EUROPE = Continent_PB_ContinentCode_E_EUROPE;
  static const ContinentCode_E NORTH_AMERICA = Continent_PB_ContinentCode_E_NORTH_AMERICA;
  static const ContinentCode_E SOUTH_AMERICA = Continent_PB_ContinentCode_E_SOUTH_AMERICA;
  static inline bool ContinentCode_E_IsValid(int value) {
    return Continent_PB_ContinentCode_E_IsValid(value);
  }
  static const ContinentCode_E ContinentCode_E_MIN =
    Continent_PB_ContinentCode_E_ContinentCode_E_MIN;
  static const ContinentCode_E ContinentCode_E_MAX =
    Continent_PB_ContinentCode_E_ContinentCode_E_MAX;
  static const int ContinentCode_E_ARRAYSIZE =
    Continent_PB_ContinentCode_E_ContinentCode_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContinentCode_E_descriptor() {
    return Continent_PB_ContinentCode_E_descriptor();
  }
  static inline const ::std::string& ContinentCode_E_Name(ContinentCode_E value) {
    return Continent_PB_ContinentCode_E_Name(value);
  }
  static inline bool ContinentCode_E_Parse(const ::std::string& name,
      ContinentCode_E* value) {
    return Continent_PB_ContinentCode_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.geo.Continent_PB.ContinentCode_E continent_code = 1 [default = UNKNOWN];
  inline bool has_continent_code() const;
  inline void clear_continent_code();
  static const int kContinentCodeFieldNumber = 1;
  inline ::rubicon::data::geo::Continent_PB_ContinentCode_E continent_code() const;
  inline void set_continent_code(::rubicon::data::geo::Continent_PB_ContinentCode_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.geo.Continent_PB)
 private:
  inline void set_has_continent_code();
  inline void clear_has_continent_code();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int continent_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_geo_2eproto();
  friend void protobuf_AssignDesc_geo_2eproto();
  friend void protobuf_ShutdownFile_geo_2eproto();
  
  void InitAsDefaultInstance();
  static Continent_PB* default_instance_;
};
// -------------------------------------------------------------------

class Country_PB : public ::google::protobuf::Message {
 public:
  Country_PB();
  virtual ~Country_PB();
  
  Country_PB(const Country_PB& from);
  
  inline Country_PB& operator=(const Country_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Country_PB& default_instance();
  
  void Swap(Country_PB* other);
  
  // implements Message ----------------------------------------------
  
  Country_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Country_PB& from);
  void MergeFrom(const Country_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Country_PB_CountryCode_E CountryCode_E;
  static const CountryCode_E UNKNOWN = Country_PB_CountryCode_E_UNKNOWN;
  static const CountryCode_E AD = Country_PB_CountryCode_E_AD;
  static const CountryCode_E AE = Country_PB_CountryCode_E_AE;
  static const CountryCode_E AF = Country_PB_CountryCode_E_AF;
  static const CountryCode_E AG = Country_PB_CountryCode_E_AG;
  static const CountryCode_E AI = Country_PB_CountryCode_E_AI;
  static const CountryCode_E AL = Country_PB_CountryCode_E_AL;
  static const CountryCode_E AM = Country_PB_CountryCode_E_AM;
  static const CountryCode_E AN = Country_PB_CountryCode_E_AN;
  static const CountryCode_E AO = Country_PB_CountryCode_E_AO;
  static const CountryCode_E AP = Country_PB_CountryCode_E_AP;
  static const CountryCode_E AQ = Country_PB_CountryCode_E_AQ;
  static const CountryCode_E AR = Country_PB_CountryCode_E_AR;
  static const CountryCode_E AS = Country_PB_CountryCode_E_AS;
  static const CountryCode_E AT = Country_PB_CountryCode_E_AT;
  static const CountryCode_E AU = Country_PB_CountryCode_E_AU;
  static const CountryCode_E AW = Country_PB_CountryCode_E_AW;
  static const CountryCode_E AZ = Country_PB_CountryCode_E_AZ;
  static const CountryCode_E BA = Country_PB_CountryCode_E_BA;
  static const CountryCode_E BB = Country_PB_CountryCode_E_BB;
  static const CountryCode_E BD = Country_PB_CountryCode_E_BD;
  static const CountryCode_E BE = Country_PB_CountryCode_E_BE;
  static const CountryCode_E BF = Country_PB_CountryCode_E_BF;
  static const CountryCode_E BG = Country_PB_CountryCode_E_BG;
  static const CountryCode_E BH = Country_PB_CountryCode_E_BH;
  static const CountryCode_E BI = Country_PB_CountryCode_E_BI;
  static const CountryCode_E BJ = Country_PB_CountryCode_E_BJ;
  static const CountryCode_E BM = Country_PB_CountryCode_E_BM;
  static const CountryCode_E BN = Country_PB_CountryCode_E_BN;
  static const CountryCode_E BO = Country_PB_CountryCode_E_BO;
  static const CountryCode_E BR = Country_PB_CountryCode_E_BR;
  static const CountryCode_E BS = Country_PB_CountryCode_E_BS;
  static const CountryCode_E BT = Country_PB_CountryCode_E_BT;
  static const CountryCode_E BV = Country_PB_CountryCode_E_BV;
  static const CountryCode_E BW = Country_PB_CountryCode_E_BW;
  static const CountryCode_E BY = Country_PB_CountryCode_E_BY;
  static const CountryCode_E BZ = Country_PB_CountryCode_E_BZ;
  static const CountryCode_E CA = Country_PB_CountryCode_E_CA;
  static const CountryCode_E CC = Country_PB_CountryCode_E_CC;
  static const CountryCode_E CD = Country_PB_CountryCode_E_CD;
  static const CountryCode_E CF = Country_PB_CountryCode_E_CF;
  static const CountryCode_E CG = Country_PB_CountryCode_E_CG;
  static const CountryCode_E CH = Country_PB_CountryCode_E_CH;
  static const CountryCode_E CI = Country_PB_CountryCode_E_CI;
  static const CountryCode_E CK = Country_PB_CountryCode_E_CK;
  static const CountryCode_E CL = Country_PB_CountryCode_E_CL;
  static const CountryCode_E CM = Country_PB_CountryCode_E_CM;
  static const CountryCode_E CN = Country_PB_CountryCode_E_CN;
  static const CountryCode_E CO = Country_PB_CountryCode_E_CO;
  static const CountryCode_E CR_ = Country_PB_CountryCode_E_CR_;
  static const CountryCode_E CS = Country_PB_CountryCode_E_CS;
  static const CountryCode_E CU = Country_PB_CountryCode_E_CU;
  static const CountryCode_E CV = Country_PB_CountryCode_E_CV;
  static const CountryCode_E CX = Country_PB_CountryCode_E_CX;
  static const CountryCode_E CY = Country_PB_CountryCode_E_CY;
  static const CountryCode_E CZ = Country_PB_CountryCode_E_CZ;
  static const CountryCode_E DE = Country_PB_CountryCode_E_DE;
  static const CountryCode_E DJ = Country_PB_CountryCode_E_DJ;
  static const CountryCode_E DK = Country_PB_CountryCode_E_DK;
  static const CountryCode_E DM = Country_PB_CountryCode_E_DM;
  static const CountryCode_E DO = Country_PB_CountryCode_E_DO;
  static const CountryCode_E DZ = Country_PB_CountryCode_E_DZ;
  static const CountryCode_E EC = Country_PB_CountryCode_E_EC;
  static const CountryCode_E EE = Country_PB_CountryCode_E_EE;
  static const CountryCode_E EG = Country_PB_CountryCode_E_EG;
  static const CountryCode_E EH = Country_PB_CountryCode_E_EH;
  static const CountryCode_E ER = Country_PB_CountryCode_E_ER;
  static const CountryCode_E ES = Country_PB_CountryCode_E_ES;
  static const CountryCode_E ET = Country_PB_CountryCode_E_ET;
  static const CountryCode_E EU = Country_PB_CountryCode_E_EU;
  static const CountryCode_E FI = Country_PB_CountryCode_E_FI;
  static const CountryCode_E FJ = Country_PB_CountryCode_E_FJ;
  static const CountryCode_E FK = Country_PB_CountryCode_E_FK;
  static const CountryCode_E FM = Country_PB_CountryCode_E_FM;
  static const CountryCode_E FO = Country_PB_CountryCode_E_FO;
  static const CountryCode_E FR = Country_PB_CountryCode_E_FR;
  static const CountryCode_E GA = Country_PB_CountryCode_E_GA;
  static const CountryCode_E GD = Country_PB_CountryCode_E_GD;
  static const CountryCode_E GE = Country_PB_CountryCode_E_GE;
  static const CountryCode_E GF = Country_PB_CountryCode_E_GF;
  static const CountryCode_E GH = Country_PB_CountryCode_E_GH;
  static const CountryCode_E GI = Country_PB_CountryCode_E_GI;
  static const CountryCode_E GL = Country_PB_CountryCode_E_GL;
  static const CountryCode_E GM = Country_PB_CountryCode_E_GM;
  static const CountryCode_E GN = Country_PB_CountryCode_E_GN;
  static const CountryCode_E GP = Country_PB_CountryCode_E_GP;
  static const CountryCode_E GQ = Country_PB_CountryCode_E_GQ;
  static const CountryCode_E GR = Country_PB_CountryCode_E_GR;
  static const CountryCode_E GS = Country_PB_CountryCode_E_GS;
  static const CountryCode_E GT = Country_PB_CountryCode_E_GT;
  static const CountryCode_E GU = Country_PB_CountryCode_E_GU;
  static const CountryCode_E GW = Country_PB_CountryCode_E_GW;
  static const CountryCode_E GY = Country_PB_CountryCode_E_GY;
  static const CountryCode_E HK = Country_PB_CountryCode_E_HK;
  static const CountryCode_E HM = Country_PB_CountryCode_E_HM;
  static const CountryCode_E HN = Country_PB_CountryCode_E_HN;
  static const CountryCode_E HR = Country_PB_CountryCode_E_HR;
  static const CountryCode_E HT = Country_PB_CountryCode_E_HT;
  static const CountryCode_E HU = Country_PB_CountryCode_E_HU;
  static const CountryCode_E ID = Country_PB_CountryCode_E_ID;
  static const CountryCode_E IE = Country_PB_CountryCode_E_IE;
  static const CountryCode_E IL = Country_PB_CountryCode_E_IL;
  static const CountryCode_E IN = Country_PB_CountryCode_E_IN;
  static const CountryCode_E IO = Country_PB_CountryCode_E_IO;
  static const CountryCode_E IQ = Country_PB_CountryCode_E_IQ;
  static const CountryCode_E IR = Country_PB_CountryCode_E_IR;
  static const CountryCode_E IS = Country_PB_CountryCode_E_IS;
  static const CountryCode_E IT = Country_PB_CountryCode_E_IT;
  static const CountryCode_E JM = Country_PB_CountryCode_E_JM;
  static const CountryCode_E JO = Country_PB_CountryCode_E_JO;
  static const CountryCode_E JP = Country_PB_CountryCode_E_JP;
  static const CountryCode_E KE = Country_PB_CountryCode_E_KE;
  static const CountryCode_E KG = Country_PB_CountryCode_E_KG;
  static const CountryCode_E KH = Country_PB_CountryCode_E_KH;
  static const CountryCode_E KI = Country_PB_CountryCode_E_KI;
  static const CountryCode_E KM = Country_PB_CountryCode_E_KM;
  static const CountryCode_E KN = Country_PB_CountryCode_E_KN;
  static const CountryCode_E KP = Country_PB_CountryCode_E_KP;
  static const CountryCode_E KR = Country_PB_CountryCode_E_KR;
  static const CountryCode_E KW = Country_PB_CountryCode_E_KW;
  static const CountryCode_E KY = Country_PB_CountryCode_E_KY;
  static const CountryCode_E KZ = Country_PB_CountryCode_E_KZ;
  static const CountryCode_E LA = Country_PB_CountryCode_E_LA;
  static const CountryCode_E LB = Country_PB_CountryCode_E_LB;
  static const CountryCode_E LC = Country_PB_CountryCode_E_LC;
  static const CountryCode_E LI = Country_PB_CountryCode_E_LI;
  static const CountryCode_E LK = Country_PB_CountryCode_E_LK;
  static const CountryCode_E LR = Country_PB_CountryCode_E_LR;
  static const CountryCode_E LS = Country_PB_CountryCode_E_LS;
  static const CountryCode_E LT = Country_PB_CountryCode_E_LT;
  static const CountryCode_E LU = Country_PB_CountryCode_E_LU;
  static const CountryCode_E LV = Country_PB_CountryCode_E_LV;
  static const CountryCode_E LY = Country_PB_CountryCode_E_LY;
  static const CountryCode_E MA = Country_PB_CountryCode_E_MA;
  static const CountryCode_E MC = Country_PB_CountryCode_E_MC;
  static const CountryCode_E MD = Country_PB_CountryCode_E_MD;
  static const CountryCode_E MG = Country_PB_CountryCode_E_MG;
  static const CountryCode_E MH = Country_PB_CountryCode_E_MH;
  static const CountryCode_E MK = Country_PB_CountryCode_E_MK;
  static const CountryCode_E ML = Country_PB_CountryCode_E_ML;
  static const CountryCode_E MM = Country_PB_CountryCode_E_MM;
  static const CountryCode_E MN = Country_PB_CountryCode_E_MN;
  static const CountryCode_E MO = Country_PB_CountryCode_E_MO;
  static const CountryCode_E MP = Country_PB_CountryCode_E_MP;
  static const CountryCode_E MQ = Country_PB_CountryCode_E_MQ;
  static const CountryCode_E MR = Country_PB_CountryCode_E_MR;
  static const CountryCode_E MS = Country_PB_CountryCode_E_MS;
  static const CountryCode_E MT = Country_PB_CountryCode_E_MT;
  static const CountryCode_E MU = Country_PB_CountryCode_E_MU;
  static const CountryCode_E MV = Country_PB_CountryCode_E_MV;
  static const CountryCode_E MW = Country_PB_CountryCode_E_MW;
  static const CountryCode_E MX = Country_PB_CountryCode_E_MX;
  static const CountryCode_E MY = Country_PB_CountryCode_E_MY;
  static const CountryCode_E MZ = Country_PB_CountryCode_E_MZ;
  static const CountryCode_E NA = Country_PB_CountryCode_E_NA;
  static const CountryCode_E NC = Country_PB_CountryCode_E_NC;
  static const CountryCode_E NE = Country_PB_CountryCode_E_NE;
  static const CountryCode_E NF = Country_PB_CountryCode_E_NF;
  static const CountryCode_E NG = Country_PB_CountryCode_E_NG;
  static const CountryCode_E NI = Country_PB_CountryCode_E_NI;
  static const CountryCode_E NL = Country_PB_CountryCode_E_NL;
  static const CountryCode_E NO = Country_PB_CountryCode_E_NO;
  static const CountryCode_E NP = Country_PB_CountryCode_E_NP;
  static const CountryCode_E NR = Country_PB_CountryCode_E_NR;
  static const CountryCode_E NU = Country_PB_CountryCode_E_NU;
  static const CountryCode_E NZ = Country_PB_CountryCode_E_NZ;
  static const CountryCode_E OM = Country_PB_CountryCode_E_OM;
  static const CountryCode_E PA = Country_PB_CountryCode_E_PA;
  static const CountryCode_E PE = Country_PB_CountryCode_E_PE;
  static const CountryCode_E PF = Country_PB_CountryCode_E_PF;
  static const CountryCode_E PG = Country_PB_CountryCode_E_PG;
  static const CountryCode_E PH = Country_PB_CountryCode_E_PH;
  static const CountryCode_E PK = Country_PB_CountryCode_E_PK;
  static const CountryCode_E PL = Country_PB_CountryCode_E_PL;
  static const CountryCode_E PM = Country_PB_CountryCode_E_PM;
  static const CountryCode_E PN = Country_PB_CountryCode_E_PN;
  static const CountryCode_E PR = Country_PB_CountryCode_E_PR;
  static const CountryCode_E PS = Country_PB_CountryCode_E_PS;
  static const CountryCode_E PT = Country_PB_CountryCode_E_PT;
  static const CountryCode_E PW = Country_PB_CountryCode_E_PW;
  static const CountryCode_E PY = Country_PB_CountryCode_E_PY;
  static const CountryCode_E QA = Country_PB_CountryCode_E_QA;
  static const CountryCode_E RE = Country_PB_CountryCode_E_RE;
  static const CountryCode_E RO = Country_PB_CountryCode_E_RO;
  static const CountryCode_E RU = Country_PB_CountryCode_E_RU;
  static const CountryCode_E RW = Country_PB_CountryCode_E_RW;
  static const CountryCode_E SA = Country_PB_CountryCode_E_SA;
  static const CountryCode_E SB = Country_PB_CountryCode_E_SB;
  static const CountryCode_E SC = Country_PB_CountryCode_E_SC;
  static const CountryCode_E SD = Country_PB_CountryCode_E_SD;
  static const CountryCode_E SE = Country_PB_CountryCode_E_SE;
  static const CountryCode_E SG = Country_PB_CountryCode_E_SG;
  static const CountryCode_E SH = Country_PB_CountryCode_E_SH;
  static const CountryCode_E SI = Country_PB_CountryCode_E_SI;
  static const CountryCode_E SJ = Country_PB_CountryCode_E_SJ;
  static const CountryCode_E SK = Country_PB_CountryCode_E_SK;
  static const CountryCode_E SL = Country_PB_CountryCode_E_SL;
  static const CountryCode_E SM = Country_PB_CountryCode_E_SM;
  static const CountryCode_E SN = Country_PB_CountryCode_E_SN;
  static const CountryCode_E SO = Country_PB_CountryCode_E_SO;
  static const CountryCode_E SR = Country_PB_CountryCode_E_SR;
  static const CountryCode_E ST = Country_PB_CountryCode_E_ST;
  static const CountryCode_E SV = Country_PB_CountryCode_E_SV;
  static const CountryCode_E SY = Country_PB_CountryCode_E_SY;
  static const CountryCode_E SZ = Country_PB_CountryCode_E_SZ;
  static const CountryCode_E TC = Country_PB_CountryCode_E_TC;
  static const CountryCode_E TD = Country_PB_CountryCode_E_TD;
  static const CountryCode_E TF = Country_PB_CountryCode_E_TF;
  static const CountryCode_E TG = Country_PB_CountryCode_E_TG;
  static const CountryCode_E TH = Country_PB_CountryCode_E_TH;
  static const CountryCode_E TJ = Country_PB_CountryCode_E_TJ;
  static const CountryCode_E TK = Country_PB_CountryCode_E_TK;
  static const CountryCode_E TL = Country_PB_CountryCode_E_TL;
  static const CountryCode_E TM = Country_PB_CountryCode_E_TM;
  static const CountryCode_E TN = Country_PB_CountryCode_E_TN;
  static const CountryCode_E TO = Country_PB_CountryCode_E_TO;
  static const CountryCode_E TR = Country_PB_CountryCode_E_TR;
  static const CountryCode_E TT = Country_PB_CountryCode_E_TT;
  static const CountryCode_E TV = Country_PB_CountryCode_E_TV;
  static const CountryCode_E TW = Country_PB_CountryCode_E_TW;
  static const CountryCode_E TZ = Country_PB_CountryCode_E_TZ;
  static const CountryCode_E UA = Country_PB_CountryCode_E_UA;
  static const CountryCode_E UG = Country_PB_CountryCode_E_UG;
  static const CountryCode_E UK = Country_PB_CountryCode_E_UK;
  static const CountryCode_E UM = Country_PB_CountryCode_E_UM;
  static const CountryCode_E US = Country_PB_CountryCode_E_US;
  static const CountryCode_E UY = Country_PB_CountryCode_E_UY;
  static const CountryCode_E UZ = Country_PB_CountryCode_E_UZ;
  static const CountryCode_E VA = Country_PB_CountryCode_E_VA;
  static const CountryCode_E VC = Country_PB_CountryCode_E_VC;
  static const CountryCode_E VE = Country_PB_CountryCode_E_VE;
  static const CountryCode_E VG = Country_PB_CountryCode_E_VG;
  static const CountryCode_E VN = Country_PB_CountryCode_E_VN;
  static const CountryCode_E VU = Country_PB_CountryCode_E_VU;
  static const CountryCode_E WF = Country_PB_CountryCode_E_WF;
  static const CountryCode_E WS = Country_PB_CountryCode_E_WS;
  static const CountryCode_E YE = Country_PB_CountryCode_E_YE;
  static const CountryCode_E YT = Country_PB_CountryCode_E_YT;
  static const CountryCode_E ZA = Country_PB_CountryCode_E_ZA;
  static const CountryCode_E ZM = Country_PB_CountryCode_E_ZM;
  static const CountryCode_E ZW = Country_PB_CountryCode_E_ZW;
  static const CountryCode_E IM = Country_PB_CountryCode_E_IM;
  static const CountryCode_E JE = Country_PB_CountryCode_E_JE;
  static const CountryCode_E RS = Country_PB_CountryCode_E_RS;
  static const CountryCode_E VI = Country_PB_CountryCode_E_VI;
  static const CountryCode_E AX = Country_PB_CountryCode_E_AX;
  static const CountryCode_E GG = Country_PB_CountryCode_E_GG;
  static const CountryCode_E ME = Country_PB_CountryCode_E_ME;
  static const CountryCode_E STAR = Country_PB_CountryCode_E_STAR;
  static inline bool CountryCode_E_IsValid(int value) {
    return Country_PB_CountryCode_E_IsValid(value);
  }
  static const CountryCode_E CountryCode_E_MIN =
    Country_PB_CountryCode_E_CountryCode_E_MIN;
  static const CountryCode_E CountryCode_E_MAX =
    Country_PB_CountryCode_E_CountryCode_E_MAX;
  static const int CountryCode_E_ARRAYSIZE =
    Country_PB_CountryCode_E_CountryCode_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CountryCode_E_descriptor() {
    return Country_PB_CountryCode_E_descriptor();
  }
  static inline const ::std::string& CountryCode_E_Name(CountryCode_E value) {
    return Country_PB_CountryCode_E_Name(value);
  }
  static inline bool CountryCode_E_Parse(const ::std::string& name,
      CountryCode_E* value) {
    return Country_PB_CountryCode_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.geo.Country_PB.CountryCode_E country_code = 1 [default = UNKNOWN];
  inline bool has_country_code() const;
  inline void clear_country_code();
  static const int kCountryCodeFieldNumber = 1;
  inline ::rubicon::data::geo::Country_PB_CountryCode_E country_code() const;
  inline void set_country_code(::rubicon::data::geo::Country_PB_CountryCode_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.geo.Country_PB)
 private:
  inline void set_has_country_code();
  inline void clear_has_country_code();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int country_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_geo_2eproto();
  friend void protobuf_AssignDesc_geo_2eproto();
  friend void protobuf_ShutdownFile_geo_2eproto();
  
  void InitAsDefaultInstance();
  static Country_PB* default_instance_;
};
// -------------------------------------------------------------------

class Region_PB : public ::google::protobuf::Message {
 public:
  Region_PB();
  virtual ~Region_PB();
  
  Region_PB(const Region_PB& from);
  
  inline Region_PB& operator=(const Region_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Region_PB& default_instance();
  
  void Swap(Region_PB* other);
  
  // implements Message ----------------------------------------------
  
  Region_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Region_PB& from);
  void MergeFrom(const Region_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Region_PB_RegionCode_E RegionCode_E;
  static const RegionCode_E UNKNOWN = Region_PB_RegionCode_E_UNKNOWN;
  static const RegionCode_E AL = Region_PB_RegionCode_E_AL;
  static const RegionCode_E AK = Region_PB_RegionCode_E_AK;
  static const RegionCode_E AZ = Region_PB_RegionCode_E_AZ;
  static const RegionCode_E AR = Region_PB_RegionCode_E_AR;
  static const RegionCode_E CA = Region_PB_RegionCode_E_CA;
  static const RegionCode_E CO = Region_PB_RegionCode_E_CO;
  static const RegionCode_E CT = Region_PB_RegionCode_E_CT;
  static const RegionCode_E DE = Region_PB_RegionCode_E_DE;
  static const RegionCode_E FL = Region_PB_RegionCode_E_FL;
  static const RegionCode_E GA = Region_PB_RegionCode_E_GA;
  static const RegionCode_E HI = Region_PB_RegionCode_E_HI;
  static const RegionCode_E ID = Region_PB_RegionCode_E_ID;
  static const RegionCode_E IL = Region_PB_RegionCode_E_IL;
  static const RegionCode_E IN = Region_PB_RegionCode_E_IN;
  static const RegionCode_E IA = Region_PB_RegionCode_E_IA;
  static const RegionCode_E KS = Region_PB_RegionCode_E_KS;
  static const RegionCode_E KY = Region_PB_RegionCode_E_KY;
  static const RegionCode_E LA = Region_PB_RegionCode_E_LA;
  static const RegionCode_E ME = Region_PB_RegionCode_E_ME;
  static const RegionCode_E MD = Region_PB_RegionCode_E_MD;
  static const RegionCode_E MA = Region_PB_RegionCode_E_MA;
  static const RegionCode_E MI = Region_PB_RegionCode_E_MI;
  static const RegionCode_E MN = Region_PB_RegionCode_E_MN;
  static const RegionCode_E MS = Region_PB_RegionCode_E_MS;
  static const RegionCode_E MO = Region_PB_RegionCode_E_MO;
  static const RegionCode_E MT = Region_PB_RegionCode_E_MT;
  static const RegionCode_E NE = Region_PB_RegionCode_E_NE;
  static const RegionCode_E NV = Region_PB_RegionCode_E_NV;
  static const RegionCode_E NH = Region_PB_RegionCode_E_NH;
  static const RegionCode_E NJ = Region_PB_RegionCode_E_NJ;
  static const RegionCode_E NM = Region_PB_RegionCode_E_NM;
  static const RegionCode_E NY = Region_PB_RegionCode_E_NY;
  static const RegionCode_E NC = Region_PB_RegionCode_E_NC;
  static const RegionCode_E ND = Region_PB_RegionCode_E_ND;
  static const RegionCode_E OH = Region_PB_RegionCode_E_OH;
  static const RegionCode_E OK_ = Region_PB_RegionCode_E_OK_;
  static const RegionCode_E OR = Region_PB_RegionCode_E_OR;
  static const RegionCode_E PA = Region_PB_RegionCode_E_PA;
  static const RegionCode_E RI = Region_PB_RegionCode_E_RI;
  static const RegionCode_E SC = Region_PB_RegionCode_E_SC;
  static const RegionCode_E SD = Region_PB_RegionCode_E_SD;
  static const RegionCode_E TN = Region_PB_RegionCode_E_TN;
  static const RegionCode_E TX = Region_PB_RegionCode_E_TX;
  static const RegionCode_E UT = Region_PB_RegionCode_E_UT;
  static const RegionCode_E VT = Region_PB_RegionCode_E_VT;
  static const RegionCode_E VA = Region_PB_RegionCode_E_VA;
  static const RegionCode_E WA = Region_PB_RegionCode_E_WA;
  static const RegionCode_E WV = Region_PB_RegionCode_E_WV;
  static const RegionCode_E WI = Region_PB_RegionCode_E_WI;
  static const RegionCode_E WY = Region_PB_RegionCode_E_WY;
  static const RegionCode_E AB = Region_PB_RegionCode_E_AB;
  static const RegionCode_E AOL = Region_PB_RegionCode_E_AOL;
  static const RegionCode_E B = Region_PB_RegionCode_E_B;
  static const RegionCode_E BC = Region_PB_RegionCode_E_BC;
  static const RegionCode_E BE = Region_PB_RegionCode_E_BE;
  static const RegionCode_E BR = Region_PB_RegionCode_E_BR;
  static const RegionCode_E BW = Region_PB_RegionCode_E_BW;
  static const RegionCode_E BY = Region_PB_RegionCode_E_BY;
  static const RegionCode_E C = Region_PB_RegionCode_E_C;
  static const RegionCode_E D = Region_PB_RegionCode_E_D;
  static const RegionCode_E DC = Region_PB_RegionCode_E_DC;
  static const RegionCode_E E = Region_PB_RegionCode_E_E;
  static const RegionCode_E ENG = Region_PB_RegionCode_E_ENG;
  static const RegionCode_E F = Region_PB_RegionCode_E_F;
  static const RegionCode_E G = Region_PB_RegionCode_E_G;
  static const RegionCode_E H = Region_PB_RegionCode_E_H;
  static const RegionCode_E HB = Region_PB_RegionCode_E_HB;
  static const RegionCode_E HE = Region_PB_RegionCode_E_HE;
  static const RegionCode_E HH = Region_PB_RegionCode_E_HH;
  static const RegionCode_E I = Region_PB_RegionCode_E_I;
  static const RegionCode_E J = Region_PB_RegionCode_E_J;
  static const RegionCode_E K = Region_PB_RegionCode_E_K;
  static const RegionCode_E L = Region_PB_RegionCode_E_L;
  static const RegionCode_E M = Region_PB_RegionCode_E_M;
  static const RegionCode_E MB = Region_PB_RegionCode_E_MB;
  static const RegionCode_E MV = Region_PB_RegionCode_E_MV;
  static const RegionCode_E N = Region_PB_RegionCode_E_N;
  static const RegionCode_E NB = Region_PB_RegionCode_E_NB;
  static const RegionCode_E NF = Region_PB_RegionCode_E_NF;
  static const RegionCode_E NI = Region_PB_RegionCode_E_NI;
  static const RegionCode_E NIR = Region_PB_RegionCode_E_NIR;
  static const RegionCode_E NS = Region_PB_RegionCode_E_NS;
  static const RegionCode_E NT = Region_PB_RegionCode_E_NT;
  static const RegionCode_E NU = Region_PB_RegionCode_E_NU;
  static const RegionCode_E NW = Region_PB_RegionCode_E_NW;
  static const RegionCode_E O = Region_PB_RegionCode_E_O;
  static const RegionCode_E ON = Region_PB_RegionCode_E_ON;
  static const RegionCode_E P = Region_PB_RegionCode_E_P;
  static const RegionCode_E PE = Region_PB_RegionCode_E_PE;
  static const RegionCode_E Q = Region_PB_RegionCode_E_Q;
  static const RegionCode_E QC = Region_PB_RegionCode_E_QC;
  static const RegionCode_E QL = Region_PB_RegionCode_E_QL;
  static const RegionCode_E R = Region_PB_RegionCode_E_R;
  static const RegionCode_E RP = Region_PB_RegionCode_E_RP;
  static const RegionCode_E S = Region_PB_RegionCode_E_S;
  static const RegionCode_E SA = Region_PB_RegionCode_E_SA;
  static const RegionCode_E SH = Region_PB_RegionCode_E_SH;
  static const RegionCode_E SK = Region_PB_RegionCode_E_SK;
  static const RegionCode_E SL = Region_PB_RegionCode_E_SL;
  static const RegionCode_E SN = Region_PB_RegionCode_E_SN;
  static const RegionCode_E ST = Region_PB_RegionCode_E_ST;
  static const RegionCode_E T = Region_PB_RegionCode_E_T;
  static const RegionCode_E TH = Region_PB_RegionCode_E_TH;
  static const RegionCode_E TS = Region_PB_RegionCode_E_TS;
  static const RegionCode_E U = Region_PB_RegionCode_E_U;
  static const RegionCode_E V = Region_PB_RegionCode_E_V;
  static const RegionCode_E VI = Region_PB_RegionCode_E_VI;
  static const RegionCode_E WLS = Region_PB_RegionCode_E_WLS;
  static const RegionCode_E YT = Region_PB_RegionCode_E_YT;
  static inline bool RegionCode_E_IsValid(int value) {
    return Region_PB_RegionCode_E_IsValid(value);
  }
  static const RegionCode_E RegionCode_E_MIN =
    Region_PB_RegionCode_E_RegionCode_E_MIN;
  static const RegionCode_E RegionCode_E_MAX =
    Region_PB_RegionCode_E_RegionCode_E_MAX;
  static const int RegionCode_E_ARRAYSIZE =
    Region_PB_RegionCode_E_RegionCode_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RegionCode_E_descriptor() {
    return Region_PB_RegionCode_E_descriptor();
  }
  static inline const ::std::string& RegionCode_E_Name(RegionCode_E value) {
    return Region_PB_RegionCode_E_Name(value);
  }
  static inline bool RegionCode_E_Parse(const ::std::string& name,
      RegionCode_E* value) {
    return Region_PB_RegionCode_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.geo.Region_PB.RegionCode_E region_code = 1 [default = UNKNOWN];
  inline bool has_region_code() const;
  inline void clear_region_code();
  static const int kRegionCodeFieldNumber = 1;
  inline ::rubicon::data::geo::Region_PB_RegionCode_E region_code() const;
  inline void set_region_code(::rubicon::data::geo::Region_PB_RegionCode_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.geo.Region_PB)
 private:
  inline void set_has_region_code();
  inline void clear_has_region_code();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int region_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_geo_2eproto();
  friend void protobuf_AssignDesc_geo_2eproto();
  friend void protobuf_ShutdownFile_geo_2eproto();
  
  void InitAsDefaultInstance();
  static Region_PB* default_instance_;
};
// -------------------------------------------------------------------

class Speed_PB : public ::google::protobuf::Message {
 public:
  Speed_PB();
  virtual ~Speed_PB();
  
  Speed_PB(const Speed_PB& from);
  
  inline Speed_PB& operator=(const Speed_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Speed_PB& default_instance();
  
  void Swap(Speed_PB* other);
  
  // implements Message ----------------------------------------------
  
  Speed_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Speed_PB& from);
  void MergeFrom(const Speed_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Speed_PB_SpeedType_E SpeedType_E;
  static const SpeedType_E UNKNOWN = Speed_PB_SpeedType_E_UNKNOWN;
  static const SpeedType_E DIALUP = Speed_PB_SpeedType_E_DIALUP;
  static const SpeedType_E BROADBAND = Speed_PB_SpeedType_E_BROADBAND;
  static const SpeedType_E CABLE = Speed_PB_SpeedType_E_CABLE;
  static const SpeedType_E XSDL = Speed_PB_SpeedType_E_XSDL;
  static const SpeedType_E T1 = Speed_PB_SpeedType_E_T1;
  static const SpeedType_E T3 = Speed_PB_SpeedType_E_T3;
  static const SpeedType_E OC3 = Speed_PB_SpeedType_E_OC3;
  static const SpeedType_E OC12 = Speed_PB_SpeedType_E_OC12;
  static const SpeedType_E SATELLITE = Speed_PB_SpeedType_E_SATELLITE;
  static const SpeedType_E WIRELESS = Speed_PB_SpeedType_E_WIRELESS;
  static const SpeedType_E MOBILE = Speed_PB_SpeedType_E_MOBILE;
  static inline bool SpeedType_E_IsValid(int value) {
    return Speed_PB_SpeedType_E_IsValid(value);
  }
  static const SpeedType_E SpeedType_E_MIN =
    Speed_PB_SpeedType_E_SpeedType_E_MIN;
  static const SpeedType_E SpeedType_E_MAX =
    Speed_PB_SpeedType_E_SpeedType_E_MAX;
  static const int SpeedType_E_ARRAYSIZE =
    Speed_PB_SpeedType_E_SpeedType_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpeedType_E_descriptor() {
    return Speed_PB_SpeedType_E_descriptor();
  }
  static inline const ::std::string& SpeedType_E_Name(SpeedType_E value) {
    return Speed_PB_SpeedType_E_Name(value);
  }
  static inline bool SpeedType_E_Parse(const ::std::string& name,
      SpeedType_E* value) {
    return Speed_PB_SpeedType_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.geo.Speed_PB.SpeedType_E type = 1 [default = UNKNOWN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rubicon::data::geo::Speed_PB_SpeedType_E type() const;
  inline void set_type(::rubicon::data::geo::Speed_PB_SpeedType_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.geo.Speed_PB)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_geo_2eproto();
  friend void protobuf_AssignDesc_geo_2eproto();
  friend void protobuf_ShutdownFile_geo_2eproto();
  
  void InitAsDefaultInstance();
  static Speed_PB* default_instance_;
};
// -------------------------------------------------------------------

class Geo_PB : public ::google::protobuf::Message {
 public:
  Geo_PB();
  virtual ~Geo_PB();
  
  Geo_PB(const Geo_PB& from);
  
  inline Geo_PB& operator=(const Geo_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Geo_PB& default_instance();
  
  void Swap(Geo_PB* other);
  
  // implements Message ----------------------------------------------
  
  Geo_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geo_PB& from);
  void MergeFrom(const Geo_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string isp_name = 1;
  inline bool has_isp_name() const;
  inline void clear_isp_name();
  static const int kIspNameFieldNumber = 1;
  inline const ::std::string& isp_name() const;
  inline void set_isp_name(const ::std::string& value);
  inline void set_isp_name(const char* value);
  inline void set_isp_name(const char* value, size_t size);
  inline ::std::string* mutable_isp_name();
  inline ::std::string* release_isp_name();
  
  // optional .rubicon.data.geo.Speed_PB connection_speed = 2;
  inline bool has_connection_speed() const;
  inline void clear_connection_speed();
  static const int kConnectionSpeedFieldNumber = 2;
  inline const ::rubicon::data::geo::Speed_PB& connection_speed() const;
  inline ::rubicon::data::geo::Speed_PB* mutable_connection_speed();
  inline ::rubicon::data::geo::Speed_PB* release_connection_speed();
  
  // optional .rubicon.data.geo.Continent_PB continent = 3;
  inline bool has_continent() const;
  inline void clear_continent();
  static const int kContinentFieldNumber = 3;
  inline const ::rubicon::data::geo::Continent_PB& continent() const;
  inline ::rubicon::data::geo::Continent_PB* mutable_continent();
  inline ::rubicon::data::geo::Continent_PB* release_continent();
  
  // optional .rubicon.data.geo.Country_PB country = 4;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 4;
  inline const ::rubicon::data::geo::Country_PB& country() const;
  inline ::rubicon::data::geo::Country_PB* mutable_country();
  inline ::rubicon::data::geo::Country_PB* release_country();
  
  // optional .rubicon.data.geo.Region_PB deprecated_region = 5;
  inline bool has_deprecated_region() const;
  inline void clear_deprecated_region();
  static const int kDeprecatedRegionFieldNumber = 5;
  inline const ::rubicon::data::geo::Region_PB& deprecated_region() const;
  inline ::rubicon::data::geo::Region_PB* mutable_deprecated_region();
  inline ::rubicon::data::geo::Region_PB* release_deprecated_region();
  
  // optional string metro = 6;
  inline bool has_metro() const;
  inline void clear_metro();
  static const int kMetroFieldNumber = 6;
  inline const ::std::string& metro() const;
  inline void set_metro(const ::std::string& value);
  inline void set_metro(const char* value);
  inline void set_metro(const char* value, size_t size);
  inline ::std::string* mutable_metro();
  inline ::std::string* release_metro();
  
  // optional string city = 7;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 7;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  
  // optional string zip_code = 8;
  inline bool has_zip_code() const;
  inline void clear_zip_code();
  static const int kZipCodeFieldNumber = 8;
  inline const ::std::string& zip_code() const;
  inline void set_zip_code(const ::std::string& value);
  inline void set_zip_code(const char* value);
  inline void set_zip_code(const char* value, size_t size);
  inline ::std::string* mutable_zip_code();
  inline ::std::string* release_zip_code();
  
  // optional .rubicon.data.common.AnUInt32_PB area_code = 9;
  inline bool has_area_code() const;
  inline void clear_area_code();
  static const int kAreaCodeFieldNumber = 9;
  inline const ::rubicon::data::common::AnUInt32_PB& area_code() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_area_code();
  inline ::rubicon::data::common::AnUInt32_PB* release_area_code();
  
  // optional .rubicon.data.common.AnInt32_PB gmt_offset = 10;
  inline bool has_gmt_offset() const;
  inline void clear_gmt_offset();
  static const int kGmtOffsetFieldNumber = 10;
  inline const ::rubicon::data::common::AnInt32_PB& gmt_offset() const;
  inline ::rubicon::data::common::AnInt32_PB* mutable_gmt_offset();
  inline ::rubicon::data::common::AnInt32_PB* release_gmt_offset();
  
  // optional string domain_name = 11;
  inline bool has_domain_name() const;
  inline void clear_domain_name();
  static const int kDomainNameFieldNumber = 11;
  inline const ::std::string& domain_name() const;
  inline void set_domain_name(const ::std::string& value);
  inline void set_domain_name(const char* value);
  inline void set_domain_name(const char* value, size_t size);
  inline ::std::string* mutable_domain_name();
  inline ::std::string* release_domain_name();
  
  // optional string region = 12;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 12;
  inline const ::std::string& region() const;
  inline void set_region(const ::std::string& value);
  inline void set_region(const char* value);
  inline void set_region(const char* value, size_t size);
  inline ::std::string* mutable_region();
  inline ::std::string* release_region();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.geo.Geo_PB)
 private:
  inline void set_has_isp_name();
  inline void clear_has_isp_name();
  inline void set_has_connection_speed();
  inline void clear_has_connection_speed();
  inline void set_has_continent();
  inline void clear_has_continent();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_deprecated_region();
  inline void clear_has_deprecated_region();
  inline void set_has_metro();
  inline void clear_has_metro();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_zip_code();
  inline void clear_has_zip_code();
  inline void set_has_area_code();
  inline void clear_has_area_code();
  inline void set_has_gmt_offset();
  inline void clear_has_gmt_offset();
  inline void set_has_domain_name();
  inline void clear_has_domain_name();
  inline void set_has_region();
  inline void clear_has_region();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* isp_name_;
  ::rubicon::data::geo::Speed_PB* connection_speed_;
  ::rubicon::data::geo::Continent_PB* continent_;
  ::rubicon::data::geo::Country_PB* country_;
  ::rubicon::data::geo::Region_PB* deprecated_region_;
  ::std::string* metro_;
  ::std::string* city_;
  ::std::string* zip_code_;
  ::rubicon::data::common::AnUInt32_PB* area_code_;
  ::rubicon::data::common::AnInt32_PB* gmt_offset_;
  ::std::string* domain_name_;
  ::std::string* region_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_geo_2eproto();
  friend void protobuf_AssignDesc_geo_2eproto();
  friend void protobuf_ShutdownFile_geo_2eproto();
  
  void InitAsDefaultInstance();
  static Geo_PB* default_instance_;
};
// ===================================================================


// ===================================================================

// Continent_PB

// optional .rubicon.data.geo.Continent_PB.ContinentCode_E continent_code = 1 [default = UNKNOWN];
inline bool Continent_PB::has_continent_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Continent_PB::set_has_continent_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Continent_PB::clear_has_continent_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Continent_PB::clear_continent_code() {
  continent_code_ = 0;
  clear_has_continent_code();
}
inline ::rubicon::data::geo::Continent_PB_ContinentCode_E Continent_PB::continent_code() const {
  return static_cast< ::rubicon::data::geo::Continent_PB_ContinentCode_E >(continent_code_);
}
inline void Continent_PB::set_continent_code(::rubicon::data::geo::Continent_PB_ContinentCode_E value) {
  GOOGLE_DCHECK(::rubicon::data::geo::Continent_PB_ContinentCode_E_IsValid(value));
  set_has_continent_code();
  continent_code_ = value;
}

// optional string raw_value = 2;
inline bool Continent_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Continent_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Continent_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Continent_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& Continent_PB::raw_value() const {
  return *raw_value_;
}
inline void Continent_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Continent_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Continent_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Continent_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* Continent_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Country_PB

// optional .rubicon.data.geo.Country_PB.CountryCode_E country_code = 1 [default = UNKNOWN];
inline bool Country_PB::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Country_PB::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Country_PB::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Country_PB::clear_country_code() {
  country_code_ = 0;
  clear_has_country_code();
}
inline ::rubicon::data::geo::Country_PB_CountryCode_E Country_PB::country_code() const {
  return static_cast< ::rubicon::data::geo::Country_PB_CountryCode_E >(country_code_);
}
inline void Country_PB::set_country_code(::rubicon::data::geo::Country_PB_CountryCode_E value) {
  GOOGLE_DCHECK(::rubicon::data::geo::Country_PB_CountryCode_E_IsValid(value));
  set_has_country_code();
  country_code_ = value;
}

// optional string raw_value = 2;
inline bool Country_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Country_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Country_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Country_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& Country_PB::raw_value() const {
  return *raw_value_;
}
inline void Country_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Country_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Country_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Country_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* Country_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Region_PB

// optional .rubicon.data.geo.Region_PB.RegionCode_E region_code = 1 [default = UNKNOWN];
inline bool Region_PB::has_region_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Region_PB::set_has_region_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Region_PB::clear_has_region_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Region_PB::clear_region_code() {
  region_code_ = 0;
  clear_has_region_code();
}
inline ::rubicon::data::geo::Region_PB_RegionCode_E Region_PB::region_code() const {
  return static_cast< ::rubicon::data::geo::Region_PB_RegionCode_E >(region_code_);
}
inline void Region_PB::set_region_code(::rubicon::data::geo::Region_PB_RegionCode_E value) {
  GOOGLE_DCHECK(::rubicon::data::geo::Region_PB_RegionCode_E_IsValid(value));
  set_has_region_code();
  region_code_ = value;
}

// optional string raw_value = 2;
inline bool Region_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Region_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Region_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Region_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& Region_PB::raw_value() const {
  return *raw_value_;
}
inline void Region_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Region_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Region_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Region_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* Region_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Speed_PB

// optional .rubicon.data.geo.Speed_PB.SpeedType_E type = 1 [default = UNKNOWN];
inline bool Speed_PB::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Speed_PB::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Speed_PB::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Speed_PB::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::rubicon::data::geo::Speed_PB_SpeedType_E Speed_PB::type() const {
  return static_cast< ::rubicon::data::geo::Speed_PB_SpeedType_E >(type_);
}
inline void Speed_PB::set_type(::rubicon::data::geo::Speed_PB_SpeedType_E value) {
  GOOGLE_DCHECK(::rubicon::data::geo::Speed_PB_SpeedType_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string raw_value = 2;
inline bool Speed_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Speed_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Speed_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Speed_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& Speed_PB::raw_value() const {
  return *raw_value_;
}
inline void Speed_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Speed_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void Speed_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Speed_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* Speed_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Geo_PB

// optional string isp_name = 1;
inline bool Geo_PB::has_isp_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geo_PB::set_has_isp_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geo_PB::clear_has_isp_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geo_PB::clear_isp_name() {
  if (isp_name_ != &::google::protobuf::internal::kEmptyString) {
    isp_name_->clear();
  }
  clear_has_isp_name();
}
inline const ::std::string& Geo_PB::isp_name() const {
  return *isp_name_;
}
inline void Geo_PB::set_isp_name(const ::std::string& value) {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::kEmptyString) {
    isp_name_ = new ::std::string;
  }
  isp_name_->assign(value);
}
inline void Geo_PB::set_isp_name(const char* value) {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::kEmptyString) {
    isp_name_ = new ::std::string;
  }
  isp_name_->assign(value);
}
inline void Geo_PB::set_isp_name(const char* value, size_t size) {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::kEmptyString) {
    isp_name_ = new ::std::string;
  }
  isp_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Geo_PB::mutable_isp_name() {
  set_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::kEmptyString) {
    isp_name_ = new ::std::string;
  }
  return isp_name_;
}
inline ::std::string* Geo_PB::release_isp_name() {
  clear_has_isp_name();
  if (isp_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isp_name_;
    isp_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .rubicon.data.geo.Speed_PB connection_speed = 2;
inline bool Geo_PB::has_connection_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geo_PB::set_has_connection_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geo_PB::clear_has_connection_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geo_PB::clear_connection_speed() {
  if (connection_speed_ != NULL) connection_speed_->::rubicon::data::geo::Speed_PB::Clear();
  clear_has_connection_speed();
}
inline const ::rubicon::data::geo::Speed_PB& Geo_PB::connection_speed() const {
  return connection_speed_ != NULL ? *connection_speed_ : *default_instance_->connection_speed_;
}
inline ::rubicon::data::geo::Speed_PB* Geo_PB::mutable_connection_speed() {
  set_has_connection_speed();
  if (connection_speed_ == NULL) connection_speed_ = new ::rubicon::data::geo::Speed_PB;
  return connection_speed_;
}
inline ::rubicon::data::geo::Speed_PB* Geo_PB::release_connection_speed() {
  clear_has_connection_speed();
  ::rubicon::data::geo::Speed_PB* temp = connection_speed_;
  connection_speed_ = NULL;
  return temp;
}

// optional .rubicon.data.geo.Continent_PB continent = 3;
inline bool Geo_PB::has_continent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geo_PB::set_has_continent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geo_PB::clear_has_continent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geo_PB::clear_continent() {
  if (continent_ != NULL) continent_->::rubicon::data::geo::Continent_PB::Clear();
  clear_has_continent();
}
inline const ::rubicon::data::geo::Continent_PB& Geo_PB::continent() const {
  return continent_ != NULL ? *continent_ : *default_instance_->continent_;
}
inline ::rubicon::data::geo::Continent_PB* Geo_PB::mutable_continent() {
  set_has_continent();
  if (continent_ == NULL) continent_ = new ::rubicon::data::geo::Continent_PB;
  return continent_;
}
inline ::rubicon::data::geo::Continent_PB* Geo_PB::release_continent() {
  clear_has_continent();
  ::rubicon::data::geo::Continent_PB* temp = continent_;
  continent_ = NULL;
  return temp;
}

// optional .rubicon.data.geo.Country_PB country = 4;
inline bool Geo_PB::has_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geo_PB::set_has_country() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geo_PB::clear_has_country() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geo_PB::clear_country() {
  if (country_ != NULL) country_->::rubicon::data::geo::Country_PB::Clear();
  clear_has_country();
}
inline const ::rubicon::data::geo::Country_PB& Geo_PB::country() const {
  return country_ != NULL ? *country_ : *default_instance_->country_;
}
inline ::rubicon::data::geo::Country_PB* Geo_PB::mutable_country() {
  set_has_country();
  if (country_ == NULL) country_ = new ::rubicon::data::geo::Country_PB;
  return country_;
}
inline ::rubicon::data::geo::Country_PB* Geo_PB::release_country() {
  clear_has_country();
  ::rubicon::data::geo::Country_PB* temp = country_;
  country_ = NULL;
  return temp;
}

// optional .rubicon.data.geo.Region_PB deprecated_region = 5;
inline bool Geo_PB::has_deprecated_region() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Geo_PB::set_has_deprecated_region() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Geo_PB::clear_has_deprecated_region() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Geo_PB::clear_deprecated_region() {
  if (deprecated_region_ != NULL) deprecated_region_->::rubicon::data::geo::Region_PB::Clear();
  clear_has_deprecated_region();
}
inline const ::rubicon::data::geo::Region_PB& Geo_PB::deprecated_region() const {
  return deprecated_region_ != NULL ? *deprecated_region_ : *default_instance_->deprecated_region_;
}
inline ::rubicon::data::geo::Region_PB* Geo_PB::mutable_deprecated_region() {
  set_has_deprecated_region();
  if (deprecated_region_ == NULL) deprecated_region_ = new ::rubicon::data::geo::Region_PB;
  return deprecated_region_;
}
inline ::rubicon::data::geo::Region_PB* Geo_PB::release_deprecated_region() {
  clear_has_deprecated_region();
  ::rubicon::data::geo::Region_PB* temp = deprecated_region_;
  deprecated_region_ = NULL;
  return temp;
}

// optional string metro = 6;
inline bool Geo_PB::has_metro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Geo_PB::set_has_metro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Geo_PB::clear_has_metro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Geo_PB::clear_metro() {
  if (metro_ != &::google::protobuf::internal::kEmptyString) {
    metro_->clear();
  }
  clear_has_metro();
}
inline const ::std::string& Geo_PB::metro() const {
  return *metro_;
}
inline void Geo_PB::set_metro(const ::std::string& value) {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::kEmptyString) {
    metro_ = new ::std::string;
  }
  metro_->assign(value);
}
inline void Geo_PB::set_metro(const char* value) {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::kEmptyString) {
    metro_ = new ::std::string;
  }
  metro_->assign(value);
}
inline void Geo_PB::set_metro(const char* value, size_t size) {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::kEmptyString) {
    metro_ = new ::std::string;
  }
  metro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Geo_PB::mutable_metro() {
  set_has_metro();
  if (metro_ == &::google::protobuf::internal::kEmptyString) {
    metro_ = new ::std::string;
  }
  return metro_;
}
inline ::std::string* Geo_PB::release_metro() {
  clear_has_metro();
  if (metro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = metro_;
    metro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string city = 7;
inline bool Geo_PB::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Geo_PB::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Geo_PB::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Geo_PB::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& Geo_PB::city() const {
  return *city_;
}
inline void Geo_PB::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void Geo_PB::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void Geo_PB::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Geo_PB::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* Geo_PB::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string zip_code = 8;
inline bool Geo_PB::has_zip_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Geo_PB::set_has_zip_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Geo_PB::clear_has_zip_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Geo_PB::clear_zip_code() {
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    zip_code_->clear();
  }
  clear_has_zip_code();
}
inline const ::std::string& Geo_PB::zip_code() const {
  return *zip_code_;
}
inline void Geo_PB::set_zip_code(const ::std::string& value) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(value);
}
inline void Geo_PB::set_zip_code(const char* value) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(value);
}
inline void Geo_PB::set_zip_code(const char* value, size_t size) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Geo_PB::mutable_zip_code() {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  return zip_code_;
}
inline ::std::string* Geo_PB::release_zip_code() {
  clear_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zip_code_;
    zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .rubicon.data.common.AnUInt32_PB area_code = 9;
inline bool Geo_PB::has_area_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Geo_PB::set_has_area_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Geo_PB::clear_has_area_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Geo_PB::clear_area_code() {
  if (area_code_ != NULL) area_code_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_area_code();
}
inline const ::rubicon::data::common::AnUInt32_PB& Geo_PB::area_code() const {
  return area_code_ != NULL ? *area_code_ : *default_instance_->area_code_;
}
inline ::rubicon::data::common::AnUInt32_PB* Geo_PB::mutable_area_code() {
  set_has_area_code();
  if (area_code_ == NULL) area_code_ = new ::rubicon::data::common::AnUInt32_PB;
  return area_code_;
}
inline ::rubicon::data::common::AnUInt32_PB* Geo_PB::release_area_code() {
  clear_has_area_code();
  ::rubicon::data::common::AnUInt32_PB* temp = area_code_;
  area_code_ = NULL;
  return temp;
}

// optional .rubicon.data.common.AnInt32_PB gmt_offset = 10;
inline bool Geo_PB::has_gmt_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Geo_PB::set_has_gmt_offset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Geo_PB::clear_has_gmt_offset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Geo_PB::clear_gmt_offset() {
  if (gmt_offset_ != NULL) gmt_offset_->::rubicon::data::common::AnInt32_PB::Clear();
  clear_has_gmt_offset();
}
inline const ::rubicon::data::common::AnInt32_PB& Geo_PB::gmt_offset() const {
  return gmt_offset_ != NULL ? *gmt_offset_ : *default_instance_->gmt_offset_;
}
inline ::rubicon::data::common::AnInt32_PB* Geo_PB::mutable_gmt_offset() {
  set_has_gmt_offset();
  if (gmt_offset_ == NULL) gmt_offset_ = new ::rubicon::data::common::AnInt32_PB;
  return gmt_offset_;
}
inline ::rubicon::data::common::AnInt32_PB* Geo_PB::release_gmt_offset() {
  clear_has_gmt_offset();
  ::rubicon::data::common::AnInt32_PB* temp = gmt_offset_;
  gmt_offset_ = NULL;
  return temp;
}

// optional string domain_name = 11;
inline bool Geo_PB::has_domain_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Geo_PB::set_has_domain_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Geo_PB::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Geo_PB::clear_domain_name() {
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    domain_name_->clear();
  }
  clear_has_domain_name();
}
inline const ::std::string& Geo_PB::domain_name() const {
  return *domain_name_;
}
inline void Geo_PB::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void Geo_PB::set_domain_name(const char* value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void Geo_PB::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Geo_PB::mutable_domain_name() {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  return domain_name_;
}
inline ::std::string* Geo_PB::release_domain_name() {
  clear_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_name_;
    domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string region = 12;
inline bool Geo_PB::has_region() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Geo_PB::set_has_region() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Geo_PB::clear_has_region() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Geo_PB::clear_region() {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    region_->clear();
  }
  clear_has_region();
}
inline const ::std::string& Geo_PB::region() const {
  return *region_;
}
inline void Geo_PB::set_region(const ::std::string& value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void Geo_PB::set_region(const char* value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void Geo_PB::set_region(const char* value, size_t size) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Geo_PB::mutable_region() {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  return region_;
}
inline ::std::string* Geo_PB::release_region() {
  clear_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_;
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace geo
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::geo::Continent_PB_ContinentCode_E>() {
  return ::rubicon::data::geo::Continent_PB_ContinentCode_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::geo::Country_PB_CountryCode_E>() {
  return ::rubicon::data::geo::Country_PB_CountryCode_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::geo::Region_PB_RegionCode_E>() {
  return ::rubicon::data::geo::Region_PB_RegionCode_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::geo::Speed_PB_SpeedType_E>() {
  return ::rubicon::data::geo::Speed_PB_SpeedType_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geo_2eproto__INCLUDED
