// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ae_inventory.proto

#ifndef PROTOBUF_ae_5finventory_2eproto__INCLUDED
#define PROTOBUF_ae_5finventory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "num_types.pb.h"
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ae_5finventory_2eproto();
void protobuf_AssignDesc_ae_5finventory_2eproto();
void protobuf_ShutdownFile_ae_5finventory_2eproto();

class Inventory_PB;

// ===================================================================

class Inventory_PB : public ::google::protobuf::Message {
 public:
  Inventory_PB();
  virtual ~Inventory_PB();
  
  Inventory_PB(const Inventory_PB& from);
  
  inline Inventory_PB& operator=(const Inventory_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Inventory_PB& default_instance();
  
  void Swap(Inventory_PB* other);
  
  // implements Message ----------------------------------------------
  
  Inventory_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Inventory_PB& from);
  void MergeFrom(const Inventory_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.common.AnUInt32_PB account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline const ::rubicon::data::common::AnUInt32_PB& account_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_account_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_account_id();
  
  // optional .rubicon.data.common.AnUInt32_PB site_id = 2;
  inline bool has_site_id() const;
  inline void clear_site_id();
  static const int kSiteIdFieldNumber = 2;
  inline const ::rubicon::data::common::AnUInt32_PB& site_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_site_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_site_id();
  
  // optional .rubicon.data.common.AnUInt32_PB zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline const ::rubicon::data::common::AnUInt32_PB& zone_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_zone_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_zone_id();
  
  // optional .rubicon.data.common.AnUInt32_PB size_id = 4;
  inline bool has_size_id() const;
  inline void clear_size_id();
  static const int kSizeIdFieldNumber = 4;
  inline const ::rubicon::data::common::AnUInt32_PB& size_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_size_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_size_id();
  
  // optional .rubicon.data.common.AnUInt32_PB zonesize_id = 5;
  inline bool has_zonesize_id() const;
  inline void clear_zonesize_id();
  static const int kZonesizeIdFieldNumber = 5;
  inline const ::rubicon::data::common::AnUInt32_PB& zonesize_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_zonesize_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_zonesize_id();
  
  // optional string zone_size_str = 6;
  inline bool has_zone_size_str() const;
  inline void clear_zone_size_str();
  static const int kZoneSizeStrFieldNumber = 6;
  inline const ::std::string& zone_size_str() const;
  inline void set_zone_size_str(const ::std::string& value);
  inline void set_zone_size_str(const char* value);
  inline void set_zone_size_str(const char* value, size_t size);
  inline ::std::string* mutable_zone_size_str();
  inline ::std::string* release_zone_size_str();
  
  // optional .rubicon.data.common.AnUInt32_PB org_zone_id = 7;
  inline bool has_org_zone_id() const;
  inline void clear_org_zone_id();
  static const int kOrgZoneIdFieldNumber = 7;
  inline const ::rubicon::data::common::AnUInt32_PB& org_zone_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_org_zone_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_org_zone_id();
  
  // optional .rubicon.data.common.AnUInt32_PB org_size_id = 8;
  inline bool has_org_size_id() const;
  inline void clear_org_size_id();
  static const int kOrgSizeIdFieldNumber = 8;
  inline const ::rubicon::data::common::AnUInt32_PB& org_size_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_org_size_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_org_size_id();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.Inventory_PB)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_site_id();
  inline void clear_has_site_id();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_size_id();
  inline void clear_has_size_id();
  inline void set_has_zonesize_id();
  inline void clear_has_zonesize_id();
  inline void set_has_zone_size_str();
  inline void clear_has_zone_size_str();
  inline void set_has_org_zone_id();
  inline void clear_has_org_zone_id();
  inline void set_has_org_size_id();
  inline void clear_has_org_size_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::common::AnUInt32_PB* account_id_;
  ::rubicon::data::common::AnUInt32_PB* site_id_;
  ::rubicon::data::common::AnUInt32_PB* zone_id_;
  ::rubicon::data::common::AnUInt32_PB* size_id_;
  ::rubicon::data::common::AnUInt32_PB* zonesize_id_;
  ::std::string* zone_size_str_;
  ::rubicon::data::common::AnUInt32_PB* org_zone_id_;
  ::rubicon::data::common::AnUInt32_PB* org_size_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5finventory_2eproto();
  friend void protobuf_AssignDesc_ae_5finventory_2eproto();
  friend void protobuf_ShutdownFile_ae_5finventory_2eproto();
  
  void InitAsDefaultInstance();
  static Inventory_PB* default_instance_;
};
// ===================================================================


// ===================================================================

// Inventory_PB

// optional .rubicon.data.common.AnUInt32_PB account_id = 1;
inline bool Inventory_PB::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Inventory_PB::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Inventory_PB::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Inventory_PB::clear_account_id() {
  if (account_id_ != NULL) account_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_account_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::account_id() const {
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return account_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_account_id() {
  clear_has_account_id();
  ::rubicon::data::common::AnUInt32_PB* temp = account_id_;
  account_id_ = NULL;
  return temp;
}

// optional .rubicon.data.common.AnUInt32_PB site_id = 2;
inline bool Inventory_PB::has_site_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Inventory_PB::set_has_site_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Inventory_PB::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Inventory_PB::clear_site_id() {
  if (site_id_ != NULL) site_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_site_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::site_id() const {
  return site_id_ != NULL ? *site_id_ : *default_instance_->site_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_site_id() {
  set_has_site_id();
  if (site_id_ == NULL) site_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return site_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_site_id() {
  clear_has_site_id();
  ::rubicon::data::common::AnUInt32_PB* temp = site_id_;
  site_id_ = NULL;
  return temp;
}

// optional .rubicon.data.common.AnUInt32_PB zone_id = 3;
inline bool Inventory_PB::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Inventory_PB::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Inventory_PB::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Inventory_PB::clear_zone_id() {
  if (zone_id_ != NULL) zone_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_zone_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::zone_id() const {
  return zone_id_ != NULL ? *zone_id_ : *default_instance_->zone_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_zone_id() {
  set_has_zone_id();
  if (zone_id_ == NULL) zone_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return zone_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_zone_id() {
  clear_has_zone_id();
  ::rubicon::data::common::AnUInt32_PB* temp = zone_id_;
  zone_id_ = NULL;
  return temp;
}

// optional .rubicon.data.common.AnUInt32_PB size_id = 4;
inline bool Inventory_PB::has_size_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Inventory_PB::set_has_size_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Inventory_PB::clear_has_size_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Inventory_PB::clear_size_id() {
  if (size_id_ != NULL) size_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_size_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::size_id() const {
  return size_id_ != NULL ? *size_id_ : *default_instance_->size_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_size_id() {
  set_has_size_id();
  if (size_id_ == NULL) size_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return size_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_size_id() {
  clear_has_size_id();
  ::rubicon::data::common::AnUInt32_PB* temp = size_id_;
  size_id_ = NULL;
  return temp;
}

// optional .rubicon.data.common.AnUInt32_PB zonesize_id = 5;
inline bool Inventory_PB::has_zonesize_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Inventory_PB::set_has_zonesize_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Inventory_PB::clear_has_zonesize_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Inventory_PB::clear_zonesize_id() {
  if (zonesize_id_ != NULL) zonesize_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_zonesize_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::zonesize_id() const {
  return zonesize_id_ != NULL ? *zonesize_id_ : *default_instance_->zonesize_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_zonesize_id() {
  set_has_zonesize_id();
  if (zonesize_id_ == NULL) zonesize_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return zonesize_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_zonesize_id() {
  clear_has_zonesize_id();
  ::rubicon::data::common::AnUInt32_PB* temp = zonesize_id_;
  zonesize_id_ = NULL;
  return temp;
}

// optional string zone_size_str = 6;
inline bool Inventory_PB::has_zone_size_str() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Inventory_PB::set_has_zone_size_str() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Inventory_PB::clear_has_zone_size_str() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Inventory_PB::clear_zone_size_str() {
  if (zone_size_str_ != &::google::protobuf::internal::kEmptyString) {
    zone_size_str_->clear();
  }
  clear_has_zone_size_str();
}
inline const ::std::string& Inventory_PB::zone_size_str() const {
  return *zone_size_str_;
}
inline void Inventory_PB::set_zone_size_str(const ::std::string& value) {
  set_has_zone_size_str();
  if (zone_size_str_ == &::google::protobuf::internal::kEmptyString) {
    zone_size_str_ = new ::std::string;
  }
  zone_size_str_->assign(value);
}
inline void Inventory_PB::set_zone_size_str(const char* value) {
  set_has_zone_size_str();
  if (zone_size_str_ == &::google::protobuf::internal::kEmptyString) {
    zone_size_str_ = new ::std::string;
  }
  zone_size_str_->assign(value);
}
inline void Inventory_PB::set_zone_size_str(const char* value, size_t size) {
  set_has_zone_size_str();
  if (zone_size_str_ == &::google::protobuf::internal::kEmptyString) {
    zone_size_str_ = new ::std::string;
  }
  zone_size_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Inventory_PB::mutable_zone_size_str() {
  set_has_zone_size_str();
  if (zone_size_str_ == &::google::protobuf::internal::kEmptyString) {
    zone_size_str_ = new ::std::string;
  }
  return zone_size_str_;
}
inline ::std::string* Inventory_PB::release_zone_size_str() {
  clear_has_zone_size_str();
  if (zone_size_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zone_size_str_;
    zone_size_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .rubicon.data.common.AnUInt32_PB org_zone_id = 7;
inline bool Inventory_PB::has_org_zone_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Inventory_PB::set_has_org_zone_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Inventory_PB::clear_has_org_zone_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Inventory_PB::clear_org_zone_id() {
  if (org_zone_id_ != NULL) org_zone_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_org_zone_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::org_zone_id() const {
  return org_zone_id_ != NULL ? *org_zone_id_ : *default_instance_->org_zone_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_org_zone_id() {
  set_has_org_zone_id();
  if (org_zone_id_ == NULL) org_zone_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return org_zone_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_org_zone_id() {
  clear_has_org_zone_id();
  ::rubicon::data::common::AnUInt32_PB* temp = org_zone_id_;
  org_zone_id_ = NULL;
  return temp;
}

// optional .rubicon.data.common.AnUInt32_PB org_size_id = 8;
inline bool Inventory_PB::has_org_size_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Inventory_PB::set_has_org_size_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Inventory_PB::clear_has_org_size_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Inventory_PB::clear_org_size_id() {
  if (org_size_id_ != NULL) org_size_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_org_size_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& Inventory_PB::org_size_id() const {
  return org_size_id_ != NULL ? *org_size_id_ : *default_instance_->org_size_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::mutable_org_size_id() {
  set_has_org_size_id();
  if (org_size_id_ == NULL) org_size_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return org_size_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* Inventory_PB::release_org_size_id() {
  clear_has_org_size_id();
  ::rubicon::data::common::AnUInt32_PB* temp = org_size_id_;
  org_size_id_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ae_5finventory_2eproto__INCLUDED
