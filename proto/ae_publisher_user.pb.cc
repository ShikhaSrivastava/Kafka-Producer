// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ae_publisher_user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

namespace {

const ::google::protobuf::Descriptor* PublisherUser_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublisherUser_PB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ae_5fpublisher_5fuser_2eproto() {
  protobuf_AddDesc_ae_5fpublisher_5fuser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ae_publisher_user.proto");
  GOOGLE_CHECK(file != NULL);
  PublisherUser_PB_descriptor_ = file->message_type(0);
  static const int PublisherUser_PB_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, house_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, ethnicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, education_),
  };
  PublisherUser_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublisherUser_PB_descriptor_,
      PublisherUser_PB::default_instance_,
      PublisherUser_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublisherUser_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublisherUser_PB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ae_5fpublisher_5fuser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublisherUser_PB_descriptor_, &PublisherUser_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ae_5fpublisher_5fuser_2eproto() {
  delete PublisherUser_PB::default_instance_;
  delete PublisherUser_PB_reflection_;
}

void protobuf_AddDesc_ae_5fpublisher_5fuser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rubicon::data::common::protobuf_AddDesc_num_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ae_publisher_user.proto\022\026rubicon.data."
    "ad_engine\032\017num_types.proto\"\245\002\n\020Publisher"
    "User_PB\022\020\n\010keywords\030\001 \003(\t\022\016\n\006gender\030\002 \001("
    "\t\022-\n\003age\030\003 \001(\0132 .rubicon.data.common.AnU"
    "Int32_PB\0220\n\006income\030\004 \001(\0132 .rubicon.data."
    "common.AnUInt32_PB\0222\n\010children\030\005 \001(\0132 .r"
    "ubicon.data.common.AnUInt32_PB\0224\n\nhouse_"
    "size\030\006 \001(\0132 .rubicon.data.common.AnUInt3"
    "2_PB\022\021\n\tethnicity\030\007 \001(\t\022\021\n\teducation\030\010 \001"
    "(\tB\002H\001", 366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ae_publisher_user.proto", &protobuf_RegisterTypes);
  PublisherUser_PB::default_instance_ = new PublisherUser_PB();
  PublisherUser_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ae_5fpublisher_5fuser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ae_5fpublisher_5fuser_2eproto {
  StaticDescriptorInitializer_ae_5fpublisher_5fuser_2eproto() {
    protobuf_AddDesc_ae_5fpublisher_5fuser_2eproto();
  }
} static_descriptor_initializer_ae_5fpublisher_5fuser_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PublisherUser_PB::kKeywordsFieldNumber;
const int PublisherUser_PB::kGenderFieldNumber;
const int PublisherUser_PB::kAgeFieldNumber;
const int PublisherUser_PB::kIncomeFieldNumber;
const int PublisherUser_PB::kChildrenFieldNumber;
const int PublisherUser_PB::kHouseSizeFieldNumber;
const int PublisherUser_PB::kEthnicityFieldNumber;
const int PublisherUser_PB::kEducationFieldNumber;
#endif  // !_MSC_VER

PublisherUser_PB::PublisherUser_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublisherUser_PB::InitAsDefaultInstance() {
  age_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  income_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  children_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  house_size_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
}

PublisherUser_PB::PublisherUser_PB(const PublisherUser_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublisherUser_PB::SharedCtor() {
  _cached_size_ = 0;
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = NULL;
  income_ = NULL;
  children_ = NULL;
  house_size_ = NULL;
  ethnicity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  education_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublisherUser_PB::~PublisherUser_PB() {
  SharedDtor();
}

void PublisherUser_PB::SharedDtor() {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (ethnicity_ != &::google::protobuf::internal::kEmptyString) {
    delete ethnicity_;
  }
  if (education_ != &::google::protobuf::internal::kEmptyString) {
    delete education_;
  }
  if (this != default_instance_) {
    delete age_;
    delete income_;
    delete children_;
    delete house_size_;
  }
}

void PublisherUser_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublisherUser_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublisherUser_PB_descriptor_;
}

const PublisherUser_PB& PublisherUser_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5fpublisher_5fuser_2eproto();  return *default_instance_;
}

PublisherUser_PB* PublisherUser_PB::default_instance_ = NULL;

PublisherUser_PB* PublisherUser_PB::New() const {
  return new PublisherUser_PB;
}

void PublisherUser_PB::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::kEmptyString) {
        gender_->clear();
      }
    }
    if (has_age()) {
      if (age_ != NULL) age_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_income()) {
      if (income_ != NULL) income_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_children()) {
      if (children_ != NULL) children_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_house_size()) {
      if (house_size_ != NULL) house_size_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_ethnicity()) {
      if (ethnicity_ != &::google::protobuf::internal::kEmptyString) {
        ethnicity_->clear();
      }
    }
    if (has_education()) {
      if (education_ != &::google::protobuf::internal::kEmptyString) {
        education_->clear();
      }
    }
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublisherUser_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keywords = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keywords(0).data(), this->keywords(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keywords;
        if (input->ExpectTag(18)) goto parse_gender;
        break;
      }
      
      // optional string gender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_age;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB age = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_age:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_age()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_income;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB income = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_income:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_income()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_children;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB children = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_house_size;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB house_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_house_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_house_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ethnicity;
        break;
      }
      
      // optional string ethnicity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ethnicity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ethnicity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ethnicity().data(), this->ethnicity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_education;
        break;
      }
      
      // optional string education = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_education:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_education()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->education().data(), this->education().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublisherUser_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string keywords = 1;
  for (int i = 0; i < this->keywords_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keywords(i).data(), this->keywords(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keywords(i), output);
  }
  
  // optional string gender = 2;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gender(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB age = 3;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->age(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB income = 4;
  if (has_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->income(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB children = 5;
  if (has_children()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->children(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB house_size = 6;
  if (has_house_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->house_size(), output);
  }
  
  // optional string ethnicity = 7;
  if (has_ethnicity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ethnicity().data(), this->ethnicity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ethnicity(), output);
  }
  
  // optional string education = 8;
  if (has_education()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->education().data(), this->education().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->education(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublisherUser_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string keywords = 1;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keywords(i), target);
  }
  
  // optional string gender = 2;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gender(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB age = 3;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->age(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB income = 4;
  if (has_income()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->income(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB children = 5;
  if (has_children()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->children(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB house_size = 6;
  if (has_house_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->house_size(), target);
  }
  
  // optional string ethnicity = 7;
  if (has_ethnicity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ethnicity().data(), this->ethnicity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ethnicity(), target);
  }
  
  // optional string education = 8;
  if (has_education()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->education().data(), this->education().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->education(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublisherUser_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string gender = 2;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->age());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB income = 4;
    if (has_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->income());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB children = 5;
    if (has_children()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB house_size = 6;
    if (has_house_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->house_size());
    }
    
    // optional string ethnicity = 7;
    if (has_ethnicity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ethnicity());
    }
    
    // optional string education = 8;
    if (has_education()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->education());
    }
    
  }
  // repeated string keywords = 1;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublisherUser_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublisherUser_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublisherUser_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublisherUser_PB::MergeFrom(const PublisherUser_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      mutable_age()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.age());
    }
    if (from.has_income()) {
      mutable_income()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.income());
    }
    if (from.has_children()) {
      mutable_children()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.children());
    }
    if (from.has_house_size()) {
      mutable_house_size()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.house_size());
    }
    if (from.has_ethnicity()) {
      set_ethnicity(from.ethnicity());
    }
    if (from.has_education()) {
      set_education(from.education());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublisherUser_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublisherUser_PB::CopyFrom(const PublisherUser_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublisherUser_PB::IsInitialized() const {
  
  return true;
}

void PublisherUser_PB::Swap(PublisherUser_PB* other) {
  if (other != this) {
    keywords_.Swap(&other->keywords_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(income_, other->income_);
    std::swap(children_, other->children_);
    std::swap(house_size_, other->house_size_);
    std::swap(ethnicity_, other->ethnicity_);
    std::swap(education_, other->education_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublisherUser_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublisherUser_PB_descriptor_;
  metadata.reflection = PublisherUser_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
