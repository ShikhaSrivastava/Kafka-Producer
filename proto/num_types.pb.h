// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: num_types.proto

#ifndef PROTOBUF_num_5ftypes_2eproto__INCLUDED
#define PROTOBUF_num_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_num_5ftypes_2eproto();
void protobuf_AssignDesc_num_5ftypes_2eproto();
void protobuf_ShutdownFile_num_5ftypes_2eproto();

class AnInt32_PB;
class AnUInt32_PB;
class AnInt64_PB;
class AnUInt64_PB;

// ===================================================================

class AnInt32_PB : public ::google::protobuf::Message {
 public:
  AnInt32_PB();
  virtual ~AnInt32_PB();
  
  AnInt32_PB(const AnInt32_PB& from);
  
  inline AnInt32_PB& operator=(const AnInt32_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnInt32_PB& default_instance();
  
  void Swap(AnInt32_PB* other);
  
  // implements Message ----------------------------------------------
  
  AnInt32_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnInt32_PB& from);
  void MergeFrom(const AnInt32_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.common.AnInt32_PB)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_num_5ftypes_2eproto();
  friend void protobuf_AssignDesc_num_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_num_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static AnInt32_PB* default_instance_;
};
// -------------------------------------------------------------------

class AnUInt32_PB : public ::google::protobuf::Message {
 public:
  AnUInt32_PB();
  virtual ~AnUInt32_PB();
  
  AnUInt32_PB(const AnUInt32_PB& from);
  
  inline AnUInt32_PB& operator=(const AnUInt32_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnUInt32_PB& default_instance();
  
  void Swap(AnUInt32_PB* other);
  
  // implements Message ----------------------------------------------
  
  AnUInt32_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnUInt32_PB& from);
  void MergeFrom(const AnUInt32_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.common.AnUInt32_PB)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  ::google::protobuf::uint32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_num_5ftypes_2eproto();
  friend void protobuf_AssignDesc_num_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_num_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static AnUInt32_PB* default_instance_;
};
// -------------------------------------------------------------------

class AnInt64_PB : public ::google::protobuf::Message {
 public:
  AnInt64_PB();
  virtual ~AnInt64_PB();
  
  AnInt64_PB(const AnInt64_PB& from);
  
  inline AnInt64_PB& operator=(const AnInt64_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnInt64_PB& default_instance();
  
  void Swap(AnInt64_PB* other);
  
  // implements Message ----------------------------------------------
  
  AnInt64_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnInt64_PB& from);
  void MergeFrom(const AnInt64_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.common.AnInt64_PB)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 value_;
  ::std::string* raw_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_num_5ftypes_2eproto();
  friend void protobuf_AssignDesc_num_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_num_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static AnInt64_PB* default_instance_;
};
// -------------------------------------------------------------------

class AnUInt64_PB : public ::google::protobuf::Message {
 public:
  AnUInt64_PB();
  virtual ~AnUInt64_PB();
  
  AnUInt64_PB(const AnUInt64_PB& from);
  
  inline AnUInt64_PB& operator=(const AnUInt64_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnUInt64_PB& default_instance();
  
  void Swap(AnUInt64_PB* other);
  
  // implements Message ----------------------------------------------
  
  AnUInt64_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnUInt64_PB& from);
  void MergeFrom(const AnUInt64_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.common.AnUInt64_PB)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 value_;
  ::std::string* raw_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_num_5ftypes_2eproto();
  friend void protobuf_AssignDesc_num_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_num_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static AnUInt64_PB* default_instance_;
};
// ===================================================================


// ===================================================================

// AnInt32_PB

// optional int32 value = 1;
inline bool AnInt32_PB::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnInt32_PB::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnInt32_PB::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnInt32_PB::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AnInt32_PB::value() const {
  return value_;
}
inline void AnInt32_PB::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional string raw_value = 2;
inline bool AnInt32_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnInt32_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnInt32_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnInt32_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& AnInt32_PB::raw_value() const {
  return *raw_value_;
}
inline void AnInt32_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnInt32_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnInt32_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnInt32_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* AnInt32_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AnUInt32_PB

// optional uint32 value = 1;
inline bool AnUInt32_PB::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnUInt32_PB::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnUInt32_PB::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnUInt32_PB::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 AnUInt32_PB::value() const {
  return value_;
}
inline void AnUInt32_PB::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional string raw_value = 2;
inline bool AnUInt32_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnUInt32_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnUInt32_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnUInt32_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& AnUInt32_PB::raw_value() const {
  return *raw_value_;
}
inline void AnUInt32_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnUInt32_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnUInt32_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnUInt32_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* AnUInt32_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AnInt64_PB

// optional int64 value = 1;
inline bool AnInt64_PB::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnInt64_PB::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnInt64_PB::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnInt64_PB::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 AnInt64_PB::value() const {
  return value_;
}
inline void AnInt64_PB::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// optional string raw_value = 2;
inline bool AnInt64_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnInt64_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnInt64_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnInt64_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& AnInt64_PB::raw_value() const {
  return *raw_value_;
}
inline void AnInt64_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnInt64_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnInt64_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnInt64_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* AnInt64_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AnUInt64_PB

// optional uint64 value = 1;
inline bool AnUInt64_PB::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnUInt64_PB::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnUInt64_PB::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnUInt64_PB::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 AnUInt64_PB::value() const {
  return value_;
}
inline void AnUInt64_PB::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// optional string raw_value = 2;
inline bool AnUInt64_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnUInt64_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnUInt64_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnUInt64_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& AnUInt64_PB::raw_value() const {
  return *raw_value_;
}
inline void AnUInt64_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnUInt64_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void AnUInt64_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnUInt64_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* AnUInt64_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_num_5ftypes_2eproto__INCLUDED
