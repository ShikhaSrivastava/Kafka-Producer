// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ip.proto

#ifndef PROTOBUF_ip_2eproto__INCLUDED
#define PROTOBUF_ip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ip_2eproto();
void protobuf_AssignDesc_ip_2eproto();
void protobuf_ShutdownFile_ip_2eproto();

class IPAddress_PB;

enum IPAddress_PB_IPAddressType_E {
  IPAddress_PB_IPAddressType_E_IPV4 = 0,
  IPAddress_PB_IPAddressType_E_IPV6 = 1
};
bool IPAddress_PB_IPAddressType_E_IsValid(int value);
const IPAddress_PB_IPAddressType_E IPAddress_PB_IPAddressType_E_IPAddressType_E_MIN = IPAddress_PB_IPAddressType_E_IPV4;
const IPAddress_PB_IPAddressType_E IPAddress_PB_IPAddressType_E_IPAddressType_E_MAX = IPAddress_PB_IPAddressType_E_IPV6;
const int IPAddress_PB_IPAddressType_E_IPAddressType_E_ARRAYSIZE = IPAddress_PB_IPAddressType_E_IPAddressType_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* IPAddress_PB_IPAddressType_E_descriptor();
inline const ::std::string& IPAddress_PB_IPAddressType_E_Name(IPAddress_PB_IPAddressType_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    IPAddress_PB_IPAddressType_E_descriptor(), value);
}
inline bool IPAddress_PB_IPAddressType_E_Parse(
    const ::std::string& name, IPAddress_PB_IPAddressType_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IPAddress_PB_IPAddressType_E>(
    IPAddress_PB_IPAddressType_E_descriptor(), name, value);
}
// ===================================================================

class IPAddress_PB : public ::google::protobuf::Message {
 public:
  IPAddress_PB();
  virtual ~IPAddress_PB();
  
  IPAddress_PB(const IPAddress_PB& from);
  
  inline IPAddress_PB& operator=(const IPAddress_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPAddress_PB& default_instance();
  
  void Swap(IPAddress_PB* other);
  
  // implements Message ----------------------------------------------
  
  IPAddress_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IPAddress_PB& from);
  void MergeFrom(const IPAddress_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef IPAddress_PB_IPAddressType_E IPAddressType_E;
  static const IPAddressType_E IPV4 = IPAddress_PB_IPAddressType_E_IPV4;
  static const IPAddressType_E IPV6 = IPAddress_PB_IPAddressType_E_IPV6;
  static inline bool IPAddressType_E_IsValid(int value) {
    return IPAddress_PB_IPAddressType_E_IsValid(value);
  }
  static const IPAddressType_E IPAddressType_E_MIN =
    IPAddress_PB_IPAddressType_E_IPAddressType_E_MIN;
  static const IPAddressType_E IPAddressType_E_MAX =
    IPAddress_PB_IPAddressType_E_IPAddressType_E_MAX;
  static const int IPAddressType_E_ARRAYSIZE =
    IPAddress_PB_IPAddressType_E_IPAddressType_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IPAddressType_E_descriptor() {
    return IPAddress_PB_IPAddressType_E_descriptor();
  }
  static inline const ::std::string& IPAddressType_E_Name(IPAddressType_E value) {
    return IPAddress_PB_IPAddressType_E_Name(value);
  }
  static inline bool IPAddressType_E_Parse(const ::std::string& name,
      IPAddressType_E* value) {
    return IPAddress_PB_IPAddressType_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.common.IPAddress_PB.IPAddressType_E type = 1 [default = IPV4];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rubicon::data::common::IPAddress_PB_IPAddressType_E type() const;
  inline void set_type(::rubicon::data::common::IPAddress_PB_IPAddressType_E value);
  
  // optional fixed32 ipv4 = 2;
  inline bool has_ipv4() const;
  inline void clear_ipv4();
  static const int kIpv4FieldNumber = 2;
  inline ::google::protobuf::uint32 ipv4() const;
  inline void set_ipv4(::google::protobuf::uint32 value);
  
  // optional bytes ipv6 = 3;
  inline bool has_ipv6() const;
  inline void clear_ipv6();
  static const int kIpv6FieldNumber = 3;
  inline const ::std::string& ipv6() const;
  inline void set_ipv6(const ::std::string& value);
  inline void set_ipv6(const char* value);
  inline void set_ipv6(const void* value, size_t size);
  inline ::std::string* mutable_ipv6();
  inline ::std::string* release_ipv6();
  
  // optional bool masked = 4 [default = false];
  inline bool has_masked() const;
  inline void clear_masked();
  static const int kMaskedFieldNumber = 4;
  inline bool masked() const;
  inline void set_masked(bool value);
  
  // @@protoc_insertion_point(class_scope:rubicon.data.common.IPAddress_PB)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ipv4();
  inline void clear_has_ipv4();
  inline void set_has_ipv6();
  inline void clear_has_ipv6();
  inline void set_has_masked();
  inline void clear_has_masked();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 ipv4_;
  ::std::string* ipv6_;
  bool masked_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ip_2eproto();
  friend void protobuf_AssignDesc_ip_2eproto();
  friend void protobuf_ShutdownFile_ip_2eproto();
  
  void InitAsDefaultInstance();
  static IPAddress_PB* default_instance_;
};
// ===================================================================


// ===================================================================

// IPAddress_PB

// optional .rubicon.data.common.IPAddress_PB.IPAddressType_E type = 1 [default = IPV4];
inline bool IPAddress_PB::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IPAddress_PB::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IPAddress_PB::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IPAddress_PB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rubicon::data::common::IPAddress_PB_IPAddressType_E IPAddress_PB::type() const {
  return static_cast< ::rubicon::data::common::IPAddress_PB_IPAddressType_E >(type_);
}
inline void IPAddress_PB::set_type(::rubicon::data::common::IPAddress_PB_IPAddressType_E value) {
  GOOGLE_DCHECK(::rubicon::data::common::IPAddress_PB_IPAddressType_E_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional fixed32 ipv4 = 2;
inline bool IPAddress_PB::has_ipv4() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IPAddress_PB::set_has_ipv4() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IPAddress_PB::clear_has_ipv4() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IPAddress_PB::clear_ipv4() {
  ipv4_ = 0u;
  clear_has_ipv4();
}
inline ::google::protobuf::uint32 IPAddress_PB::ipv4() const {
  return ipv4_;
}
inline void IPAddress_PB::set_ipv4(::google::protobuf::uint32 value) {
  set_has_ipv4();
  ipv4_ = value;
}

// optional bytes ipv6 = 3;
inline bool IPAddress_PB::has_ipv6() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IPAddress_PB::set_has_ipv6() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IPAddress_PB::clear_has_ipv6() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IPAddress_PB::clear_ipv6() {
  if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
    ipv6_->clear();
  }
  clear_has_ipv6();
}
inline const ::std::string& IPAddress_PB::ipv6() const {
  return *ipv6_;
}
inline void IPAddress_PB::set_ipv6(const ::std::string& value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void IPAddress_PB::set_ipv6(const char* value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void IPAddress_PB::set_ipv6(const void* value, size_t size) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IPAddress_PB::mutable_ipv6() {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  return ipv6_;
}
inline ::std::string* IPAddress_PB::release_ipv6() {
  clear_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipv6_;
    ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool masked = 4 [default = false];
inline bool IPAddress_PB::has_masked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IPAddress_PB::set_has_masked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IPAddress_PB::clear_has_masked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IPAddress_PB::clear_masked() {
  masked_ = false;
  clear_has_masked();
}
inline bool IPAddress_PB::masked() const {
  return masked_;
}
inline void IPAddress_PB::set_masked(bool value) {
  set_has_masked();
  masked_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::common::IPAddress_PB_IPAddressType_E>() {
  return ::rubicon::data::common::IPAddress_PB_IPAddressType_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ip_2eproto__INCLUDED
