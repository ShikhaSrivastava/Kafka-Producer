// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ae_log.proto

#ifndef PROTOBUF_ae_5flog_2eproto__INCLUDED
#define PROTOBUF_ae_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "types.pb.h"
#include "num_types.pb.h"
#include "ip.pb.h"
#include "geo.pb.h"
#include "ae_types.pb.h"
#include "ae_inventory.pb.h"
#include "ae_publisher_user.pb.h"
#include "adsafe.pb.h"
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ae_5flog_2eproto();
void protobuf_AssignDesc_ae_5flog_2eproto();
void protobuf_ShutdownFile_ae_5flog_2eproto();

class DataCenter_PB;
class DKHistory_PB;
class ImpressionType_PB;
class MarketPricing_PB;
class AdCounts_PB;
class UserInfo_PB;
class GeoInfo_PB;
class InventoryInfo_PB;
class SystemInfo_PB;
class TransactionInfo_PB;
class AdEngineLog_PB;

enum DataCenter_PB_DataCenterCodes_E {
  DataCenter_PB_DataCenterCodes_E_UNKNOWN = 0,
  DataCenter_PB_DataCenterCodes_E_IAD1 = 1,
  DataCenter_PB_DataCenterCodes_E_LAX1 = 3,
  DataCenter_PB_DataCenterCodes_E_AMS2 = 4,
  DataCenter_PB_DataCenterCodes_E_QA = 20
};
bool DataCenter_PB_DataCenterCodes_E_IsValid(int value);
const DataCenter_PB_DataCenterCodes_E DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_MIN = DataCenter_PB_DataCenterCodes_E_UNKNOWN;
const DataCenter_PB_DataCenterCodes_E DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_MAX = DataCenter_PB_DataCenterCodes_E_QA;
const int DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_ARRAYSIZE = DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataCenter_PB_DataCenterCodes_E_descriptor();
inline const ::std::string& DataCenter_PB_DataCenterCodes_E_Name(DataCenter_PB_DataCenterCodes_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataCenter_PB_DataCenterCodes_E_descriptor(), value);
}
inline bool DataCenter_PB_DataCenterCodes_E_Parse(
    const ::std::string& name, DataCenter_PB_DataCenterCodes_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataCenter_PB_DataCenterCodes_E>(
    DataCenter_PB_DataCenterCodes_E_descriptor(), name, value);
}
enum ImpressionType_PB_ImpressionCode_E {
  ImpressionType_PB_ImpressionCode_E_UNKNOWN_IMPRESSION = 0,
  ImpressionType_PB_ImpressionCode_E_AD_IMPRESSION = 1,
  ImpressionType_PB_ImpressionCode_E_START_SESSION = 2,
  ImpressionType_PB_ImpressionCode_E_CLICK = 3
};
bool ImpressionType_PB_ImpressionCode_E_IsValid(int value);
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_MIN = ImpressionType_PB_ImpressionCode_E_UNKNOWN_IMPRESSION;
const ImpressionType_PB_ImpressionCode_E ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_MAX = ImpressionType_PB_ImpressionCode_E_CLICK;
const int ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_ARRAYSIZE = ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImpressionType_PB_ImpressionCode_E_descriptor();
inline const ::std::string& ImpressionType_PB_ImpressionCode_E_Name(ImpressionType_PB_ImpressionCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImpressionType_PB_ImpressionCode_E_descriptor(), value);
}
inline bool ImpressionType_PB_ImpressionCode_E_Parse(
    const ::std::string& name, ImpressionType_PB_ImpressionCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImpressionType_PB_ImpressionCode_E>(
    ImpressionType_PB_ImpressionCode_E_descriptor(), name, value);
}
enum SystemInfo_PB_FeatureCode_E {
  SystemInfo_PB_FeatureCode_E_LOCAL_STORAGE = 1
};
bool SystemInfo_PB_FeatureCode_E_IsValid(int value);
const SystemInfo_PB_FeatureCode_E SystemInfo_PB_FeatureCode_E_FeatureCode_E_MIN = SystemInfo_PB_FeatureCode_E_LOCAL_STORAGE;
const SystemInfo_PB_FeatureCode_E SystemInfo_PB_FeatureCode_E_FeatureCode_E_MAX = SystemInfo_PB_FeatureCode_E_LOCAL_STORAGE;
const int SystemInfo_PB_FeatureCode_E_FeatureCode_E_ARRAYSIZE = SystemInfo_PB_FeatureCode_E_FeatureCode_E_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemInfo_PB_FeatureCode_E_descriptor();
inline const ::std::string& SystemInfo_PB_FeatureCode_E_Name(SystemInfo_PB_FeatureCode_E value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemInfo_PB_FeatureCode_E_descriptor(), value);
}
inline bool SystemInfo_PB_FeatureCode_E_Parse(
    const ::std::string& name, SystemInfo_PB_FeatureCode_E* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemInfo_PB_FeatureCode_E>(
    SystemInfo_PB_FeatureCode_E_descriptor(), name, value);
}
// ===================================================================

class DataCenter_PB : public ::google::protobuf::Message {
 public:
  DataCenter_PB();
  virtual ~DataCenter_PB();
  
  DataCenter_PB(const DataCenter_PB& from);
  
  inline DataCenter_PB& operator=(const DataCenter_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCenter_PB& default_instance();
  
  void Swap(DataCenter_PB* other);
  
  // implements Message ----------------------------------------------
  
  DataCenter_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCenter_PB& from);
  void MergeFrom(const DataCenter_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DataCenter_PB_DataCenterCodes_E DataCenterCodes_E;
  static const DataCenterCodes_E UNKNOWN = DataCenter_PB_DataCenterCodes_E_UNKNOWN;
  static const DataCenterCodes_E IAD1 = DataCenter_PB_DataCenterCodes_E_IAD1;
  static const DataCenterCodes_E LAX1 = DataCenter_PB_DataCenterCodes_E_LAX1;
  static const DataCenterCodes_E AMS2 = DataCenter_PB_DataCenterCodes_E_AMS2;
  static const DataCenterCodes_E QA = DataCenter_PB_DataCenterCodes_E_QA;
  static inline bool DataCenterCodes_E_IsValid(int value) {
    return DataCenter_PB_DataCenterCodes_E_IsValid(value);
  }
  static const DataCenterCodes_E DataCenterCodes_E_MIN =
    DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_MIN;
  static const DataCenterCodes_E DataCenterCodes_E_MAX =
    DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_MAX;
  static const int DataCenterCodes_E_ARRAYSIZE =
    DataCenter_PB_DataCenterCodes_E_DataCenterCodes_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataCenterCodes_E_descriptor() {
    return DataCenter_PB_DataCenterCodes_E_descriptor();
  }
  static inline const ::std::string& DataCenterCodes_E_Name(DataCenterCodes_E value) {
    return DataCenter_PB_DataCenterCodes_E_Name(value);
  }
  static inline bool DataCenterCodes_E_Parse(const ::std::string& name,
      DataCenterCodes_E* value) {
    return DataCenter_PB_DataCenterCodes_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.ad_engine.DataCenter_PB.DataCenterCodes_E name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E name() const;
  inline void set_name(::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E value);
  
  // optional string raw_value = 2;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 2;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.DataCenter_PB)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static DataCenter_PB* default_instance_;
};
// -------------------------------------------------------------------

class DKHistory_PB : public ::google::protobuf::Message {
 public:
  DKHistory_PB();
  virtual ~DKHistory_PB();
  
  DKHistory_PB(const DKHistory_PB& from);
  
  inline DKHistory_PB& operator=(const DKHistory_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DKHistory_PB& default_instance();
  
  void Swap(DKHistory_PB* other);
  
  // implements Message ----------------------------------------------
  
  DKHistory_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DKHistory_PB& from);
  void MergeFrom(const DKHistory_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
  inline bool has_ad_id() const;
  inline void clear_ad_id();
  static const int kAdIdFieldNumber = 1;
  inline const ::rubicon::data::common::AnUInt32_PB& ad_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_ad_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_ad_id();
  
  // repeated uint32 zone_ids = 2;
  inline int zone_ids_size() const;
  inline void clear_zone_ids();
  static const int kZoneIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 zone_ids(int index) const;
  inline void set_zone_ids(int index, ::google::protobuf::uint32 value);
  inline void add_zone_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      zone_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_zone_ids();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.DKHistory_PB)
 private:
  inline void set_has_ad_id();
  inline void clear_has_ad_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::common::AnUInt32_PB* ad_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > zone_ids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static DKHistory_PB* default_instance_;
};
// -------------------------------------------------------------------

class ImpressionType_PB : public ::google::protobuf::Message {
 public:
  ImpressionType_PB();
  virtual ~ImpressionType_PB();
  
  ImpressionType_PB(const ImpressionType_PB& from);
  
  inline ImpressionType_PB& operator=(const ImpressionType_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImpressionType_PB& default_instance();
  
  void Swap(ImpressionType_PB* other);
  
  // implements Message ----------------------------------------------
  
  ImpressionType_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImpressionType_PB& from);
  void MergeFrom(const ImpressionType_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ImpressionType_PB_ImpressionCode_E ImpressionCode_E;
  static const ImpressionCode_E UNKNOWN_IMPRESSION = ImpressionType_PB_ImpressionCode_E_UNKNOWN_IMPRESSION;
  static const ImpressionCode_E AD_IMPRESSION = ImpressionType_PB_ImpressionCode_E_AD_IMPRESSION;
  static const ImpressionCode_E START_SESSION = ImpressionType_PB_ImpressionCode_E_START_SESSION;
  static const ImpressionCode_E CLICK = ImpressionType_PB_ImpressionCode_E_CLICK;
  static inline bool ImpressionCode_E_IsValid(int value) {
    return ImpressionType_PB_ImpressionCode_E_IsValid(value);
  }
  static const ImpressionCode_E ImpressionCode_E_MIN =
    ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_MIN;
  static const ImpressionCode_E ImpressionCode_E_MAX =
    ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_MAX;
  static const int ImpressionCode_E_ARRAYSIZE =
    ImpressionType_PB_ImpressionCode_E_ImpressionCode_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ImpressionCode_E_descriptor() {
    return ImpressionType_PB_ImpressionCode_E_descriptor();
  }
  static inline const ::std::string& ImpressionCode_E_Name(ImpressionCode_E value) {
    return ImpressionType_PB_ImpressionCode_E_Name(value);
  }
  static inline bool ImpressionCode_E_Parse(const ::std::string& name,
      ImpressionCode_E* value) {
    return ImpressionType_PB_ImpressionCode_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .rubicon.data.ad_engine.ImpressionType_PB.ImpressionCode_E code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E code() const;
  inline void set_code(::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E value);
  
  // optional string raw_value = 3;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 3;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.ImpressionType_PB)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_raw_value();
  inline void clear_has_raw_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_value_;
  int code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static ImpressionType_PB* default_instance_;
};
// -------------------------------------------------------------------

class MarketPricing_PB : public ::google::protobuf::Message {
 public:
  MarketPricing_PB();
  virtual ~MarketPricing_PB();
  
  MarketPricing_PB(const MarketPricing_PB& from);
  
  inline MarketPricing_PB& operator=(const MarketPricing_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketPricing_PB& default_instance();
  
  void Swap(MarketPricing_PB* other);
  
  // implements Message ----------------------------------------------
  
  MarketPricing_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketPricing_PB& from);
  void MergeFrom(const MarketPricing_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string price_points_debug = 1;
  inline bool has_price_points_debug() const;
  inline void clear_price_points_debug();
  static const int kPricePointsDebugFieldNumber = 1;
  inline const ::std::string& price_points_debug() const;
  inline void set_price_points_debug(const ::std::string& value);
  inline void set_price_points_debug(const char* value);
  inline void set_price_points_debug(const char* value, size_t size);
  inline ::std::string* mutable_price_points_debug();
  inline ::std::string* release_price_points_debug();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.MarketPricing_PB)
 private:
  inline void set_has_price_points_debug();
  inline void clear_has_price_points_debug();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* price_points_debug_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static MarketPricing_PB* default_instance_;
};
// -------------------------------------------------------------------

class AdCounts_PB : public ::google::protobuf::Message {
 public:
  AdCounts_PB();
  virtual ~AdCounts_PB();
  
  AdCounts_PB(const AdCounts_PB& from);
  
  inline AdCounts_PB& operator=(const AdCounts_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdCounts_PB& default_instance();
  
  void Swap(AdCounts_PB* other);
  
  // implements Message ----------------------------------------------
  
  AdCounts_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdCounts_PB& from);
  void MergeFrom(const AdCounts_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 guaranteed_count = 1;
  inline bool has_guaranteed_count() const;
  inline void clear_guaranteed_count();
  static const int kGuaranteedCountFieldNumber = 1;
  inline ::google::protobuf::uint32 guaranteed_count() const;
  inline void set_guaranteed_count(::google::protobuf::uint32 value);
  
  // optional uint32 bids_count = 2;
  inline bool has_bids_count() const;
  inline void clear_bids_count();
  static const int kBidsCountFieldNumber = 2;
  inline ::google::protobuf::uint32 bids_count() const;
  inline void set_bids_count(::google::protobuf::uint32 value);
  
  // optional uint32 bidded_ads_count = 3;
  inline bool has_bidded_ads_count() const;
  inline void clear_bidded_ads_count();
  static const int kBiddedAdsCountFieldNumber = 3;
  inline ::google::protobuf::uint32 bidded_ads_count() const;
  inline void set_bidded_ads_count(::google::protobuf::uint32 value);
  
  // optional uint32 total_valid_count = 4;
  inline bool has_total_valid_count() const;
  inline void clear_total_valid_count();
  static const int kTotalValidCountFieldNumber = 4;
  inline ::google::protobuf::uint32 total_valid_count() const;
  inline void set_total_valid_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.AdCounts_PB)
 private:
  inline void set_has_guaranteed_count();
  inline void clear_has_guaranteed_count();
  inline void set_has_bids_count();
  inline void clear_has_bids_count();
  inline void set_has_bidded_ads_count();
  inline void clear_has_bidded_ads_count();
  inline void set_has_total_valid_count();
  inline void clear_has_total_valid_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 guaranteed_count_;
  ::google::protobuf::uint32 bids_count_;
  ::google::protobuf::uint32 bidded_ads_count_;
  ::google::protobuf::uint32 total_valid_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static AdCounts_PB* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo_PB : public ::google::protobuf::Message {
 public:
  UserInfo_PB();
  virtual ~UserInfo_PB();
  
  UserInfo_PB(const UserInfo_PB& from);
  
  inline UserInfo_PB& operator=(const UserInfo_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo_PB& default_instance();
  
  void Swap(UserInfo_PB* other);
  
  // implements Message ----------------------------------------------
  
  UserInfo_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo_PB& from);
  void MergeFrom(const UserInfo_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.common.IPAddress_PB sender_addr = 1;
  inline bool has_sender_addr() const;
  inline void clear_sender_addr();
  static const int kSenderAddrFieldNumber = 1;
  inline const ::rubicon::data::common::IPAddress_PB& sender_addr() const;
  inline ::rubicon::data::common::IPAddress_PB* mutable_sender_addr();
  inline ::rubicon::data::common::IPAddress_PB* release_sender_addr();
  
  // optional string user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // optional uint64 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint64 session_id() const;
  inline void set_session_id(::google::protobuf::uint64 value);
  
  // optional uint32 browser_time_stamp = 4;
  inline bool has_browser_time_stamp() const;
  inline void clear_browser_time_stamp();
  static const int kBrowserTimeStampFieldNumber = 4;
  inline ::google::protobuf::uint32 browser_time_stamp() const;
  inline void set_browser_time_stamp(::google::protobuf::uint32 value);
  
  // optional uint32 browser_code = 5;
  inline bool has_browser_code() const;
  inline void clear_browser_code();
  static const int kBrowserCodeFieldNumber = 5;
  inline ::google::protobuf::uint32 browser_code() const;
  inline void set_browser_code(::google::protobuf::uint32 value);
  
  // optional uint32 os_code = 6;
  inline bool has_os_code() const;
  inline void clear_os_code();
  static const int kOsCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 os_code() const;
  inline void set_os_code(::google::protobuf::uint32 value);
  
  // optional string accept_language = 7;
  inline bool has_accept_language() const;
  inline void clear_accept_language();
  static const int kAcceptLanguageFieldNumber = 7;
  inline const ::std::string& accept_language() const;
  inline void set_accept_language(const ::std::string& value);
  inline void set_accept_language(const char* value);
  inline void set_accept_language(const char* value, size_t size);
  inline ::std::string* mutable_accept_language();
  inline ::std::string* release_accept_language();
  
  // optional string user_agent_id = 8;
  inline bool has_user_agent_id() const;
  inline void clear_user_agent_id();
  static const int kUserAgentIdFieldNumber = 8;
  inline const ::std::string& user_agent_id() const;
  inline void set_user_agent_id(const ::std::string& value);
  inline void set_user_agent_id(const char* value);
  inline void set_user_agent_id(const char* value, size_t size);
  inline ::std::string* mutable_user_agent_id();
  inline ::std::string* release_user_agent_id();
  
  // optional string behavioral_cookie = 9;
  inline bool has_behavioral_cookie() const;
  inline void clear_behavioral_cookie();
  static const int kBehavioralCookieFieldNumber = 9;
  inline const ::std::string& behavioral_cookie() const;
  inline void set_behavioral_cookie(const ::std::string& value);
  inline void set_behavioral_cookie(const char* value);
  inline void set_behavioral_cookie(const char* value, size_t size);
  inline ::std::string* mutable_behavioral_cookie();
  inline ::std::string* release_behavioral_cookie();
  
  // optional uint64 site_size_count = 10 [default = 0];
  inline bool has_site_size_count() const;
  inline void clear_site_size_count();
  static const int kSiteSizeCountFieldNumber = 10;
  inline ::google::protobuf::uint64 site_size_count() const;
  inline void set_site_size_count(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.UserInfo_PB)
 private:
  inline void set_has_sender_addr();
  inline void clear_has_sender_addr();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_browser_time_stamp();
  inline void clear_has_browser_time_stamp();
  inline void set_has_browser_code();
  inline void clear_has_browser_code();
  inline void set_has_os_code();
  inline void clear_has_os_code();
  inline void set_has_accept_language();
  inline void clear_has_accept_language();
  inline void set_has_user_agent_id();
  inline void clear_has_user_agent_id();
  inline void set_has_behavioral_cookie();
  inline void clear_has_behavioral_cookie();
  inline void set_has_site_size_count();
  inline void clear_has_site_size_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::common::IPAddress_PB* sender_addr_;
  ::std::string* user_id_;
  ::google::protobuf::uint64 session_id_;
  ::google::protobuf::uint32 browser_time_stamp_;
  ::google::protobuf::uint32 browser_code_;
  ::std::string* accept_language_;
  ::std::string* user_agent_id_;
  ::std::string* behavioral_cookie_;
  ::google::protobuf::uint64 site_size_count_;
  ::google::protobuf::uint32 os_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static UserInfo_PB* default_instance_;
};
// -------------------------------------------------------------------

class GeoInfo_PB : public ::google::protobuf::Message {
 public:
  GeoInfo_PB();
  virtual ~GeoInfo_PB();
  
  GeoInfo_PB(const GeoInfo_PB& from);
  
  inline GeoInfo_PB& operator=(const GeoInfo_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoInfo_PB& default_instance();
  
  void Swap(GeoInfo_PB* other);
  
  // implements Message ----------------------------------------------
  
  GeoInfo_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeoInfo_PB& from);
  void MergeFrom(const GeoInfo_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.geo.Geo_PB geo = 1;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 1;
  inline const ::rubicon::data::geo::Geo_PB& geo() const;
  inline ::rubicon::data::geo::Geo_PB* mutable_geo();
  inline ::rubicon::data::geo::Geo_PB* release_geo();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.GeoInfo_PB)
 private:
  inline void set_has_geo();
  inline void clear_has_geo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::geo::Geo_PB* geo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static GeoInfo_PB* default_instance_;
};
// -------------------------------------------------------------------

class InventoryInfo_PB : public ::google::protobuf::Message {
 public:
  InventoryInfo_PB();
  virtual ~InventoryInfo_PB();
  
  InventoryInfo_PB(const InventoryInfo_PB& from);
  
  inline InventoryInfo_PB& operator=(const InventoryInfo_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InventoryInfo_PB& default_instance();
  
  void Swap(InventoryInfo_PB* other);
  
  // implements Message ----------------------------------------------
  
  InventoryInfo_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InventoryInfo_PB& from);
  void MergeFrom(const InventoryInfo_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.ad_engine.ImpressionType_PB impression_type = 1;
  inline bool has_impression_type() const;
  inline void clear_impression_type();
  static const int kImpressionTypeFieldNumber = 1;
  inline const ::rubicon::data::ad_engine::ImpressionType_PB& impression_type() const;
  inline ::rubicon::data::ad_engine::ImpressionType_PB* mutable_impression_type();
  inline ::rubicon::data::ad_engine::ImpressionType_PB* release_impression_type();
  
  // optional string refering_domain = 2;
  inline bool has_refering_domain() const;
  inline void clear_refering_domain();
  static const int kReferingDomainFieldNumber = 2;
  inline const ::std::string& refering_domain() const;
  inline void set_refering_domain(const ::std::string& value);
  inline void set_refering_domain(const char* value);
  inline void set_refering_domain(const char* value, size_t size);
  inline ::std::string* mutable_refering_domain();
  inline ::std::string* release_refering_domain();
  
  // optional string refering_uri = 3;
  inline bool has_refering_uri() const;
  inline void clear_refering_uri();
  static const int kReferingUriFieldNumber = 3;
  inline const ::std::string& refering_uri() const;
  inline void set_refering_uri(const ::std::string& value);
  inline void set_refering_uri(const char* value);
  inline void set_refering_uri(const char* value, size_t size);
  inline ::std::string* mutable_refering_uri();
  inline ::std::string* release_refering_uri();
  
  // optional .rubicon.data.common.MimeType_E mime = 4 [default = UNKNOWN_MIME];
  inline bool has_mime() const;
  inline void clear_mime();
  static const int kMimeFieldNumber = 4;
  inline rubicon::data::common::MimeType_E mime() const;
  inline void set_mime(rubicon::data::common::MimeType_E value);
  
  // optional .rubicon.data.ad_engine.Inventory_PB inventory = 5;
  inline bool has_inventory() const;
  inline void clear_inventory();
  static const int kInventoryFieldNumber = 5;
  inline const ::rubicon::data::ad_engine::Inventory_PB& inventory() const;
  inline ::rubicon::data::ad_engine::Inventory_PB* mutable_inventory();
  inline ::rubicon::data::ad_engine::Inventory_PB* release_inventory();
  
  // optional .rubicon.data.ad_engine.PublisherUser_PB publisher_user = 6;
  inline bool has_publisher_user() const;
  inline void clear_publisher_user();
  static const int kPublisherUserFieldNumber = 6;
  inline const ::rubicon::data::ad_engine::PublisherUser_PB& publisher_user() const;
  inline ::rubicon::data::ad_engine::PublisherUser_PB* mutable_publisher_user();
  inline ::rubicon::data::ad_engine::PublisherUser_PB* release_publisher_user();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.InventoryInfo_PB)
 private:
  inline void set_has_impression_type();
  inline void clear_has_impression_type();
  inline void set_has_refering_domain();
  inline void clear_has_refering_domain();
  inline void set_has_refering_uri();
  inline void clear_has_refering_uri();
  inline void set_has_mime();
  inline void clear_has_mime();
  inline void set_has_inventory();
  inline void clear_has_inventory();
  inline void set_has_publisher_user();
  inline void clear_has_publisher_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::ad_engine::ImpressionType_PB* impression_type_;
  ::std::string* refering_domain_;
  ::std::string* refering_uri_;
  ::rubicon::data::ad_engine::Inventory_PB* inventory_;
  ::rubicon::data::ad_engine::PublisherUser_PB* publisher_user_;
  int mime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static InventoryInfo_PB* default_instance_;
};
// -------------------------------------------------------------------

class SystemInfo_PB : public ::google::protobuf::Message {
 public:
  SystemInfo_PB();
  virtual ~SystemInfo_PB();
  
  SystemInfo_PB(const SystemInfo_PB& from);
  
  inline SystemInfo_PB& operator=(const SystemInfo_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemInfo_PB& default_instance();
  
  void Swap(SystemInfo_PB* other);
  
  // implements Message ----------------------------------------------
  
  SystemInfo_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemInfo_PB& from);
  void MergeFrom(const SystemInfo_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SystemInfo_PB_FeatureCode_E FeatureCode_E;
  static const FeatureCode_E LOCAL_STORAGE = SystemInfo_PB_FeatureCode_E_LOCAL_STORAGE;
  static inline bool FeatureCode_E_IsValid(int value) {
    return SystemInfo_PB_FeatureCode_E_IsValid(value);
  }
  static const FeatureCode_E FeatureCode_E_MIN =
    SystemInfo_PB_FeatureCode_E_FeatureCode_E_MIN;
  static const FeatureCode_E FeatureCode_E_MAX =
    SystemInfo_PB_FeatureCode_E_FeatureCode_E_MAX;
  static const int FeatureCode_E_ARRAYSIZE =
    SystemInfo_PB_FeatureCode_E_FeatureCode_E_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FeatureCode_E_descriptor() {
    return SystemInfo_PB_FeatureCode_E_descriptor();
  }
  static inline const ::std::string& FeatureCode_E_Name(FeatureCode_E value) {
    return SystemInfo_PB_FeatureCode_E_Name(value);
  }
  static inline bool FeatureCode_E_Parse(const ::std::string& name,
      FeatureCode_E* value) {
    return SystemInfo_PB_FeatureCode_E_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);
  
  // optional uint64 ae_response_time = 2 [default = 0];
  inline bool has_ae_response_time() const;
  inline void clear_ae_response_time();
  static const int kAeResponseTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 ae_response_time() const;
  inline void set_ae_response_time(::google::protobuf::uint64 value);
  
  // optional .rubicon.data.ad_engine.DataCenter_PB data_center = 3;
  inline bool has_data_center() const;
  inline void clear_data_center();
  static const int kDataCenterFieldNumber = 3;
  inline const ::rubicon::data::ad_engine::DataCenter_PB& data_center() const;
  inline ::rubicon::data::ad_engine::DataCenter_PB* mutable_data_center();
  inline ::rubicon::data::ad_engine::DataCenter_PB* release_data_center();
  
  // optional .rubicon.data.ad_engine.DKHistory_PB dk_history = 4;
  inline bool has_dk_history() const;
  inline void clear_dk_history();
  static const int kDkHistoryFieldNumber = 4;
  inline const ::rubicon::data::ad_engine::DKHistory_PB& dk_history() const;
  inline ::rubicon::data::ad_engine::DKHistory_PB* mutable_dk_history();
  inline ::rubicon::data::ad_engine::DKHistory_PB* release_dk_history();
  
  // optional .rubicon.data.ad_engine.AlgorithmCode_E algorithm = 5;
  inline bool has_algorithm() const;
  inline void clear_algorithm();
  static const int kAlgorithmFieldNumber = 5;
  inline rubicon::data::ad_engine::AlgorithmCode_E algorithm() const;
  inline void set_algorithm(rubicon::data::ad_engine::AlgorithmCode_E value);
  
  // optional .rubicon.data.ad_engine.RTBOperationResultCode_E rtb_code = 6;
  inline bool has_rtb_code() const;
  inline void clear_rtb_code();
  static const int kRtbCodeFieldNumber = 6;
  inline rubicon::data::ad_engine::RTBOperationResultCode_E rtb_code() const;
  inline void set_rtb_code(rubicon::data::ad_engine::RTBOperationResultCode_E value);
  
  // optional uint32 bids_accepted = 7;
  inline bool has_bids_accepted() const;
  inline void clear_bids_accepted();
  static const int kBidsAcceptedFieldNumber = 7;
  inline ::google::protobuf::uint32 bids_accepted() const;
  inline void set_bids_accepted(::google::protobuf::uint32 value);
  
  // optional uint32 bids_received = 8;
  inline bool has_bids_received() const;
  inline void clear_bids_received();
  static const int kBidsReceivedFieldNumber = 8;
  inline ::google::protobuf::uint32 bids_received() const;
  inline void set_bids_received(::google::protobuf::uint32 value);
  
  // optional string opaque_debug_log = 9;
  inline bool has_opaque_debug_log() const;
  inline void clear_opaque_debug_log();
  static const int kOpaqueDebugLogFieldNumber = 9;
  inline const ::std::string& opaque_debug_log() const;
  inline void set_opaque_debug_log(const ::std::string& value);
  inline void set_opaque_debug_log(const char* value);
  inline void set_opaque_debug_log(const char* value, size_t size);
  inline ::std::string* mutable_opaque_debug_log();
  inline ::std::string* release_opaque_debug_log();
  
  // optional .rubicon.data.ad_engine.MarketPricing_PB market_pricing = 10;
  inline bool has_market_pricing() const;
  inline void clear_market_pricing();
  static const int kMarketPricingFieldNumber = 10;
  inline const ::rubicon::data::ad_engine::MarketPricing_PB& market_pricing() const;
  inline ::rubicon::data::ad_engine::MarketPricing_PB* mutable_market_pricing();
  inline ::rubicon::data::ad_engine::MarketPricing_PB* release_market_pricing();
  
  // optional double rtb_premium_applied = 11;
  inline bool has_rtb_premium_applied() const;
  inline void clear_rtb_premium_applied();
  static const int kRtbPremiumAppliedFieldNumber = 11;
  inline double rtb_premium_applied() const;
  inline void set_rtb_premium_applied(double value);
  
  // optional .rubicon.data.ad_engine.PSACode_E psa_code = 12;
  inline bool has_psa_code() const;
  inline void clear_psa_code();
  static const int kPsaCodeFieldNumber = 12;
  inline rubicon::data::ad_engine::PSACode_E psa_code() const;
  inline void set_psa_code(rubicon::data::ad_engine::PSACode_E value);
  
  // optional string pi_debug = 13;
  inline bool has_pi_debug() const;
  inline void clear_pi_debug();
  static const int kPiDebugFieldNumber = 13;
  inline const ::std::string& pi_debug() const;
  inline void set_pi_debug(const ::std::string& value);
  inline void set_pi_debug(const char* value);
  inline void set_pi_debug(const char* value, size_t size);
  inline ::std::string* mutable_pi_debug();
  inline ::std::string* release_pi_debug();
  
  // optional .rubicon.data.ad_engine.AdCounts_PB ad_counts = 14;
  inline bool has_ad_counts() const;
  inline void clear_ad_counts();
  static const int kAdCountsFieldNumber = 14;
  inline const ::rubicon::data::ad_engine::AdCounts_PB& ad_counts() const;
  inline ::rubicon::data::ad_engine::AdCounts_PB* mutable_ad_counts();
  inline ::rubicon::data::ad_engine::AdCounts_PB* release_ad_counts();
  
  // optional double imp_quality_score = 15;
  inline bool has_imp_quality_score() const;
  inline void clear_imp_quality_score();
  static const int kImpQualityScoreFieldNumber = 15;
  inline double imp_quality_score() const;
  inline void set_imp_quality_score(double value);
  
  // optional string uri_arguments = 16;
  inline bool has_uri_arguments() const;
  inline void clear_uri_arguments();
  static const int kUriArgumentsFieldNumber = 16;
  inline const ::std::string& uri_arguments() const;
  inline void set_uri_arguments(const ::std::string& value);
  inline void set_uri_arguments(const char* value);
  inline void set_uri_arguments(const char* value, size_t size);
  inline ::std::string* mutable_uri_arguments();
  inline ::std::string* release_uri_arguments();
  
  // repeated .rubicon.data.ad_engine.SystemInfo_PB.FeatureCode_E features = 17;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 17;
  inline ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E features(int index) const;
  inline void set_features(int index, ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E value);
  inline void add_features(::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E value);
  inline const ::google::protobuf::RepeatedField<int>& features() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_features();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.SystemInfo_PB)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_ae_response_time();
  inline void clear_has_ae_response_time();
  inline void set_has_data_center();
  inline void clear_has_data_center();
  inline void set_has_dk_history();
  inline void clear_has_dk_history();
  inline void set_has_algorithm();
  inline void clear_has_algorithm();
  inline void set_has_rtb_code();
  inline void clear_has_rtb_code();
  inline void set_has_bids_accepted();
  inline void clear_has_bids_accepted();
  inline void set_has_bids_received();
  inline void clear_has_bids_received();
  inline void set_has_opaque_debug_log();
  inline void clear_has_opaque_debug_log();
  inline void set_has_market_pricing();
  inline void clear_has_market_pricing();
  inline void set_has_rtb_premium_applied();
  inline void clear_has_rtb_premium_applied();
  inline void set_has_psa_code();
  inline void clear_has_psa_code();
  inline void set_has_pi_debug();
  inline void clear_has_pi_debug();
  inline void set_has_ad_counts();
  inline void clear_has_ad_counts();
  inline void set_has_imp_quality_score();
  inline void clear_has_imp_quality_score();
  inline void set_has_uri_arguments();
  inline void clear_has_uri_arguments();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 ae_response_time_;
  ::rubicon::data::ad_engine::DataCenter_PB* data_center_;
  ::google::protobuf::uint32 time_stamp_;
  int algorithm_;
  ::rubicon::data::ad_engine::DKHistory_PB* dk_history_;
  int rtb_code_;
  ::google::protobuf::uint32 bids_accepted_;
  ::std::string* opaque_debug_log_;
  ::rubicon::data::ad_engine::MarketPricing_PB* market_pricing_;
  ::google::protobuf::uint32 bids_received_;
  int psa_code_;
  double rtb_premium_applied_;
  ::std::string* pi_debug_;
  ::rubicon::data::ad_engine::AdCounts_PB* ad_counts_;
  double imp_quality_score_;
  ::std::string* uri_arguments_;
  ::google::protobuf::RepeatedField<int> features_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static SystemInfo_PB* default_instance_;
};
// -------------------------------------------------------------------

class TransactionInfo_PB : public ::google::protobuf::Message {
 public:
  TransactionInfo_PB();
  virtual ~TransactionInfo_PB();
  
  TransactionInfo_PB(const TransactionInfo_PB& from);
  
  inline TransactionInfo_PB& operator=(const TransactionInfo_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionInfo_PB& default_instance();
  
  void Swap(TransactionInfo_PB* other);
  
  // implements Message ----------------------------------------------
  
  TransactionInfo_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionInfo_PB& from);
  void MergeFrom(const TransactionInfo_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
  inline bool has_ad_id() const;
  inline void clear_ad_id();
  static const int kAdIdFieldNumber = 1;
  inline const ::rubicon::data::common::AnUInt32_PB& ad_id() const;
  inline ::rubicon::data::common::AnUInt32_PB* mutable_ad_id();
  inline ::rubicon::data::common::AnUInt32_PB* release_ad_id();
  
  // optional uint32 network_id = 2 [default = 0];
  inline bool has_network_id() const;
  inline void clear_network_id();
  static const int kNetworkIdFieldNumber = 2;
  inline ::google::protobuf::uint32 network_id() const;
  inline void set_network_id(::google::protobuf::uint32 value);
  
  // optional int32 campaign_id = 3 [default = 0];
  inline bool has_campaign_id() const;
  inline void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 3;
  inline ::google::protobuf::int32 campaign_id() const;
  inline void set_campaign_id(::google::protobuf::int32 value);
  
  // optional string restrict_block_match = 4;
  inline bool has_restrict_block_match() const;
  inline void clear_restrict_block_match();
  static const int kRestrictBlockMatchFieldNumber = 4;
  inline const ::std::string& restrict_block_match() const;
  inline void set_restrict_block_match(const ::std::string& value);
  inline void set_restrict_block_match(const char* value);
  inline void set_restrict_block_match(const char* value, size_t size);
  inline ::std::string* mutable_restrict_block_match();
  inline ::std::string* release_restrict_block_match();
  
  // optional string extra_block_match = 5;
  inline bool has_extra_block_match() const;
  inline void clear_extra_block_match();
  static const int kExtraBlockMatchFieldNumber = 5;
  inline const ::std::string& extra_block_match() const;
  inline void set_extra_block_match(const ::std::string& value);
  inline void set_extra_block_match(const char* value);
  inline void set_extra_block_match(const char* value, size_t size);
  inline ::std::string* mutable_extra_block_match();
  inline ::std::string* release_extra_block_match();
  
  // optional uint32 creative_id = 6 [default = 0];
  inline bool has_creative_id() const;
  inline void clear_creative_id();
  static const int kCreativeIdFieldNumber = 6;
  inline ::google::protobuf::uint32 creative_id() const;
  inline void set_creative_id(::google::protobuf::uint32 value);
  
  // optional string auction_id = 7;
  inline bool has_auction_id() const;
  inline void clear_auction_id();
  static const int kAuctionIdFieldNumber = 7;
  inline const ::std::string& auction_id() const;
  inline void set_auction_id(const ::std::string& value);
  inline void set_auction_id(const char* value);
  inline void set_auction_id(const char* value, size_t size);
  inline ::std::string* mutable_auction_id();
  inline ::std::string* release_auction_id();
  
  // optional double revenue_cpm = 8 [default = 0];
  inline bool has_revenue_cpm() const;
  inline void clear_revenue_cpm();
  static const int kRevenueCpmFieldNumber = 8;
  inline double revenue_cpm() const;
  inline void set_revenue_cpm(double value);
  
  // optional .rubicon.data.common.AdClassType_E ad_class = 9;
  inline bool has_ad_class() const;
  inline void clear_ad_class();
  static const int kAdClassFieldNumber = 9;
  inline rubicon::data::common::AdClassType_E ad_class() const;
  inline void set_ad_class(rubicon::data::common::AdClassType_E value);
  
  // optional double rtb_tech_fee_assessed = 10;
  inline bool has_rtb_tech_fee_assessed() const;
  inline void clear_rtb_tech_fee_assessed();
  static const int kRtbTechFeeAssessedFieldNumber = 10;
  inline double rtb_tech_fee_assessed() const;
  inline void set_rtb_tech_fee_assessed(double value);
  
  // optional uint64 rtb_response_time = 11;
  inline bool has_rtb_response_time() const;
  inline void clear_rtb_response_time();
  static const int kRtbResponseTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 rtb_response_time() const;
  inline void set_rtb_response_time(::google::protobuf::uint64 value);
  
  // optional uint32 advertiser_id = 12;
  inline bool has_advertiser_id() const;
  inline void clear_advertiser_id();
  static const int kAdvertiserIdFieldNumber = 12;
  inline ::google::protobuf::uint32 advertiser_id() const;
  inline void set_advertiser_id(::google::protobuf::uint32 value);
  
  // optional uint32 rtb_billable_seat_id = 13;
  inline bool has_rtb_billable_seat_id() const;
  inline void clear_rtb_billable_seat_id();
  static const int kRtbBillableSeatIdFieldNumber = 13;
  inline ::google::protobuf::uint32 rtb_billable_seat_id() const;
  inline void set_rtb_billable_seat_id(::google::protobuf::uint32 value);
  
  // optional .rubicon.data.common.PrivateTierType_E private_tier = 14;
  inline bool has_private_tier() const;
  inline void clear_private_tier();
  static const int kPrivateTierFieldNumber = 14;
  inline rubicon::data::common::PrivateTierType_E private_tier() const;
  inline void set_private_tier(rubicon::data::common::PrivateTierType_E value);
  
  // optional uint32 bid_id = 15;
  inline bool has_bid_id() const;
  inline void clear_bid_id();
  static const int kBidIdFieldNumber = 15;
  inline ::google::protobuf::uint32 bid_id() const;
  inline void set_bid_id(::google::protobuf::uint32 value);
  
  // optional double bid_price = 16;
  inline bool has_bid_price() const;
  inline void clear_bid_price();
  static const int kBidPriceFieldNumber = 16;
  inline double bid_price() const;
  inline void set_bid_price(double value);
  
  // repeated uint32 rtb_seat_ids = 17;
  inline int rtb_seat_ids_size() const;
  inline void clear_rtb_seat_ids();
  static const int kRtbSeatIdsFieldNumber = 17;
  inline ::google::protobuf::uint32 rtb_seat_ids(int index) const;
  inline void set_rtb_seat_ids(int index, ::google::protobuf::uint32 value);
  inline void add_rtb_seat_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rtb_seat_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rtb_seat_ids();
  
  // optional double rtb_price_floor = 18;
  inline bool has_rtb_price_floor() const;
  inline void clear_rtb_price_floor();
  static const int kRtbPriceFloorFieldNumber = 18;
  inline double rtb_price_floor() const;
  inline void set_rtb_price_floor(double value);
  
  // optional double rtb_second_price = 19;
  inline bool has_rtb_second_price() const;
  inline void clear_rtb_second_price();
  static const int kRtbSecondPriceFieldNumber = 19;
  inline double rtb_second_price() const;
  inline void set_rtb_second_price(double value);
  
  // optional uint32 rtb_deal_id = 20;
  inline bool has_rtb_deal_id() const;
  inline void clear_rtb_deal_id();
  static const int kRtbDealIdFieldNumber = 20;
  inline ::google::protobuf::uint32 rtb_deal_id() const;
  inline void set_rtb_deal_id(::google::protobuf::uint32 value);
  
  // optional uint32 second_ad_id = 21;
  inline bool has_second_ad_id() const;
  inline void clear_second_ad_id();
  static const int kSecondAdIdFieldNumber = 21;
  inline ::google::protobuf::uint32 second_ad_id() const;
  inline void set_second_ad_id(::google::protobuf::uint32 value);
  
  // optional .rubicon.data.adsafe.AdSafeResponse_PB adsafe = 22;
  inline bool has_adsafe() const;
  inline void clear_adsafe();
  static const int kAdsafeFieldNumber = 22;
  inline const ::rubicon::data::adsafe::AdSafeResponse_PB& adsafe() const;
  inline ::rubicon::data::adsafe::AdSafeResponse_PB* mutable_adsafe();
  inline ::rubicon::data::adsafe::AdSafeResponse_PB* release_adsafe();
  
  // optional uint32 best_rival_ad_id = 23;
  inline bool has_best_rival_ad_id() const;
  inline void clear_best_rival_ad_id();
  static const int kBestRivalAdIdFieldNumber = 23;
  inline ::google::protobuf::uint32 best_rival_ad_id() const;
  inline void set_best_rival_ad_id(::google::protobuf::uint32 value);
  
  // optional double best_rival_cpm_price = 24;
  inline bool has_best_rival_cpm_price() const;
  inline void clear_best_rival_cpm_price();
  static const int kBestRivalCpmPriceFieldNumber = 24;
  inline double best_rival_cpm_price() const;
  inline void set_best_rival_cpm_price(double value);
  
  // optional string external_creative_id = 25;
  inline bool has_external_creative_id() const;
  inline void clear_external_creative_id();
  static const int kExternalCreativeIdFieldNumber = 25;
  inline const ::std::string& external_creative_id() const;
  inline void set_external_creative_id(const ::std::string& value);
  inline void set_external_creative_id(const char* value);
  inline void set_external_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_external_creative_id();
  inline ::std::string* release_external_creative_id();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.TransactionInfo_PB)
 private:
  inline void set_has_ad_id();
  inline void clear_has_ad_id();
  inline void set_has_network_id();
  inline void clear_has_network_id();
  inline void set_has_campaign_id();
  inline void clear_has_campaign_id();
  inline void set_has_restrict_block_match();
  inline void clear_has_restrict_block_match();
  inline void set_has_extra_block_match();
  inline void clear_has_extra_block_match();
  inline void set_has_creative_id();
  inline void clear_has_creative_id();
  inline void set_has_auction_id();
  inline void clear_has_auction_id();
  inline void set_has_revenue_cpm();
  inline void clear_has_revenue_cpm();
  inline void set_has_ad_class();
  inline void clear_has_ad_class();
  inline void set_has_rtb_tech_fee_assessed();
  inline void clear_has_rtb_tech_fee_assessed();
  inline void set_has_rtb_response_time();
  inline void clear_has_rtb_response_time();
  inline void set_has_advertiser_id();
  inline void clear_has_advertiser_id();
  inline void set_has_rtb_billable_seat_id();
  inline void clear_has_rtb_billable_seat_id();
  inline void set_has_private_tier();
  inline void clear_has_private_tier();
  inline void set_has_bid_id();
  inline void clear_has_bid_id();
  inline void set_has_bid_price();
  inline void clear_has_bid_price();
  inline void set_has_rtb_price_floor();
  inline void clear_has_rtb_price_floor();
  inline void set_has_rtb_second_price();
  inline void clear_has_rtb_second_price();
  inline void set_has_rtb_deal_id();
  inline void clear_has_rtb_deal_id();
  inline void set_has_second_ad_id();
  inline void clear_has_second_ad_id();
  inline void set_has_adsafe();
  inline void clear_has_adsafe();
  inline void set_has_best_rival_ad_id();
  inline void clear_has_best_rival_ad_id();
  inline void set_has_best_rival_cpm_price();
  inline void clear_has_best_rival_cpm_price();
  inline void set_has_external_creative_id();
  inline void clear_has_external_creative_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::common::AnUInt32_PB* ad_id_;
  ::google::protobuf::uint32 network_id_;
  ::google::protobuf::int32 campaign_id_;
  ::std::string* restrict_block_match_;
  ::std::string* extra_block_match_;
  ::std::string* auction_id_;
  ::google::protobuf::uint32 creative_id_;
  int ad_class_;
  double revenue_cpm_;
  double rtb_tech_fee_assessed_;
  ::google::protobuf::uint64 rtb_response_time_;
  ::google::protobuf::uint32 advertiser_id_;
  ::google::protobuf::uint32 rtb_billable_seat_id_;
  int private_tier_;
  ::google::protobuf::uint32 bid_id_;
  double bid_price_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rtb_seat_ids_;
  double rtb_price_floor_;
  double rtb_second_price_;
  ::google::protobuf::uint32 rtb_deal_id_;
  ::google::protobuf::uint32 second_ad_id_;
  ::rubicon::data::adsafe::AdSafeResponse_PB* adsafe_;
  double best_rival_cpm_price_;
  ::std::string* external_creative_id_;
  ::google::protobuf::uint32 best_rival_ad_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static TransactionInfo_PB* default_instance_;
};
// -------------------------------------------------------------------

class AdEngineLog_PB : public ::google::protobuf::Message {
 public:
  AdEngineLog_PB();
  virtual ~AdEngineLog_PB();
  
  AdEngineLog_PB(const AdEngineLog_PB& from);
  
  inline AdEngineLog_PB& operator=(const AdEngineLog_PB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdEngineLog_PB& default_instance();
  
  void Swap(AdEngineLog_PB* other);
  
  // implements Message ----------------------------------------------
  
  AdEngineLog_PB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdEngineLog_PB& from);
  void MergeFrom(const AdEngineLog_PB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .rubicon.data.ad_engine.UserInfo_PB user_info = 1;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  inline const ::rubicon::data::ad_engine::UserInfo_PB& user_info() const;
  inline ::rubicon::data::ad_engine::UserInfo_PB* mutable_user_info();
  inline ::rubicon::data::ad_engine::UserInfo_PB* release_user_info();
  
  // optional .rubicon.data.ad_engine.GeoInfo_PB geo_info = 2;
  inline bool has_geo_info() const;
  inline void clear_geo_info();
  static const int kGeoInfoFieldNumber = 2;
  inline const ::rubicon::data::ad_engine::GeoInfo_PB& geo_info() const;
  inline ::rubicon::data::ad_engine::GeoInfo_PB* mutable_geo_info();
  inline ::rubicon::data::ad_engine::GeoInfo_PB* release_geo_info();
  
  // optional .rubicon.data.ad_engine.InventoryInfo_PB inventory_info = 3;
  inline bool has_inventory_info() const;
  inline void clear_inventory_info();
  static const int kInventoryInfoFieldNumber = 3;
  inline const ::rubicon::data::ad_engine::InventoryInfo_PB& inventory_info() const;
  inline ::rubicon::data::ad_engine::InventoryInfo_PB* mutable_inventory_info();
  inline ::rubicon::data::ad_engine::InventoryInfo_PB* release_inventory_info();
  
  // optional .rubicon.data.ad_engine.SystemInfo_PB system_info = 4;
  inline bool has_system_info() const;
  inline void clear_system_info();
  static const int kSystemInfoFieldNumber = 4;
  inline const ::rubicon::data::ad_engine::SystemInfo_PB& system_info() const;
  inline ::rubicon::data::ad_engine::SystemInfo_PB* mutable_system_info();
  inline ::rubicon::data::ad_engine::SystemInfo_PB* release_system_info();
  
  // optional .rubicon.data.ad_engine.TransactionInfo_PB transaction_info = 5;
  inline bool has_transaction_info() const;
  inline void clear_transaction_info();
  static const int kTransactionInfoFieldNumber = 5;
  inline const ::rubicon::data::ad_engine::TransactionInfo_PB& transaction_info() const;
  inline ::rubicon::data::ad_engine::TransactionInfo_PB* mutable_transaction_info();
  inline ::rubicon::data::ad_engine::TransactionInfo_PB* release_transaction_info();
  
  // @@protoc_insertion_point(class_scope:rubicon.data.ad_engine.AdEngineLog_PB)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_geo_info();
  inline void clear_has_geo_info();
  inline void set_has_inventory_info();
  inline void clear_has_inventory_info();
  inline void set_has_system_info();
  inline void clear_has_system_info();
  inline void set_has_transaction_info();
  inline void clear_has_transaction_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::rubicon::data::ad_engine::UserInfo_PB* user_info_;
  ::rubicon::data::ad_engine::GeoInfo_PB* geo_info_;
  ::rubicon::data::ad_engine::InventoryInfo_PB* inventory_info_;
  ::rubicon::data::ad_engine::SystemInfo_PB* system_info_;
  ::rubicon::data::ad_engine::TransactionInfo_PB* transaction_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ae_5flog_2eproto();
  friend void protobuf_AssignDesc_ae_5flog_2eproto();
  friend void protobuf_ShutdownFile_ae_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static AdEngineLog_PB* default_instance_;
};
// ===================================================================


// ===================================================================

// DataCenter_PB

// optional .rubicon.data.ad_engine.DataCenter_PB.DataCenterCodes_E name = 1;
inline bool DataCenter_PB::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCenter_PB::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCenter_PB::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCenter_PB::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E DataCenter_PB::name() const {
  return static_cast< ::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E >(name_);
}
inline void DataCenter_PB::set_name(::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E value) {
  GOOGLE_DCHECK(::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E_IsValid(value));
  set_has_name();
  name_ = value;
}

// optional string raw_value = 2;
inline bool DataCenter_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCenter_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCenter_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCenter_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& DataCenter_PB::raw_value() const {
  return *raw_value_;
}
inline void DataCenter_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void DataCenter_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void DataCenter_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataCenter_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* DataCenter_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DKHistory_PB

// optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
inline bool DKHistory_PB::has_ad_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DKHistory_PB::set_has_ad_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DKHistory_PB::clear_has_ad_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DKHistory_PB::clear_ad_id() {
  if (ad_id_ != NULL) ad_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_ad_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& DKHistory_PB::ad_id() const {
  return ad_id_ != NULL ? *ad_id_ : *default_instance_->ad_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* DKHistory_PB::mutable_ad_id() {
  set_has_ad_id();
  if (ad_id_ == NULL) ad_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return ad_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* DKHistory_PB::release_ad_id() {
  clear_has_ad_id();
  ::rubicon::data::common::AnUInt32_PB* temp = ad_id_;
  ad_id_ = NULL;
  return temp;
}

// repeated uint32 zone_ids = 2;
inline int DKHistory_PB::zone_ids_size() const {
  return zone_ids_.size();
}
inline void DKHistory_PB::clear_zone_ids() {
  zone_ids_.Clear();
}
inline ::google::protobuf::uint32 DKHistory_PB::zone_ids(int index) const {
  return zone_ids_.Get(index);
}
inline void DKHistory_PB::set_zone_ids(int index, ::google::protobuf::uint32 value) {
  zone_ids_.Set(index, value);
}
inline void DKHistory_PB::add_zone_ids(::google::protobuf::uint32 value) {
  zone_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DKHistory_PB::zone_ids() const {
  return zone_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DKHistory_PB::mutable_zone_ids() {
  return &zone_ids_;
}

// -------------------------------------------------------------------

// ImpressionType_PB

// required .rubicon.data.ad_engine.ImpressionType_PB.ImpressionCode_E code = 2;
inline bool ImpressionType_PB::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImpressionType_PB::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImpressionType_PB::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImpressionType_PB::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E ImpressionType_PB::code() const {
  return static_cast< ::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E >(code_);
}
inline void ImpressionType_PB::set_code(::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E value) {
  GOOGLE_DCHECK(::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string raw_value = 3;
inline bool ImpressionType_PB::has_raw_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImpressionType_PB::set_has_raw_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImpressionType_PB::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImpressionType_PB::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& ImpressionType_PB::raw_value() const {
  return *raw_value_;
}
inline void ImpressionType_PB::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void ImpressionType_PB::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void ImpressionType_PB::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImpressionType_PB::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* ImpressionType_PB::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MarketPricing_PB

// optional string price_points_debug = 1;
inline bool MarketPricing_PB::has_price_points_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketPricing_PB::set_has_price_points_debug() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketPricing_PB::clear_has_price_points_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketPricing_PB::clear_price_points_debug() {
  if (price_points_debug_ != &::google::protobuf::internal::kEmptyString) {
    price_points_debug_->clear();
  }
  clear_has_price_points_debug();
}
inline const ::std::string& MarketPricing_PB::price_points_debug() const {
  return *price_points_debug_;
}
inline void MarketPricing_PB::set_price_points_debug(const ::std::string& value) {
  set_has_price_points_debug();
  if (price_points_debug_ == &::google::protobuf::internal::kEmptyString) {
    price_points_debug_ = new ::std::string;
  }
  price_points_debug_->assign(value);
}
inline void MarketPricing_PB::set_price_points_debug(const char* value) {
  set_has_price_points_debug();
  if (price_points_debug_ == &::google::protobuf::internal::kEmptyString) {
    price_points_debug_ = new ::std::string;
  }
  price_points_debug_->assign(value);
}
inline void MarketPricing_PB::set_price_points_debug(const char* value, size_t size) {
  set_has_price_points_debug();
  if (price_points_debug_ == &::google::protobuf::internal::kEmptyString) {
    price_points_debug_ = new ::std::string;
  }
  price_points_debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketPricing_PB::mutable_price_points_debug() {
  set_has_price_points_debug();
  if (price_points_debug_ == &::google::protobuf::internal::kEmptyString) {
    price_points_debug_ = new ::std::string;
  }
  return price_points_debug_;
}
inline ::std::string* MarketPricing_PB::release_price_points_debug() {
  clear_has_price_points_debug();
  if (price_points_debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = price_points_debug_;
    price_points_debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AdCounts_PB

// optional uint32 guaranteed_count = 1;
inline bool AdCounts_PB::has_guaranteed_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdCounts_PB::set_has_guaranteed_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdCounts_PB::clear_has_guaranteed_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdCounts_PB::clear_guaranteed_count() {
  guaranteed_count_ = 0u;
  clear_has_guaranteed_count();
}
inline ::google::protobuf::uint32 AdCounts_PB::guaranteed_count() const {
  return guaranteed_count_;
}
inline void AdCounts_PB::set_guaranteed_count(::google::protobuf::uint32 value) {
  set_has_guaranteed_count();
  guaranteed_count_ = value;
}

// optional uint32 bids_count = 2;
inline bool AdCounts_PB::has_bids_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdCounts_PB::set_has_bids_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdCounts_PB::clear_has_bids_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdCounts_PB::clear_bids_count() {
  bids_count_ = 0u;
  clear_has_bids_count();
}
inline ::google::protobuf::uint32 AdCounts_PB::bids_count() const {
  return bids_count_;
}
inline void AdCounts_PB::set_bids_count(::google::protobuf::uint32 value) {
  set_has_bids_count();
  bids_count_ = value;
}

// optional uint32 bidded_ads_count = 3;
inline bool AdCounts_PB::has_bidded_ads_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdCounts_PB::set_has_bidded_ads_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdCounts_PB::clear_has_bidded_ads_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdCounts_PB::clear_bidded_ads_count() {
  bidded_ads_count_ = 0u;
  clear_has_bidded_ads_count();
}
inline ::google::protobuf::uint32 AdCounts_PB::bidded_ads_count() const {
  return bidded_ads_count_;
}
inline void AdCounts_PB::set_bidded_ads_count(::google::protobuf::uint32 value) {
  set_has_bidded_ads_count();
  bidded_ads_count_ = value;
}

// optional uint32 total_valid_count = 4;
inline bool AdCounts_PB::has_total_valid_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdCounts_PB::set_has_total_valid_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdCounts_PB::clear_has_total_valid_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdCounts_PB::clear_total_valid_count() {
  total_valid_count_ = 0u;
  clear_has_total_valid_count();
}
inline ::google::protobuf::uint32 AdCounts_PB::total_valid_count() const {
  return total_valid_count_;
}
inline void AdCounts_PB::set_total_valid_count(::google::protobuf::uint32 value) {
  set_has_total_valid_count();
  total_valid_count_ = value;
}

// -------------------------------------------------------------------

// UserInfo_PB

// optional .rubicon.data.common.IPAddress_PB sender_addr = 1;
inline bool UserInfo_PB::has_sender_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo_PB::set_has_sender_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo_PB::clear_has_sender_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo_PB::clear_sender_addr() {
  if (sender_addr_ != NULL) sender_addr_->::rubicon::data::common::IPAddress_PB::Clear();
  clear_has_sender_addr();
}
inline const ::rubicon::data::common::IPAddress_PB& UserInfo_PB::sender_addr() const {
  return sender_addr_ != NULL ? *sender_addr_ : *default_instance_->sender_addr_;
}
inline ::rubicon::data::common::IPAddress_PB* UserInfo_PB::mutable_sender_addr() {
  set_has_sender_addr();
  if (sender_addr_ == NULL) sender_addr_ = new ::rubicon::data::common::IPAddress_PB;
  return sender_addr_;
}
inline ::rubicon::data::common::IPAddress_PB* UserInfo_PB::release_sender_addr() {
  clear_has_sender_addr();
  ::rubicon::data::common::IPAddress_PB* temp = sender_addr_;
  sender_addr_ = NULL;
  return temp;
}

// optional string user_id = 2;
inline bool UserInfo_PB::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo_PB::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo_PB::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo_PB::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& UserInfo_PB::user_id() const {
  return *user_id_;
}
inline void UserInfo_PB::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void UserInfo_PB::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void UserInfo_PB::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo_PB::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* UserInfo_PB::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 session_id = 3;
inline bool UserInfo_PB::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo_PB::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo_PB::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo_PB::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
inline ::google::protobuf::uint64 UserInfo_PB::session_id() const {
  return session_id_;
}
inline void UserInfo_PB::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
}

// optional uint32 browser_time_stamp = 4;
inline bool UserInfo_PB::has_browser_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo_PB::set_has_browser_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo_PB::clear_has_browser_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo_PB::clear_browser_time_stamp() {
  browser_time_stamp_ = 0u;
  clear_has_browser_time_stamp();
}
inline ::google::protobuf::uint32 UserInfo_PB::browser_time_stamp() const {
  return browser_time_stamp_;
}
inline void UserInfo_PB::set_browser_time_stamp(::google::protobuf::uint32 value) {
  set_has_browser_time_stamp();
  browser_time_stamp_ = value;
}

// optional uint32 browser_code = 5;
inline bool UserInfo_PB::has_browser_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo_PB::set_has_browser_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo_PB::clear_has_browser_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo_PB::clear_browser_code() {
  browser_code_ = 0u;
  clear_has_browser_code();
}
inline ::google::protobuf::uint32 UserInfo_PB::browser_code() const {
  return browser_code_;
}
inline void UserInfo_PB::set_browser_code(::google::protobuf::uint32 value) {
  set_has_browser_code();
  browser_code_ = value;
}

// optional uint32 os_code = 6;
inline bool UserInfo_PB::has_os_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo_PB::set_has_os_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo_PB::clear_has_os_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo_PB::clear_os_code() {
  os_code_ = 0u;
  clear_has_os_code();
}
inline ::google::protobuf::uint32 UserInfo_PB::os_code() const {
  return os_code_;
}
inline void UserInfo_PB::set_os_code(::google::protobuf::uint32 value) {
  set_has_os_code();
  os_code_ = value;
}

// optional string accept_language = 7;
inline bool UserInfo_PB::has_accept_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo_PB::set_has_accept_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo_PB::clear_has_accept_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo_PB::clear_accept_language() {
  if (accept_language_ != &::google::protobuf::internal::kEmptyString) {
    accept_language_->clear();
  }
  clear_has_accept_language();
}
inline const ::std::string& UserInfo_PB::accept_language() const {
  return *accept_language_;
}
inline void UserInfo_PB::set_accept_language(const ::std::string& value) {
  set_has_accept_language();
  if (accept_language_ == &::google::protobuf::internal::kEmptyString) {
    accept_language_ = new ::std::string;
  }
  accept_language_->assign(value);
}
inline void UserInfo_PB::set_accept_language(const char* value) {
  set_has_accept_language();
  if (accept_language_ == &::google::protobuf::internal::kEmptyString) {
    accept_language_ = new ::std::string;
  }
  accept_language_->assign(value);
}
inline void UserInfo_PB::set_accept_language(const char* value, size_t size) {
  set_has_accept_language();
  if (accept_language_ == &::google::protobuf::internal::kEmptyString) {
    accept_language_ = new ::std::string;
  }
  accept_language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo_PB::mutable_accept_language() {
  set_has_accept_language();
  if (accept_language_ == &::google::protobuf::internal::kEmptyString) {
    accept_language_ = new ::std::string;
  }
  return accept_language_;
}
inline ::std::string* UserInfo_PB::release_accept_language() {
  clear_has_accept_language();
  if (accept_language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accept_language_;
    accept_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_agent_id = 8;
inline bool UserInfo_PB::has_user_agent_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo_PB::set_has_user_agent_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo_PB::clear_has_user_agent_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo_PB::clear_user_agent_id() {
  if (user_agent_id_ != &::google::protobuf::internal::kEmptyString) {
    user_agent_id_->clear();
  }
  clear_has_user_agent_id();
}
inline const ::std::string& UserInfo_PB::user_agent_id() const {
  return *user_agent_id_;
}
inline void UserInfo_PB::set_user_agent_id(const ::std::string& value) {
  set_has_user_agent_id();
  if (user_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_id_ = new ::std::string;
  }
  user_agent_id_->assign(value);
}
inline void UserInfo_PB::set_user_agent_id(const char* value) {
  set_has_user_agent_id();
  if (user_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_id_ = new ::std::string;
  }
  user_agent_id_->assign(value);
}
inline void UserInfo_PB::set_user_agent_id(const char* value, size_t size) {
  set_has_user_agent_id();
  if (user_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_id_ = new ::std::string;
  }
  user_agent_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo_PB::mutable_user_agent_id() {
  set_has_user_agent_id();
  if (user_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_id_ = new ::std::string;
  }
  return user_agent_id_;
}
inline ::std::string* UserInfo_PB::release_user_agent_id() {
  clear_has_user_agent_id();
  if (user_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_id_;
    user_agent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string behavioral_cookie = 9;
inline bool UserInfo_PB::has_behavioral_cookie() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo_PB::set_has_behavioral_cookie() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo_PB::clear_has_behavioral_cookie() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo_PB::clear_behavioral_cookie() {
  if (behavioral_cookie_ != &::google::protobuf::internal::kEmptyString) {
    behavioral_cookie_->clear();
  }
  clear_has_behavioral_cookie();
}
inline const ::std::string& UserInfo_PB::behavioral_cookie() const {
  return *behavioral_cookie_;
}
inline void UserInfo_PB::set_behavioral_cookie(const ::std::string& value) {
  set_has_behavioral_cookie();
  if (behavioral_cookie_ == &::google::protobuf::internal::kEmptyString) {
    behavioral_cookie_ = new ::std::string;
  }
  behavioral_cookie_->assign(value);
}
inline void UserInfo_PB::set_behavioral_cookie(const char* value) {
  set_has_behavioral_cookie();
  if (behavioral_cookie_ == &::google::protobuf::internal::kEmptyString) {
    behavioral_cookie_ = new ::std::string;
  }
  behavioral_cookie_->assign(value);
}
inline void UserInfo_PB::set_behavioral_cookie(const char* value, size_t size) {
  set_has_behavioral_cookie();
  if (behavioral_cookie_ == &::google::protobuf::internal::kEmptyString) {
    behavioral_cookie_ = new ::std::string;
  }
  behavioral_cookie_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo_PB::mutable_behavioral_cookie() {
  set_has_behavioral_cookie();
  if (behavioral_cookie_ == &::google::protobuf::internal::kEmptyString) {
    behavioral_cookie_ = new ::std::string;
  }
  return behavioral_cookie_;
}
inline ::std::string* UserInfo_PB::release_behavioral_cookie() {
  clear_has_behavioral_cookie();
  if (behavioral_cookie_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = behavioral_cookie_;
    behavioral_cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 site_size_count = 10 [default = 0];
inline bool UserInfo_PB::has_site_size_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo_PB::set_has_site_size_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo_PB::clear_has_site_size_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo_PB::clear_site_size_count() {
  site_size_count_ = GOOGLE_ULONGLONG(0);
  clear_has_site_size_count();
}
inline ::google::protobuf::uint64 UserInfo_PB::site_size_count() const {
  return site_size_count_;
}
inline void UserInfo_PB::set_site_size_count(::google::protobuf::uint64 value) {
  set_has_site_size_count();
  site_size_count_ = value;
}

// -------------------------------------------------------------------

// GeoInfo_PB

// optional .rubicon.data.geo.Geo_PB geo = 1;
inline bool GeoInfo_PB::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoInfo_PB::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoInfo_PB::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoInfo_PB::clear_geo() {
  if (geo_ != NULL) geo_->::rubicon::data::geo::Geo_PB::Clear();
  clear_has_geo();
}
inline const ::rubicon::data::geo::Geo_PB& GeoInfo_PB::geo() const {
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::rubicon::data::geo::Geo_PB* GeoInfo_PB::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::rubicon::data::geo::Geo_PB;
  return geo_;
}
inline ::rubicon::data::geo::Geo_PB* GeoInfo_PB::release_geo() {
  clear_has_geo();
  ::rubicon::data::geo::Geo_PB* temp = geo_;
  geo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// InventoryInfo_PB

// optional .rubicon.data.ad_engine.ImpressionType_PB impression_type = 1;
inline bool InventoryInfo_PB::has_impression_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InventoryInfo_PB::set_has_impression_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InventoryInfo_PB::clear_has_impression_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InventoryInfo_PB::clear_impression_type() {
  if (impression_type_ != NULL) impression_type_->::rubicon::data::ad_engine::ImpressionType_PB::Clear();
  clear_has_impression_type();
}
inline const ::rubicon::data::ad_engine::ImpressionType_PB& InventoryInfo_PB::impression_type() const {
  return impression_type_ != NULL ? *impression_type_ : *default_instance_->impression_type_;
}
inline ::rubicon::data::ad_engine::ImpressionType_PB* InventoryInfo_PB::mutable_impression_type() {
  set_has_impression_type();
  if (impression_type_ == NULL) impression_type_ = new ::rubicon::data::ad_engine::ImpressionType_PB;
  return impression_type_;
}
inline ::rubicon::data::ad_engine::ImpressionType_PB* InventoryInfo_PB::release_impression_type() {
  clear_has_impression_type();
  ::rubicon::data::ad_engine::ImpressionType_PB* temp = impression_type_;
  impression_type_ = NULL;
  return temp;
}

// optional string refering_domain = 2;
inline bool InventoryInfo_PB::has_refering_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InventoryInfo_PB::set_has_refering_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InventoryInfo_PB::clear_has_refering_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InventoryInfo_PB::clear_refering_domain() {
  if (refering_domain_ != &::google::protobuf::internal::kEmptyString) {
    refering_domain_->clear();
  }
  clear_has_refering_domain();
}
inline const ::std::string& InventoryInfo_PB::refering_domain() const {
  return *refering_domain_;
}
inline void InventoryInfo_PB::set_refering_domain(const ::std::string& value) {
  set_has_refering_domain();
  if (refering_domain_ == &::google::protobuf::internal::kEmptyString) {
    refering_domain_ = new ::std::string;
  }
  refering_domain_->assign(value);
}
inline void InventoryInfo_PB::set_refering_domain(const char* value) {
  set_has_refering_domain();
  if (refering_domain_ == &::google::protobuf::internal::kEmptyString) {
    refering_domain_ = new ::std::string;
  }
  refering_domain_->assign(value);
}
inline void InventoryInfo_PB::set_refering_domain(const char* value, size_t size) {
  set_has_refering_domain();
  if (refering_domain_ == &::google::protobuf::internal::kEmptyString) {
    refering_domain_ = new ::std::string;
  }
  refering_domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InventoryInfo_PB::mutable_refering_domain() {
  set_has_refering_domain();
  if (refering_domain_ == &::google::protobuf::internal::kEmptyString) {
    refering_domain_ = new ::std::string;
  }
  return refering_domain_;
}
inline ::std::string* InventoryInfo_PB::release_refering_domain() {
  clear_has_refering_domain();
  if (refering_domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refering_domain_;
    refering_domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string refering_uri = 3;
inline bool InventoryInfo_PB::has_refering_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InventoryInfo_PB::set_has_refering_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InventoryInfo_PB::clear_has_refering_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InventoryInfo_PB::clear_refering_uri() {
  if (refering_uri_ != &::google::protobuf::internal::kEmptyString) {
    refering_uri_->clear();
  }
  clear_has_refering_uri();
}
inline const ::std::string& InventoryInfo_PB::refering_uri() const {
  return *refering_uri_;
}
inline void InventoryInfo_PB::set_refering_uri(const ::std::string& value) {
  set_has_refering_uri();
  if (refering_uri_ == &::google::protobuf::internal::kEmptyString) {
    refering_uri_ = new ::std::string;
  }
  refering_uri_->assign(value);
}
inline void InventoryInfo_PB::set_refering_uri(const char* value) {
  set_has_refering_uri();
  if (refering_uri_ == &::google::protobuf::internal::kEmptyString) {
    refering_uri_ = new ::std::string;
  }
  refering_uri_->assign(value);
}
inline void InventoryInfo_PB::set_refering_uri(const char* value, size_t size) {
  set_has_refering_uri();
  if (refering_uri_ == &::google::protobuf::internal::kEmptyString) {
    refering_uri_ = new ::std::string;
  }
  refering_uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InventoryInfo_PB::mutable_refering_uri() {
  set_has_refering_uri();
  if (refering_uri_ == &::google::protobuf::internal::kEmptyString) {
    refering_uri_ = new ::std::string;
  }
  return refering_uri_;
}
inline ::std::string* InventoryInfo_PB::release_refering_uri() {
  clear_has_refering_uri();
  if (refering_uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = refering_uri_;
    refering_uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .rubicon.data.common.MimeType_E mime = 4 [default = UNKNOWN_MIME];
inline bool InventoryInfo_PB::has_mime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InventoryInfo_PB::set_has_mime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InventoryInfo_PB::clear_has_mime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InventoryInfo_PB::clear_mime() {
  mime_ = 0;
  clear_has_mime();
}
inline rubicon::data::common::MimeType_E InventoryInfo_PB::mime() const {
  return static_cast< rubicon::data::common::MimeType_E >(mime_);
}
inline void InventoryInfo_PB::set_mime(rubicon::data::common::MimeType_E value) {
  GOOGLE_DCHECK(rubicon::data::common::MimeType_E_IsValid(value));
  set_has_mime();
  mime_ = value;
}

// optional .rubicon.data.ad_engine.Inventory_PB inventory = 5;
inline bool InventoryInfo_PB::has_inventory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InventoryInfo_PB::set_has_inventory() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InventoryInfo_PB::clear_has_inventory() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InventoryInfo_PB::clear_inventory() {
  if (inventory_ != NULL) inventory_->::rubicon::data::ad_engine::Inventory_PB::Clear();
  clear_has_inventory();
}
inline const ::rubicon::data::ad_engine::Inventory_PB& InventoryInfo_PB::inventory() const {
  return inventory_ != NULL ? *inventory_ : *default_instance_->inventory_;
}
inline ::rubicon::data::ad_engine::Inventory_PB* InventoryInfo_PB::mutable_inventory() {
  set_has_inventory();
  if (inventory_ == NULL) inventory_ = new ::rubicon::data::ad_engine::Inventory_PB;
  return inventory_;
}
inline ::rubicon::data::ad_engine::Inventory_PB* InventoryInfo_PB::release_inventory() {
  clear_has_inventory();
  ::rubicon::data::ad_engine::Inventory_PB* temp = inventory_;
  inventory_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.PublisherUser_PB publisher_user = 6;
inline bool InventoryInfo_PB::has_publisher_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InventoryInfo_PB::set_has_publisher_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InventoryInfo_PB::clear_has_publisher_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InventoryInfo_PB::clear_publisher_user() {
  if (publisher_user_ != NULL) publisher_user_->::rubicon::data::ad_engine::PublisherUser_PB::Clear();
  clear_has_publisher_user();
}
inline const ::rubicon::data::ad_engine::PublisherUser_PB& InventoryInfo_PB::publisher_user() const {
  return publisher_user_ != NULL ? *publisher_user_ : *default_instance_->publisher_user_;
}
inline ::rubicon::data::ad_engine::PublisherUser_PB* InventoryInfo_PB::mutable_publisher_user() {
  set_has_publisher_user();
  if (publisher_user_ == NULL) publisher_user_ = new ::rubicon::data::ad_engine::PublisherUser_PB;
  return publisher_user_;
}
inline ::rubicon::data::ad_engine::PublisherUser_PB* InventoryInfo_PB::release_publisher_user() {
  clear_has_publisher_user();
  ::rubicon::data::ad_engine::PublisherUser_PB* temp = publisher_user_;
  publisher_user_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SystemInfo_PB

// required uint32 time_stamp = 1;
inline bool SystemInfo_PB::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemInfo_PB::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemInfo_PB::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemInfo_PB::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 SystemInfo_PB::time_stamp() const {
  return time_stamp_;
}
inline void SystemInfo_PB::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional uint64 ae_response_time = 2 [default = 0];
inline bool SystemInfo_PB::has_ae_response_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemInfo_PB::set_has_ae_response_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemInfo_PB::clear_has_ae_response_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemInfo_PB::clear_ae_response_time() {
  ae_response_time_ = GOOGLE_ULONGLONG(0);
  clear_has_ae_response_time();
}
inline ::google::protobuf::uint64 SystemInfo_PB::ae_response_time() const {
  return ae_response_time_;
}
inline void SystemInfo_PB::set_ae_response_time(::google::protobuf::uint64 value) {
  set_has_ae_response_time();
  ae_response_time_ = value;
}

// optional .rubicon.data.ad_engine.DataCenter_PB data_center = 3;
inline bool SystemInfo_PB::has_data_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemInfo_PB::set_has_data_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemInfo_PB::clear_has_data_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemInfo_PB::clear_data_center() {
  if (data_center_ != NULL) data_center_->::rubicon::data::ad_engine::DataCenter_PB::Clear();
  clear_has_data_center();
}
inline const ::rubicon::data::ad_engine::DataCenter_PB& SystemInfo_PB::data_center() const {
  return data_center_ != NULL ? *data_center_ : *default_instance_->data_center_;
}
inline ::rubicon::data::ad_engine::DataCenter_PB* SystemInfo_PB::mutable_data_center() {
  set_has_data_center();
  if (data_center_ == NULL) data_center_ = new ::rubicon::data::ad_engine::DataCenter_PB;
  return data_center_;
}
inline ::rubicon::data::ad_engine::DataCenter_PB* SystemInfo_PB::release_data_center() {
  clear_has_data_center();
  ::rubicon::data::ad_engine::DataCenter_PB* temp = data_center_;
  data_center_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.DKHistory_PB dk_history = 4;
inline bool SystemInfo_PB::has_dk_history() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemInfo_PB::set_has_dk_history() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemInfo_PB::clear_has_dk_history() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemInfo_PB::clear_dk_history() {
  if (dk_history_ != NULL) dk_history_->::rubicon::data::ad_engine::DKHistory_PB::Clear();
  clear_has_dk_history();
}
inline const ::rubicon::data::ad_engine::DKHistory_PB& SystemInfo_PB::dk_history() const {
  return dk_history_ != NULL ? *dk_history_ : *default_instance_->dk_history_;
}
inline ::rubicon::data::ad_engine::DKHistory_PB* SystemInfo_PB::mutable_dk_history() {
  set_has_dk_history();
  if (dk_history_ == NULL) dk_history_ = new ::rubicon::data::ad_engine::DKHistory_PB;
  return dk_history_;
}
inline ::rubicon::data::ad_engine::DKHistory_PB* SystemInfo_PB::release_dk_history() {
  clear_has_dk_history();
  ::rubicon::data::ad_engine::DKHistory_PB* temp = dk_history_;
  dk_history_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.AlgorithmCode_E algorithm = 5;
inline bool SystemInfo_PB::has_algorithm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemInfo_PB::set_has_algorithm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemInfo_PB::clear_has_algorithm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemInfo_PB::clear_algorithm() {
  algorithm_ = 0;
  clear_has_algorithm();
}
inline rubicon::data::ad_engine::AlgorithmCode_E SystemInfo_PB::algorithm() const {
  return static_cast< rubicon::data::ad_engine::AlgorithmCode_E >(algorithm_);
}
inline void SystemInfo_PB::set_algorithm(rubicon::data::ad_engine::AlgorithmCode_E value) {
  GOOGLE_DCHECK(rubicon::data::ad_engine::AlgorithmCode_E_IsValid(value));
  set_has_algorithm();
  algorithm_ = value;
}

// optional .rubicon.data.ad_engine.RTBOperationResultCode_E rtb_code = 6;
inline bool SystemInfo_PB::has_rtb_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemInfo_PB::set_has_rtb_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemInfo_PB::clear_has_rtb_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemInfo_PB::clear_rtb_code() {
  rtb_code_ = 0;
  clear_has_rtb_code();
}
inline rubicon::data::ad_engine::RTBOperationResultCode_E SystemInfo_PB::rtb_code() const {
  return static_cast< rubicon::data::ad_engine::RTBOperationResultCode_E >(rtb_code_);
}
inline void SystemInfo_PB::set_rtb_code(rubicon::data::ad_engine::RTBOperationResultCode_E value) {
  GOOGLE_DCHECK(rubicon::data::ad_engine::RTBOperationResultCode_E_IsValid(value));
  set_has_rtb_code();
  rtb_code_ = value;
}

// optional uint32 bids_accepted = 7;
inline bool SystemInfo_PB::has_bids_accepted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemInfo_PB::set_has_bids_accepted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemInfo_PB::clear_has_bids_accepted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemInfo_PB::clear_bids_accepted() {
  bids_accepted_ = 0u;
  clear_has_bids_accepted();
}
inline ::google::protobuf::uint32 SystemInfo_PB::bids_accepted() const {
  return bids_accepted_;
}
inline void SystemInfo_PB::set_bids_accepted(::google::protobuf::uint32 value) {
  set_has_bids_accepted();
  bids_accepted_ = value;
}

// optional uint32 bids_received = 8;
inline bool SystemInfo_PB::has_bids_received() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemInfo_PB::set_has_bids_received() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SystemInfo_PB::clear_has_bids_received() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SystemInfo_PB::clear_bids_received() {
  bids_received_ = 0u;
  clear_has_bids_received();
}
inline ::google::protobuf::uint32 SystemInfo_PB::bids_received() const {
  return bids_received_;
}
inline void SystemInfo_PB::set_bids_received(::google::protobuf::uint32 value) {
  set_has_bids_received();
  bids_received_ = value;
}

// optional string opaque_debug_log = 9;
inline bool SystemInfo_PB::has_opaque_debug_log() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemInfo_PB::set_has_opaque_debug_log() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SystemInfo_PB::clear_has_opaque_debug_log() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SystemInfo_PB::clear_opaque_debug_log() {
  if (opaque_debug_log_ != &::google::protobuf::internal::kEmptyString) {
    opaque_debug_log_->clear();
  }
  clear_has_opaque_debug_log();
}
inline const ::std::string& SystemInfo_PB::opaque_debug_log() const {
  return *opaque_debug_log_;
}
inline void SystemInfo_PB::set_opaque_debug_log(const ::std::string& value) {
  set_has_opaque_debug_log();
  if (opaque_debug_log_ == &::google::protobuf::internal::kEmptyString) {
    opaque_debug_log_ = new ::std::string;
  }
  opaque_debug_log_->assign(value);
}
inline void SystemInfo_PB::set_opaque_debug_log(const char* value) {
  set_has_opaque_debug_log();
  if (opaque_debug_log_ == &::google::protobuf::internal::kEmptyString) {
    opaque_debug_log_ = new ::std::string;
  }
  opaque_debug_log_->assign(value);
}
inline void SystemInfo_PB::set_opaque_debug_log(const char* value, size_t size) {
  set_has_opaque_debug_log();
  if (opaque_debug_log_ == &::google::protobuf::internal::kEmptyString) {
    opaque_debug_log_ = new ::std::string;
  }
  opaque_debug_log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemInfo_PB::mutable_opaque_debug_log() {
  set_has_opaque_debug_log();
  if (opaque_debug_log_ == &::google::protobuf::internal::kEmptyString) {
    opaque_debug_log_ = new ::std::string;
  }
  return opaque_debug_log_;
}
inline ::std::string* SystemInfo_PB::release_opaque_debug_log() {
  clear_has_opaque_debug_log();
  if (opaque_debug_log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opaque_debug_log_;
    opaque_debug_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .rubicon.data.ad_engine.MarketPricing_PB market_pricing = 10;
inline bool SystemInfo_PB::has_market_pricing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemInfo_PB::set_has_market_pricing() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SystemInfo_PB::clear_has_market_pricing() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SystemInfo_PB::clear_market_pricing() {
  if (market_pricing_ != NULL) market_pricing_->::rubicon::data::ad_engine::MarketPricing_PB::Clear();
  clear_has_market_pricing();
}
inline const ::rubicon::data::ad_engine::MarketPricing_PB& SystemInfo_PB::market_pricing() const {
  return market_pricing_ != NULL ? *market_pricing_ : *default_instance_->market_pricing_;
}
inline ::rubicon::data::ad_engine::MarketPricing_PB* SystemInfo_PB::mutable_market_pricing() {
  set_has_market_pricing();
  if (market_pricing_ == NULL) market_pricing_ = new ::rubicon::data::ad_engine::MarketPricing_PB;
  return market_pricing_;
}
inline ::rubicon::data::ad_engine::MarketPricing_PB* SystemInfo_PB::release_market_pricing() {
  clear_has_market_pricing();
  ::rubicon::data::ad_engine::MarketPricing_PB* temp = market_pricing_;
  market_pricing_ = NULL;
  return temp;
}

// optional double rtb_premium_applied = 11;
inline bool SystemInfo_PB::has_rtb_premium_applied() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemInfo_PB::set_has_rtb_premium_applied() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SystemInfo_PB::clear_has_rtb_premium_applied() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SystemInfo_PB::clear_rtb_premium_applied() {
  rtb_premium_applied_ = 0;
  clear_has_rtb_premium_applied();
}
inline double SystemInfo_PB::rtb_premium_applied() const {
  return rtb_premium_applied_;
}
inline void SystemInfo_PB::set_rtb_premium_applied(double value) {
  set_has_rtb_premium_applied();
  rtb_premium_applied_ = value;
}

// optional .rubicon.data.ad_engine.PSACode_E psa_code = 12;
inline bool SystemInfo_PB::has_psa_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemInfo_PB::set_has_psa_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SystemInfo_PB::clear_has_psa_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SystemInfo_PB::clear_psa_code() {
  psa_code_ = 0;
  clear_has_psa_code();
}
inline rubicon::data::ad_engine::PSACode_E SystemInfo_PB::psa_code() const {
  return static_cast< rubicon::data::ad_engine::PSACode_E >(psa_code_);
}
inline void SystemInfo_PB::set_psa_code(rubicon::data::ad_engine::PSACode_E value) {
  GOOGLE_DCHECK(rubicon::data::ad_engine::PSACode_E_IsValid(value));
  set_has_psa_code();
  psa_code_ = value;
}

// optional string pi_debug = 13;
inline bool SystemInfo_PB::has_pi_debug() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemInfo_PB::set_has_pi_debug() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SystemInfo_PB::clear_has_pi_debug() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SystemInfo_PB::clear_pi_debug() {
  if (pi_debug_ != &::google::protobuf::internal::kEmptyString) {
    pi_debug_->clear();
  }
  clear_has_pi_debug();
}
inline const ::std::string& SystemInfo_PB::pi_debug() const {
  return *pi_debug_;
}
inline void SystemInfo_PB::set_pi_debug(const ::std::string& value) {
  set_has_pi_debug();
  if (pi_debug_ == &::google::protobuf::internal::kEmptyString) {
    pi_debug_ = new ::std::string;
  }
  pi_debug_->assign(value);
}
inline void SystemInfo_PB::set_pi_debug(const char* value) {
  set_has_pi_debug();
  if (pi_debug_ == &::google::protobuf::internal::kEmptyString) {
    pi_debug_ = new ::std::string;
  }
  pi_debug_->assign(value);
}
inline void SystemInfo_PB::set_pi_debug(const char* value, size_t size) {
  set_has_pi_debug();
  if (pi_debug_ == &::google::protobuf::internal::kEmptyString) {
    pi_debug_ = new ::std::string;
  }
  pi_debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemInfo_PB::mutable_pi_debug() {
  set_has_pi_debug();
  if (pi_debug_ == &::google::protobuf::internal::kEmptyString) {
    pi_debug_ = new ::std::string;
  }
  return pi_debug_;
}
inline ::std::string* SystemInfo_PB::release_pi_debug() {
  clear_has_pi_debug();
  if (pi_debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pi_debug_;
    pi_debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .rubicon.data.ad_engine.AdCounts_PB ad_counts = 14;
inline bool SystemInfo_PB::has_ad_counts() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemInfo_PB::set_has_ad_counts() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SystemInfo_PB::clear_has_ad_counts() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SystemInfo_PB::clear_ad_counts() {
  if (ad_counts_ != NULL) ad_counts_->::rubicon::data::ad_engine::AdCounts_PB::Clear();
  clear_has_ad_counts();
}
inline const ::rubicon::data::ad_engine::AdCounts_PB& SystemInfo_PB::ad_counts() const {
  return ad_counts_ != NULL ? *ad_counts_ : *default_instance_->ad_counts_;
}
inline ::rubicon::data::ad_engine::AdCounts_PB* SystemInfo_PB::mutable_ad_counts() {
  set_has_ad_counts();
  if (ad_counts_ == NULL) ad_counts_ = new ::rubicon::data::ad_engine::AdCounts_PB;
  return ad_counts_;
}
inline ::rubicon::data::ad_engine::AdCounts_PB* SystemInfo_PB::release_ad_counts() {
  clear_has_ad_counts();
  ::rubicon::data::ad_engine::AdCounts_PB* temp = ad_counts_;
  ad_counts_ = NULL;
  return temp;
}

// optional double imp_quality_score = 15;
inline bool SystemInfo_PB::has_imp_quality_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemInfo_PB::set_has_imp_quality_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SystemInfo_PB::clear_has_imp_quality_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SystemInfo_PB::clear_imp_quality_score() {
  imp_quality_score_ = 0;
  clear_has_imp_quality_score();
}
inline double SystemInfo_PB::imp_quality_score() const {
  return imp_quality_score_;
}
inline void SystemInfo_PB::set_imp_quality_score(double value) {
  set_has_imp_quality_score();
  imp_quality_score_ = value;
}

// optional string uri_arguments = 16;
inline bool SystemInfo_PB::has_uri_arguments() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemInfo_PB::set_has_uri_arguments() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SystemInfo_PB::clear_has_uri_arguments() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SystemInfo_PB::clear_uri_arguments() {
  if (uri_arguments_ != &::google::protobuf::internal::kEmptyString) {
    uri_arguments_->clear();
  }
  clear_has_uri_arguments();
}
inline const ::std::string& SystemInfo_PB::uri_arguments() const {
  return *uri_arguments_;
}
inline void SystemInfo_PB::set_uri_arguments(const ::std::string& value) {
  set_has_uri_arguments();
  if (uri_arguments_ == &::google::protobuf::internal::kEmptyString) {
    uri_arguments_ = new ::std::string;
  }
  uri_arguments_->assign(value);
}
inline void SystemInfo_PB::set_uri_arguments(const char* value) {
  set_has_uri_arguments();
  if (uri_arguments_ == &::google::protobuf::internal::kEmptyString) {
    uri_arguments_ = new ::std::string;
  }
  uri_arguments_->assign(value);
}
inline void SystemInfo_PB::set_uri_arguments(const char* value, size_t size) {
  set_has_uri_arguments();
  if (uri_arguments_ == &::google::protobuf::internal::kEmptyString) {
    uri_arguments_ = new ::std::string;
  }
  uri_arguments_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemInfo_PB::mutable_uri_arguments() {
  set_has_uri_arguments();
  if (uri_arguments_ == &::google::protobuf::internal::kEmptyString) {
    uri_arguments_ = new ::std::string;
  }
  return uri_arguments_;
}
inline ::std::string* SystemInfo_PB::release_uri_arguments() {
  clear_has_uri_arguments();
  if (uri_arguments_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_arguments_;
    uri_arguments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .rubicon.data.ad_engine.SystemInfo_PB.FeatureCode_E features = 17;
inline int SystemInfo_PB::features_size() const {
  return features_.size();
}
inline void SystemInfo_PB::clear_features() {
  features_.Clear();
}
inline ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E SystemInfo_PB::features(int index) const {
  return static_cast< ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E >(features_.Get(index));
}
inline void SystemInfo_PB::set_features(int index, ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E value) {
  GOOGLE_DCHECK(::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E_IsValid(value));
  features_.Set(index, value);
}
inline void SystemInfo_PB::add_features(::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E value) {
  GOOGLE_DCHECK(::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E_IsValid(value));
  features_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
SystemInfo_PB::features() const {
  return features_;
}
inline ::google::protobuf::RepeatedField<int>*
SystemInfo_PB::mutable_features() {
  return &features_;
}

// -------------------------------------------------------------------

// TransactionInfo_PB

// optional .rubicon.data.common.AnUInt32_PB ad_id = 1;
inline bool TransactionInfo_PB::has_ad_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionInfo_PB::set_has_ad_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionInfo_PB::clear_has_ad_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionInfo_PB::clear_ad_id() {
  if (ad_id_ != NULL) ad_id_->::rubicon::data::common::AnUInt32_PB::Clear();
  clear_has_ad_id();
}
inline const ::rubicon::data::common::AnUInt32_PB& TransactionInfo_PB::ad_id() const {
  return ad_id_ != NULL ? *ad_id_ : *default_instance_->ad_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* TransactionInfo_PB::mutable_ad_id() {
  set_has_ad_id();
  if (ad_id_ == NULL) ad_id_ = new ::rubicon::data::common::AnUInt32_PB;
  return ad_id_;
}
inline ::rubicon::data::common::AnUInt32_PB* TransactionInfo_PB::release_ad_id() {
  clear_has_ad_id();
  ::rubicon::data::common::AnUInt32_PB* temp = ad_id_;
  ad_id_ = NULL;
  return temp;
}

// optional uint32 network_id = 2 [default = 0];
inline bool TransactionInfo_PB::has_network_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionInfo_PB::set_has_network_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionInfo_PB::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionInfo_PB::clear_network_id() {
  network_id_ = 0u;
  clear_has_network_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::network_id() const {
  return network_id_;
}
inline void TransactionInfo_PB::set_network_id(::google::protobuf::uint32 value) {
  set_has_network_id();
  network_id_ = value;
}

// optional int32 campaign_id = 3 [default = 0];
inline bool TransactionInfo_PB::has_campaign_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransactionInfo_PB::set_has_campaign_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransactionInfo_PB::clear_has_campaign_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransactionInfo_PB::clear_campaign_id() {
  campaign_id_ = 0;
  clear_has_campaign_id();
}
inline ::google::protobuf::int32 TransactionInfo_PB::campaign_id() const {
  return campaign_id_;
}
inline void TransactionInfo_PB::set_campaign_id(::google::protobuf::int32 value) {
  set_has_campaign_id();
  campaign_id_ = value;
}

// optional string restrict_block_match = 4;
inline bool TransactionInfo_PB::has_restrict_block_match() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransactionInfo_PB::set_has_restrict_block_match() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransactionInfo_PB::clear_has_restrict_block_match() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransactionInfo_PB::clear_restrict_block_match() {
  if (restrict_block_match_ != &::google::protobuf::internal::kEmptyString) {
    restrict_block_match_->clear();
  }
  clear_has_restrict_block_match();
}
inline const ::std::string& TransactionInfo_PB::restrict_block_match() const {
  return *restrict_block_match_;
}
inline void TransactionInfo_PB::set_restrict_block_match(const ::std::string& value) {
  set_has_restrict_block_match();
  if (restrict_block_match_ == &::google::protobuf::internal::kEmptyString) {
    restrict_block_match_ = new ::std::string;
  }
  restrict_block_match_->assign(value);
}
inline void TransactionInfo_PB::set_restrict_block_match(const char* value) {
  set_has_restrict_block_match();
  if (restrict_block_match_ == &::google::protobuf::internal::kEmptyString) {
    restrict_block_match_ = new ::std::string;
  }
  restrict_block_match_->assign(value);
}
inline void TransactionInfo_PB::set_restrict_block_match(const char* value, size_t size) {
  set_has_restrict_block_match();
  if (restrict_block_match_ == &::google::protobuf::internal::kEmptyString) {
    restrict_block_match_ = new ::std::string;
  }
  restrict_block_match_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransactionInfo_PB::mutable_restrict_block_match() {
  set_has_restrict_block_match();
  if (restrict_block_match_ == &::google::protobuf::internal::kEmptyString) {
    restrict_block_match_ = new ::std::string;
  }
  return restrict_block_match_;
}
inline ::std::string* TransactionInfo_PB::release_restrict_block_match() {
  clear_has_restrict_block_match();
  if (restrict_block_match_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = restrict_block_match_;
    restrict_block_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string extra_block_match = 5;
inline bool TransactionInfo_PB::has_extra_block_match() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransactionInfo_PB::set_has_extra_block_match() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransactionInfo_PB::clear_has_extra_block_match() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransactionInfo_PB::clear_extra_block_match() {
  if (extra_block_match_ != &::google::protobuf::internal::kEmptyString) {
    extra_block_match_->clear();
  }
  clear_has_extra_block_match();
}
inline const ::std::string& TransactionInfo_PB::extra_block_match() const {
  return *extra_block_match_;
}
inline void TransactionInfo_PB::set_extra_block_match(const ::std::string& value) {
  set_has_extra_block_match();
  if (extra_block_match_ == &::google::protobuf::internal::kEmptyString) {
    extra_block_match_ = new ::std::string;
  }
  extra_block_match_->assign(value);
}
inline void TransactionInfo_PB::set_extra_block_match(const char* value) {
  set_has_extra_block_match();
  if (extra_block_match_ == &::google::protobuf::internal::kEmptyString) {
    extra_block_match_ = new ::std::string;
  }
  extra_block_match_->assign(value);
}
inline void TransactionInfo_PB::set_extra_block_match(const char* value, size_t size) {
  set_has_extra_block_match();
  if (extra_block_match_ == &::google::protobuf::internal::kEmptyString) {
    extra_block_match_ = new ::std::string;
  }
  extra_block_match_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransactionInfo_PB::mutable_extra_block_match() {
  set_has_extra_block_match();
  if (extra_block_match_ == &::google::protobuf::internal::kEmptyString) {
    extra_block_match_ = new ::std::string;
  }
  return extra_block_match_;
}
inline ::std::string* TransactionInfo_PB::release_extra_block_match() {
  clear_has_extra_block_match();
  if (extra_block_match_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_block_match_;
    extra_block_match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 creative_id = 6 [default = 0];
inline bool TransactionInfo_PB::has_creative_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransactionInfo_PB::set_has_creative_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransactionInfo_PB::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransactionInfo_PB::clear_creative_id() {
  creative_id_ = 0u;
  clear_has_creative_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::creative_id() const {
  return creative_id_;
}
inline void TransactionInfo_PB::set_creative_id(::google::protobuf::uint32 value) {
  set_has_creative_id();
  creative_id_ = value;
}

// optional string auction_id = 7;
inline bool TransactionInfo_PB::has_auction_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransactionInfo_PB::set_has_auction_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransactionInfo_PB::clear_has_auction_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransactionInfo_PB::clear_auction_id() {
  if (auction_id_ != &::google::protobuf::internal::kEmptyString) {
    auction_id_->clear();
  }
  clear_has_auction_id();
}
inline const ::std::string& TransactionInfo_PB::auction_id() const {
  return *auction_id_;
}
inline void TransactionInfo_PB::set_auction_id(const ::std::string& value) {
  set_has_auction_id();
  if (auction_id_ == &::google::protobuf::internal::kEmptyString) {
    auction_id_ = new ::std::string;
  }
  auction_id_->assign(value);
}
inline void TransactionInfo_PB::set_auction_id(const char* value) {
  set_has_auction_id();
  if (auction_id_ == &::google::protobuf::internal::kEmptyString) {
    auction_id_ = new ::std::string;
  }
  auction_id_->assign(value);
}
inline void TransactionInfo_PB::set_auction_id(const char* value, size_t size) {
  set_has_auction_id();
  if (auction_id_ == &::google::protobuf::internal::kEmptyString) {
    auction_id_ = new ::std::string;
  }
  auction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransactionInfo_PB::mutable_auction_id() {
  set_has_auction_id();
  if (auction_id_ == &::google::protobuf::internal::kEmptyString) {
    auction_id_ = new ::std::string;
  }
  return auction_id_;
}
inline ::std::string* TransactionInfo_PB::release_auction_id() {
  clear_has_auction_id();
  if (auction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auction_id_;
    auction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double revenue_cpm = 8 [default = 0];
inline bool TransactionInfo_PB::has_revenue_cpm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransactionInfo_PB::set_has_revenue_cpm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransactionInfo_PB::clear_has_revenue_cpm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransactionInfo_PB::clear_revenue_cpm() {
  revenue_cpm_ = 0;
  clear_has_revenue_cpm();
}
inline double TransactionInfo_PB::revenue_cpm() const {
  return revenue_cpm_;
}
inline void TransactionInfo_PB::set_revenue_cpm(double value) {
  set_has_revenue_cpm();
  revenue_cpm_ = value;
}

// optional .rubicon.data.common.AdClassType_E ad_class = 9;
inline bool TransactionInfo_PB::has_ad_class() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TransactionInfo_PB::set_has_ad_class() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TransactionInfo_PB::clear_has_ad_class() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TransactionInfo_PB::clear_ad_class() {
  ad_class_ = 0;
  clear_has_ad_class();
}
inline rubicon::data::common::AdClassType_E TransactionInfo_PB::ad_class() const {
  return static_cast< rubicon::data::common::AdClassType_E >(ad_class_);
}
inline void TransactionInfo_PB::set_ad_class(rubicon::data::common::AdClassType_E value) {
  GOOGLE_DCHECK(rubicon::data::common::AdClassType_E_IsValid(value));
  set_has_ad_class();
  ad_class_ = value;
}

// optional double rtb_tech_fee_assessed = 10;
inline bool TransactionInfo_PB::has_rtb_tech_fee_assessed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TransactionInfo_PB::set_has_rtb_tech_fee_assessed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TransactionInfo_PB::clear_has_rtb_tech_fee_assessed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TransactionInfo_PB::clear_rtb_tech_fee_assessed() {
  rtb_tech_fee_assessed_ = 0;
  clear_has_rtb_tech_fee_assessed();
}
inline double TransactionInfo_PB::rtb_tech_fee_assessed() const {
  return rtb_tech_fee_assessed_;
}
inline void TransactionInfo_PB::set_rtb_tech_fee_assessed(double value) {
  set_has_rtb_tech_fee_assessed();
  rtb_tech_fee_assessed_ = value;
}

// optional uint64 rtb_response_time = 11;
inline bool TransactionInfo_PB::has_rtb_response_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransactionInfo_PB::set_has_rtb_response_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransactionInfo_PB::clear_has_rtb_response_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransactionInfo_PB::clear_rtb_response_time() {
  rtb_response_time_ = GOOGLE_ULONGLONG(0);
  clear_has_rtb_response_time();
}
inline ::google::protobuf::uint64 TransactionInfo_PB::rtb_response_time() const {
  return rtb_response_time_;
}
inline void TransactionInfo_PB::set_rtb_response_time(::google::protobuf::uint64 value) {
  set_has_rtb_response_time();
  rtb_response_time_ = value;
}

// optional uint32 advertiser_id = 12;
inline bool TransactionInfo_PB::has_advertiser_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransactionInfo_PB::set_has_advertiser_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransactionInfo_PB::clear_has_advertiser_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransactionInfo_PB::clear_advertiser_id() {
  advertiser_id_ = 0u;
  clear_has_advertiser_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::advertiser_id() const {
  return advertiser_id_;
}
inline void TransactionInfo_PB::set_advertiser_id(::google::protobuf::uint32 value) {
  set_has_advertiser_id();
  advertiser_id_ = value;
}

// optional uint32 rtb_billable_seat_id = 13;
inline bool TransactionInfo_PB::has_rtb_billable_seat_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransactionInfo_PB::set_has_rtb_billable_seat_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransactionInfo_PB::clear_has_rtb_billable_seat_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransactionInfo_PB::clear_rtb_billable_seat_id() {
  rtb_billable_seat_id_ = 0u;
  clear_has_rtb_billable_seat_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::rtb_billable_seat_id() const {
  return rtb_billable_seat_id_;
}
inline void TransactionInfo_PB::set_rtb_billable_seat_id(::google::protobuf::uint32 value) {
  set_has_rtb_billable_seat_id();
  rtb_billable_seat_id_ = value;
}

// optional .rubicon.data.common.PrivateTierType_E private_tier = 14;
inline bool TransactionInfo_PB::has_private_tier() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TransactionInfo_PB::set_has_private_tier() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TransactionInfo_PB::clear_has_private_tier() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TransactionInfo_PB::clear_private_tier() {
  private_tier_ = 0;
  clear_has_private_tier();
}
inline rubicon::data::common::PrivateTierType_E TransactionInfo_PB::private_tier() const {
  return static_cast< rubicon::data::common::PrivateTierType_E >(private_tier_);
}
inline void TransactionInfo_PB::set_private_tier(rubicon::data::common::PrivateTierType_E value) {
  GOOGLE_DCHECK(rubicon::data::common::PrivateTierType_E_IsValid(value));
  set_has_private_tier();
  private_tier_ = value;
}

// optional uint32 bid_id = 15;
inline bool TransactionInfo_PB::has_bid_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TransactionInfo_PB::set_has_bid_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TransactionInfo_PB::clear_has_bid_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TransactionInfo_PB::clear_bid_id() {
  bid_id_ = 0u;
  clear_has_bid_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::bid_id() const {
  return bid_id_;
}
inline void TransactionInfo_PB::set_bid_id(::google::protobuf::uint32 value) {
  set_has_bid_id();
  bid_id_ = value;
}

// optional double bid_price = 16;
inline bool TransactionInfo_PB::has_bid_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TransactionInfo_PB::set_has_bid_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TransactionInfo_PB::clear_has_bid_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TransactionInfo_PB::clear_bid_price() {
  bid_price_ = 0;
  clear_has_bid_price();
}
inline double TransactionInfo_PB::bid_price() const {
  return bid_price_;
}
inline void TransactionInfo_PB::set_bid_price(double value) {
  set_has_bid_price();
  bid_price_ = value;
}

// repeated uint32 rtb_seat_ids = 17;
inline int TransactionInfo_PB::rtb_seat_ids_size() const {
  return rtb_seat_ids_.size();
}
inline void TransactionInfo_PB::clear_rtb_seat_ids() {
  rtb_seat_ids_.Clear();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::rtb_seat_ids(int index) const {
  return rtb_seat_ids_.Get(index);
}
inline void TransactionInfo_PB::set_rtb_seat_ids(int index, ::google::protobuf::uint32 value) {
  rtb_seat_ids_.Set(index, value);
}
inline void TransactionInfo_PB::add_rtb_seat_ids(::google::protobuf::uint32 value) {
  rtb_seat_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TransactionInfo_PB::rtb_seat_ids() const {
  return rtb_seat_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TransactionInfo_PB::mutable_rtb_seat_ids() {
  return &rtb_seat_ids_;
}

// optional double rtb_price_floor = 18;
inline bool TransactionInfo_PB::has_rtb_price_floor() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TransactionInfo_PB::set_has_rtb_price_floor() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TransactionInfo_PB::clear_has_rtb_price_floor() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TransactionInfo_PB::clear_rtb_price_floor() {
  rtb_price_floor_ = 0;
  clear_has_rtb_price_floor();
}
inline double TransactionInfo_PB::rtb_price_floor() const {
  return rtb_price_floor_;
}
inline void TransactionInfo_PB::set_rtb_price_floor(double value) {
  set_has_rtb_price_floor();
  rtb_price_floor_ = value;
}

// optional double rtb_second_price = 19;
inline bool TransactionInfo_PB::has_rtb_second_price() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TransactionInfo_PB::set_has_rtb_second_price() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TransactionInfo_PB::clear_has_rtb_second_price() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TransactionInfo_PB::clear_rtb_second_price() {
  rtb_second_price_ = 0;
  clear_has_rtb_second_price();
}
inline double TransactionInfo_PB::rtb_second_price() const {
  return rtb_second_price_;
}
inline void TransactionInfo_PB::set_rtb_second_price(double value) {
  set_has_rtb_second_price();
  rtb_second_price_ = value;
}

// optional uint32 rtb_deal_id = 20;
inline bool TransactionInfo_PB::has_rtb_deal_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TransactionInfo_PB::set_has_rtb_deal_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TransactionInfo_PB::clear_has_rtb_deal_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TransactionInfo_PB::clear_rtb_deal_id() {
  rtb_deal_id_ = 0u;
  clear_has_rtb_deal_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::rtb_deal_id() const {
  return rtb_deal_id_;
}
inline void TransactionInfo_PB::set_rtb_deal_id(::google::protobuf::uint32 value) {
  set_has_rtb_deal_id();
  rtb_deal_id_ = value;
}

// optional uint32 second_ad_id = 21;
inline bool TransactionInfo_PB::has_second_ad_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TransactionInfo_PB::set_has_second_ad_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TransactionInfo_PB::clear_has_second_ad_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TransactionInfo_PB::clear_second_ad_id() {
  second_ad_id_ = 0u;
  clear_has_second_ad_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::second_ad_id() const {
  return second_ad_id_;
}
inline void TransactionInfo_PB::set_second_ad_id(::google::protobuf::uint32 value) {
  set_has_second_ad_id();
  second_ad_id_ = value;
}

// optional .rubicon.data.adsafe.AdSafeResponse_PB adsafe = 22;
inline bool TransactionInfo_PB::has_adsafe() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TransactionInfo_PB::set_has_adsafe() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TransactionInfo_PB::clear_has_adsafe() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TransactionInfo_PB::clear_adsafe() {
  if (adsafe_ != NULL) adsafe_->::rubicon::data::adsafe::AdSafeResponse_PB::Clear();
  clear_has_adsafe();
}
inline const ::rubicon::data::adsafe::AdSafeResponse_PB& TransactionInfo_PB::adsafe() const {
  return adsafe_ != NULL ? *adsafe_ : *default_instance_->adsafe_;
}
inline ::rubicon::data::adsafe::AdSafeResponse_PB* TransactionInfo_PB::mutable_adsafe() {
  set_has_adsafe();
  if (adsafe_ == NULL) adsafe_ = new ::rubicon::data::adsafe::AdSafeResponse_PB;
  return adsafe_;
}
inline ::rubicon::data::adsafe::AdSafeResponse_PB* TransactionInfo_PB::release_adsafe() {
  clear_has_adsafe();
  ::rubicon::data::adsafe::AdSafeResponse_PB* temp = adsafe_;
  adsafe_ = NULL;
  return temp;
}

// optional uint32 best_rival_ad_id = 23;
inline bool TransactionInfo_PB::has_best_rival_ad_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TransactionInfo_PB::set_has_best_rival_ad_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TransactionInfo_PB::clear_has_best_rival_ad_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TransactionInfo_PB::clear_best_rival_ad_id() {
  best_rival_ad_id_ = 0u;
  clear_has_best_rival_ad_id();
}
inline ::google::protobuf::uint32 TransactionInfo_PB::best_rival_ad_id() const {
  return best_rival_ad_id_;
}
inline void TransactionInfo_PB::set_best_rival_ad_id(::google::protobuf::uint32 value) {
  set_has_best_rival_ad_id();
  best_rival_ad_id_ = value;
}

// optional double best_rival_cpm_price = 24;
inline bool TransactionInfo_PB::has_best_rival_cpm_price() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TransactionInfo_PB::set_has_best_rival_cpm_price() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TransactionInfo_PB::clear_has_best_rival_cpm_price() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TransactionInfo_PB::clear_best_rival_cpm_price() {
  best_rival_cpm_price_ = 0;
  clear_has_best_rival_cpm_price();
}
inline double TransactionInfo_PB::best_rival_cpm_price() const {
  return best_rival_cpm_price_;
}
inline void TransactionInfo_PB::set_best_rival_cpm_price(double value) {
  set_has_best_rival_cpm_price();
  best_rival_cpm_price_ = value;
}

// optional string external_creative_id = 25;
inline bool TransactionInfo_PB::has_external_creative_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TransactionInfo_PB::set_has_external_creative_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TransactionInfo_PB::clear_has_external_creative_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TransactionInfo_PB::clear_external_creative_id() {
  if (external_creative_id_ != &::google::protobuf::internal::kEmptyString) {
    external_creative_id_->clear();
  }
  clear_has_external_creative_id();
}
inline const ::std::string& TransactionInfo_PB::external_creative_id() const {
  return *external_creative_id_;
}
inline void TransactionInfo_PB::set_external_creative_id(const ::std::string& value) {
  set_has_external_creative_id();
  if (external_creative_id_ == &::google::protobuf::internal::kEmptyString) {
    external_creative_id_ = new ::std::string;
  }
  external_creative_id_->assign(value);
}
inline void TransactionInfo_PB::set_external_creative_id(const char* value) {
  set_has_external_creative_id();
  if (external_creative_id_ == &::google::protobuf::internal::kEmptyString) {
    external_creative_id_ = new ::std::string;
  }
  external_creative_id_->assign(value);
}
inline void TransactionInfo_PB::set_external_creative_id(const char* value, size_t size) {
  set_has_external_creative_id();
  if (external_creative_id_ == &::google::protobuf::internal::kEmptyString) {
    external_creative_id_ = new ::std::string;
  }
  external_creative_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransactionInfo_PB::mutable_external_creative_id() {
  set_has_external_creative_id();
  if (external_creative_id_ == &::google::protobuf::internal::kEmptyString) {
    external_creative_id_ = new ::std::string;
  }
  return external_creative_id_;
}
inline ::std::string* TransactionInfo_PB::release_external_creative_id() {
  clear_has_external_creative_id();
  if (external_creative_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = external_creative_id_;
    external_creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AdEngineLog_PB

// optional .rubicon.data.ad_engine.UserInfo_PB user_info = 1;
inline bool AdEngineLog_PB::has_user_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdEngineLog_PB::set_has_user_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdEngineLog_PB::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdEngineLog_PB::clear_user_info() {
  if (user_info_ != NULL) user_info_->::rubicon::data::ad_engine::UserInfo_PB::Clear();
  clear_has_user_info();
}
inline const ::rubicon::data::ad_engine::UserInfo_PB& AdEngineLog_PB::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::rubicon::data::ad_engine::UserInfo_PB* AdEngineLog_PB::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::rubicon::data::ad_engine::UserInfo_PB;
  return user_info_;
}
inline ::rubicon::data::ad_engine::UserInfo_PB* AdEngineLog_PB::release_user_info() {
  clear_has_user_info();
  ::rubicon::data::ad_engine::UserInfo_PB* temp = user_info_;
  user_info_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.GeoInfo_PB geo_info = 2;
inline bool AdEngineLog_PB::has_geo_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdEngineLog_PB::set_has_geo_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdEngineLog_PB::clear_has_geo_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdEngineLog_PB::clear_geo_info() {
  if (geo_info_ != NULL) geo_info_->::rubicon::data::ad_engine::GeoInfo_PB::Clear();
  clear_has_geo_info();
}
inline const ::rubicon::data::ad_engine::GeoInfo_PB& AdEngineLog_PB::geo_info() const {
  return geo_info_ != NULL ? *geo_info_ : *default_instance_->geo_info_;
}
inline ::rubicon::data::ad_engine::GeoInfo_PB* AdEngineLog_PB::mutable_geo_info() {
  set_has_geo_info();
  if (geo_info_ == NULL) geo_info_ = new ::rubicon::data::ad_engine::GeoInfo_PB;
  return geo_info_;
}
inline ::rubicon::data::ad_engine::GeoInfo_PB* AdEngineLog_PB::release_geo_info() {
  clear_has_geo_info();
  ::rubicon::data::ad_engine::GeoInfo_PB* temp = geo_info_;
  geo_info_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.InventoryInfo_PB inventory_info = 3;
inline bool AdEngineLog_PB::has_inventory_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdEngineLog_PB::set_has_inventory_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdEngineLog_PB::clear_has_inventory_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdEngineLog_PB::clear_inventory_info() {
  if (inventory_info_ != NULL) inventory_info_->::rubicon::data::ad_engine::InventoryInfo_PB::Clear();
  clear_has_inventory_info();
}
inline const ::rubicon::data::ad_engine::InventoryInfo_PB& AdEngineLog_PB::inventory_info() const {
  return inventory_info_ != NULL ? *inventory_info_ : *default_instance_->inventory_info_;
}
inline ::rubicon::data::ad_engine::InventoryInfo_PB* AdEngineLog_PB::mutable_inventory_info() {
  set_has_inventory_info();
  if (inventory_info_ == NULL) inventory_info_ = new ::rubicon::data::ad_engine::InventoryInfo_PB;
  return inventory_info_;
}
inline ::rubicon::data::ad_engine::InventoryInfo_PB* AdEngineLog_PB::release_inventory_info() {
  clear_has_inventory_info();
  ::rubicon::data::ad_engine::InventoryInfo_PB* temp = inventory_info_;
  inventory_info_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.SystemInfo_PB system_info = 4;
inline bool AdEngineLog_PB::has_system_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdEngineLog_PB::set_has_system_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdEngineLog_PB::clear_has_system_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdEngineLog_PB::clear_system_info() {
  if (system_info_ != NULL) system_info_->::rubicon::data::ad_engine::SystemInfo_PB::Clear();
  clear_has_system_info();
}
inline const ::rubicon::data::ad_engine::SystemInfo_PB& AdEngineLog_PB::system_info() const {
  return system_info_ != NULL ? *system_info_ : *default_instance_->system_info_;
}
inline ::rubicon::data::ad_engine::SystemInfo_PB* AdEngineLog_PB::mutable_system_info() {
  set_has_system_info();
  if (system_info_ == NULL) system_info_ = new ::rubicon::data::ad_engine::SystemInfo_PB;
  return system_info_;
}
inline ::rubicon::data::ad_engine::SystemInfo_PB* AdEngineLog_PB::release_system_info() {
  clear_has_system_info();
  ::rubicon::data::ad_engine::SystemInfo_PB* temp = system_info_;
  system_info_ = NULL;
  return temp;
}

// optional .rubicon.data.ad_engine.TransactionInfo_PB transaction_info = 5;
inline bool AdEngineLog_PB::has_transaction_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdEngineLog_PB::set_has_transaction_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdEngineLog_PB::clear_has_transaction_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdEngineLog_PB::clear_transaction_info() {
  if (transaction_info_ != NULL) transaction_info_->::rubicon::data::ad_engine::TransactionInfo_PB::Clear();
  clear_has_transaction_info();
}
inline const ::rubicon::data::ad_engine::TransactionInfo_PB& AdEngineLog_PB::transaction_info() const {
  return transaction_info_ != NULL ? *transaction_info_ : *default_instance_->transaction_info_;
}
inline ::rubicon::data::ad_engine::TransactionInfo_PB* AdEngineLog_PB::mutable_transaction_info() {
  set_has_transaction_info();
  if (transaction_info_ == NULL) transaction_info_ = new ::rubicon::data::ad_engine::TransactionInfo_PB;
  return transaction_info_;
}
inline ::rubicon::data::ad_engine::TransactionInfo_PB* AdEngineLog_PB::release_transaction_info() {
  clear_has_transaction_info();
  ::rubicon::data::ad_engine::TransactionInfo_PB* temp = transaction_info_;
  transaction_info_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E>() {
  return ::rubicon::data::ad_engine::DataCenter_PB_DataCenterCodes_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E>() {
  return ::rubicon::data::ad_engine::ImpressionType_PB_ImpressionCode_E_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E>() {
  return ::rubicon::data::ad_engine::SystemInfo_PB_FeatureCode_E_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ae_5flog_2eproto__INCLUDED
