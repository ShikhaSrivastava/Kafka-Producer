// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ae_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

namespace {

const ::google::protobuf::EnumDescriptor* ClickAdType_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RTBOperationResultCode_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PSACode_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlgorithmCode_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ae_5ftypes_2eproto() {
  protobuf_AddDesc_ae_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ae_types.proto");
  GOOGLE_CHECK(file != NULL);
  ClickAdType_E_descriptor_ = file->enum_type(0);
  RequestType_E_descriptor_ = file->enum_type(1);
  RTBOperationResultCode_E_descriptor_ = file->enum_type(2);
  PSACode_E_descriptor_ = file->enum_type(3);
  AlgorithmCode_E_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ae_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_ae_5ftypes_2eproto() {
}

void protobuf_AddDesc_ae_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ae_types.proto\022\026rubicon.data.ad_engine"
    "*l\n\rClickAdType_E\022\024\n\020UNSET_CLICK_TYPE\020\000\022"
    "\024\n\020IMAGE_CLICK_TYPE\020\001\022\027\n\023MATCHING_CLICK_"
    "TYPE\020\002\022\026\n\022REGULAR_CLICK_TYPE\020\003*\252\001\n\rReque"
    "stType_E\022\023\n\017UNKNOWN_REQUEST\020\000\022\026\n\022IMPRESS"
    "ION_REQUEST\020\001\022\022\n\016IFRAME_REQUEST\020\002\022\032\n\026CLI"
    "CK_REDIRECT_REQUEST\020\003\022\022\n\016VIEWER_REQUEST\020"
    "\004\022\027\n\023CLICK_SERVE_REQUEST\020\005\022\017\n\013PSA_REQUES"
    "T\020\006*\352\005\n\030RTBOperationResultCode_E\022\024\n\020UNKN"
    "OWN_RTB_CODE\020\000\022\032\n\026BID_ENGINE_RESPONSE_OK"
    "\020\001\022!\n\035BID_ENGINE_RESPONSE_TIMED_OUT\020\n\022\035\n"
    "\031BID_ENGINE_EMPTY_RESPONSE\020\013\022\"\n\036BID_ENGI"
    "NE_DECLINED_TO_SERVICE\020\014\022\031\n\025BID_ENGINE_H"
    "TTP_ERROR\020\r\022\034\n\030BID_ENGINE_NETWORK_ERROR\020"
    "\016\022\033\n\027BID_ENGINE_INVALID_JSON\020\017\022\037\n\033BID_EN"
    "GINE_INVALID_PROTOBUF\020\020\022\035\n\031RTB_DISABLED_"
    "USER_OPT_OUT\020\036\022\034\n\030RTB_DISABLED_NOT_SAMPL"
    "ED\020\037\022!\n\035RTB_DISABLED_NO_AVAILABLE_ADS\020 \022"
    " \n\034RTB_DISABLED_NO_RTB_NETWORKS\020!\022(\n$RTB"
    "_DISABLED_NOT_CONFIGURED_IN_RULES\020\"\022\"\n\036R"
    "TB_DISABLED_INVALID_MIME_TYPE\020#\022+\n\'RTB_D"
    "ISABLED_NOT_ENABLED_FOR_IMPERSSION\020$\022\030\n\024"
    "RTB_DISABLED_UNKNOWN\020%\022\035\n\031THROTTLED_AVAI"
    "LABLE_SLOTS\0202\022\031\n\025THROTTLES_SYSTEM_LOAD\0203"
    "\022!\n\035THROTTLED_BE_RESPONSE_LATENCY\0204\022\030\n\024T"
    "HROTTLED_ERROR_RATE\0205\022\032\n\026THROTTLED_TIMEO"
    "UT_RATE\0206\022\025\n\021THROTTLED_SKIPPED\0207*\357\002\n\tPSA"
    "Code_E\022\017\n\013UNKNOWN_PSA\020\000\022\021\n\rALG_ERROR_PSA"
    "\020\001\022\021\n\rBAD_CLICK_PSA\020\002\022\023\n\017BAD_REQUEST_PSA"
    "\020\003\022\025\n\021BAD_REMOTE_IP_PSA\020\004\022\026\n\022BAD_SESSION"
    "_ID_PSA\020\005\022\023\n\017DEBUG_NO_AD_PSA\020\006\022\023\n\017DEBUG_"
    "TABLE_PSA\020\007\022\024\n\020DK_BAD_TOKEN_PSA\020\010\022\024\n\020DK_"
    "END_CHAIN_PSA\020\t\022\016\n\nNO_ADS_PSA\020\n\022\023\n\017NO_BA"
    "CKFILL_PSA\020\013\022\031\n\025NO_BACKFILL_HOUSE_PSA\020\014\022"
    "\023\n\017NO_CREATIVE_PSA\020\r\022\017\n\013NO_DATA_PSA\020\016\022\031\n"
    "\025NO_REFERRER_MATCH_PSA\020\017\022\020\n\014NO_RULES_PSA"
    "\020\020*\225\004\n\017AlgorithmCode_E\022\025\n\021UNKNOWN_ALGORI"
    "THM\020\000\022\020\n\014DK_ALGORITHM\020\001\022\031\n\025DK_BACKFILL_A"
    "LGORITHM\020\002\022\037\n\033DK_BACKFILL_HOUSE_ALGORITH"
    "M\020\003\022#\n\037DK_BACKFILL_OVERLIMIT_ALGORITHM\020\004"
    "\022\035\n\031DK_BACKFILL_PSA_ALGORITHM\020\005\022\027\n\023DK_ST"
    "ATIC_ALGORITHM\020\006\022!\n\035FIXED_ORDER_FIRST_X_"
    "ALGORITHM\020\007\022#\n\037GUARANTEED_TOURNAMENT_ALG"
    "ORITHM\020\010\022\037\n\033POOLED_TOURNAMENT_ALGORITHM\020"
    "\t\022(\n$POOLED_TOURNAMENT_AUDIENCE_ALGORITH"
    "M\020\n\022)\n%POOLED_TOURNAMENT_HEURISTIC_ALGOR"
    "ITHM\020\013\022\034\n\030ROULETTE_WHEEL_ALGORITHM\020\014\022.\n*"
    "ROULETTE_WHEEL_TARGETED_ENHANCER_ALGORIT"
    "HM\020\r\022\037\n\033TARGETED_ENHANCER_ALGORITHM\020\016\022\023\n"
    "\017DEBUG_ALGORITHM\0202B\002H\001", 1982);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ae_types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ae_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ae_5ftypes_2eproto {
  StaticDescriptorInitializer_ae_5ftypes_2eproto() {
    protobuf_AddDesc_ae_5ftypes_2eproto();
  }
} static_descriptor_initializer_ae_5ftypes_2eproto_;

const ::google::protobuf::EnumDescriptor* ClickAdType_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickAdType_E_descriptor_;
}
bool ClickAdType_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestType_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_E_descriptor_;
}
bool RequestType_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RTBOperationResultCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTBOperationResultCode_E_descriptor_;
}
bool RTBOperationResultCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PSACode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSACode_E_descriptor_;
}
bool PSACode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlgorithmCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgorithmCode_E_descriptor_;
}
bool AlgorithmCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 50:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
