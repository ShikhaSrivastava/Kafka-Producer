// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event_bus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fim {
namespace eventbus {

namespace {

const ::google::protobuf::Descriptor* EndPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventBusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventBusMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SenderInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderInfo_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* HostInfo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostInfo_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventBusFeedback_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventBusFeedback_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Role_E_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ListenerType_E_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_5fbus_2eproto() {
  protobuf_AddDesc_event_5fbus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event_bus.proto");
  GOOGLE_CHECK(file != NULL);
  EndPoint_descriptor_ = file->message_type(0);
  static const int EndPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPoint, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPoint, port_),
  };
  EndPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndPoint_descriptor_,
      EndPoint::default_instance_,
      EndPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndPoint));
  EventBusMessage_descriptor_ = file->message_type(1);
  static const int EventBusMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, emit_time_millis_),
  };
  EventBusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventBusMessage_descriptor_,
      EventBusMessage::default_instance_,
      EventBusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventBusMessage));
  SenderInfo_PB_descriptor_ = file->message_type(2);
  static const int SenderInfo_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderInfo_PB, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderInfo_PB, session_id_),
  };
  SenderInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderInfo_PB_descriptor_,
      SenderInfo_PB::default_instance_,
      SenderInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderInfo_PB));
  HostInfo_PB_descriptor_ = file->message_type(3);
  static const int HostInfo_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo_PB, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo_PB, sender_),
  };
  HostInfo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostInfo_PB_descriptor_,
      HostInfo_PB::default_instance_,
      HostInfo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostInfo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostInfo_PB));
  EventBusFeedback_PB_descriptor_ = file->message_type(4);
  static const int EventBusFeedback_PB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, multicast_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, partition_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, partition_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, host_),
  };
  EventBusFeedback_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventBusFeedback_PB_descriptor_,
      EventBusFeedback_PB::default_instance_,
      EventBusFeedback_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBusFeedback_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventBusFeedback_PB));
  Role_E_descriptor_ = file->enum_type(0);
  ListenerType_E_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_5fbus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndPoint_descriptor_, &EndPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventBusMessage_descriptor_, &EventBusMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderInfo_PB_descriptor_, &SenderInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostInfo_PB_descriptor_, &HostInfo_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventBusFeedback_PB_descriptor_, &EventBusFeedback_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_5fbus_2eproto() {
  delete EndPoint::default_instance_;
  delete EndPoint_reflection_;
  delete EventBusMessage::default_instance_;
  delete EventBusMessage_reflection_;
  delete SenderInfo_PB::default_instance_;
  delete SenderInfo_PB_reflection_;
  delete HostInfo_PB::default_instance_;
  delete HostInfo_PB_reflection_;
  delete EventBusFeedback_PB::default_instance_;
  delete EventBusFeedback_PB_reflection_;
}

void protobuf_AddDesc_event_5fbus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017event_bus.proto\022\014fim.eventbus\"&\n\010EndPo"
    "int\022\014\n\004addr\030\002 \001(\007\022\014\n\004port\030\003 \001(\r\"\253\001\n\017Even"
    "tBusMessage\022\r\n\005event\030\002 \002(\014\022\020\n\010sequence\030\003"
    " \001(\006\022\013\n\003pid\030\004 \001(\r\022\r\n\002id\030\005 \001(\r:\0010\022&\n\006send"
    "er\030\006 \001(\0132\026.fim.eventbus.EndPoint\022\026\n\010is_v"
    "alid\030\007 \001(\010:\004true\022\033\n\020emit_time_millis\030\010 \001"
    "(\006:\0010\"0\n\rSenderInfo_PB\022\013\n\003pid\030\001 \002(\r\022\022\n\ns"
    "ession_id\030\002 \002(\r\"F\n\013HostInfo_PB\022\n\n\002ip\030\001 \002"
    "(\007\022+\n\006sender\030\002 \003(\0132\033.fim.eventbus.Sender"
    "Info_PB\"\204\002\n\023EventBusFeedback_PB\0221\n\021multi"
    "cast_channel\030\001 \002(\0132\026.fim.eventbus.EndPoi"
    "nt\022\017\n\007ip_addr\030\002 \002(\r\022\027\n\017partition_count\030\003"
    " \002(\r\022\027\n\017partition_index\030\004 \002(\r\022\"\n\004role\030\005 "
    "\001(\0162\024.fim.eventbus.Role_E\022*\n\004type\030\006 \001(\0162"
    "\034.fim.eventbus.ListenerType_E\022\'\n\004host\030\007 "
    "\003(\0132\031.fim.eventbus.HostInfo_PB*>\n\006Role_E"
    "\022\010\n\004PROD\020\001\022\007\n\003DEV\020\002\022\006\n\002QA\020\003\022\013\n\007STAGING\020\004"
    "\022\014\n\010RESEARCH\020\005*K\n\016ListenerType_E\022\016\n\nJOUR"
    "NALLER\020\001\022\t\n\005STORM\020\002\022\023\n\017AD_HOC_LISTENER\020\003"
    "\022\t\n\005OTHER\020\004B\030B\024EventBusMessageProtoH\001", 797);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event_bus.proto", &protobuf_RegisterTypes);
  EndPoint::default_instance_ = new EndPoint();
  EventBusMessage::default_instance_ = new EventBusMessage();
  SenderInfo_PB::default_instance_ = new SenderInfo_PB();
  HostInfo_PB::default_instance_ = new HostInfo_PB();
  EventBusFeedback_PB::default_instance_ = new EventBusFeedback_PB();
  EndPoint::default_instance_->InitAsDefaultInstance();
  EventBusMessage::default_instance_->InitAsDefaultInstance();
  SenderInfo_PB::default_instance_->InitAsDefaultInstance();
  HostInfo_PB::default_instance_->InitAsDefaultInstance();
  EventBusFeedback_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_5fbus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_5fbus_2eproto {
  StaticDescriptorInitializer_event_5fbus_2eproto() {
    protobuf_AddDesc_event_5fbus_2eproto();
  }
} static_descriptor_initializer_event_5fbus_2eproto_;

const ::google::protobuf::EnumDescriptor* Role_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_E_descriptor_;
}
bool Role_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ListenerType_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenerType_E_descriptor_;
}
bool ListenerType_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EndPoint::kAddrFieldNumber;
const int EndPoint::kPortFieldNumber;
#endif  // !_MSC_VER

EndPoint::EndPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndPoint::InitAsDefaultInstance() {
}

EndPoint::EndPoint(const EndPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndPoint::SharedCtor() {
  _cached_size_ = 0;
  addr_ = 0u;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndPoint::~EndPoint() {
  SharedDtor();
}

void EndPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndPoint_descriptor_;
}

const EndPoint& EndPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fbus_2eproto();  return *default_instance_;
}

EndPoint* EndPoint::default_instance_ = NULL;

EndPoint* EndPoint::New() const {
  return new EndPoint;
}

void EndPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addr_ = 0u;
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &addr_)));
          set_has_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->addr(), output);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->addr(), target);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 addr = 2;
    if (has_addr()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndPoint::MergeFrom(const EndPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPoint::CopyFrom(const EndPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoint::IsInitialized() const {
  
  return true;
}

void EndPoint::Swap(EndPoint* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndPoint_descriptor_;
  metadata.reflection = EndPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventBusMessage::kEventFieldNumber;
const int EventBusMessage::kSequenceFieldNumber;
const int EventBusMessage::kPidFieldNumber;
const int EventBusMessage::kIdFieldNumber;
const int EventBusMessage::kSenderFieldNumber;
const int EventBusMessage::kIsValidFieldNumber;
const int EventBusMessage::kEmitTimeMillisFieldNumber;
#endif  // !_MSC_VER

EventBusMessage::EventBusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventBusMessage::InitAsDefaultInstance() {
  sender_ = const_cast< ::fim::eventbus::EndPoint*>(&::fim::eventbus::EndPoint::default_instance());
}

EventBusMessage::EventBusMessage(const EventBusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventBusMessage::SharedCtor() {
  _cached_size_ = 0;
  event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = GOOGLE_ULONGLONG(0);
  pid_ = 0u;
  id_ = 0u;
  sender_ = NULL;
  is_valid_ = true;
  emit_time_millis_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventBusMessage::~EventBusMessage() {
  SharedDtor();
}

void EventBusMessage::SharedDtor() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void EventBusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventBusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventBusMessage_descriptor_;
}

const EventBusMessage& EventBusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fbus_2eproto();  return *default_instance_;
}

EventBusMessage* EventBusMessage::default_instance_ = NULL;

EventBusMessage* EventBusMessage::New() const {
  return new EventBusMessage;
}

void EventBusMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event()) {
      if (event_ != &::google::protobuf::internal::kEmptyString) {
        event_->clear();
      }
    }
    sequence_ = GOOGLE_ULONGLONG(0);
    pid_ = 0u;
    id_ = 0u;
    if (has_sender()) {
      if (sender_ != NULL) sender_->::fim::eventbus::EndPoint::Clear();
    }
    is_valid_ = true;
    emit_time_millis_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventBusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sequence;
        break;
      }
      
      // optional fixed64 sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }
      
      // optional uint32 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sender;
        break;
      }
      
      // optional .fim.eventbus.EndPoint sender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_valid;
        break;
      }
      
      // optional bool is_valid = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
          set_has_is_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_emit_time_millis;
        break;
      }
      
      // optional fixed64 emit_time_millis = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_emit_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &emit_time_millis_)));
          set_has_emit_time_millis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventBusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes event = 2;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->event(), output);
  }
  
  // optional fixed64 sequence = 3;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->sequence(), output);
  }
  
  // optional uint32 pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pid(), output);
  }
  
  // optional uint32 id = 5 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }
  
  // optional .fim.eventbus.EndPoint sender = 6;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sender(), output);
  }
  
  // optional bool is_valid = 7 [default = true];
  if (has_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_valid(), output);
  }
  
  // optional fixed64 emit_time_millis = 8 [default = 0];
  if (has_emit_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->emit_time_millis(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventBusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes event = 2;
  if (has_event()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->event(), target);
  }
  
  // optional fixed64 sequence = 3;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->sequence(), target);
  }
  
  // optional uint32 pid = 4;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pid(), target);
  }
  
  // optional uint32 id = 5 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }
  
  // optional .fim.eventbus.EndPoint sender = 6;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sender(), target);
  }
  
  // optional bool is_valid = 7 [default = true];
  if (has_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_valid(), target);
  }
  
  // optional fixed64 emit_time_millis = 8 [default = 0];
  if (has_emit_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->emit_time_millis(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventBusMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes event = 2;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event());
    }
    
    // optional fixed64 sequence = 3;
    if (has_sequence()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }
    
    // optional uint32 id = 5 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .fim.eventbus.EndPoint sender = 6;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }
    
    // optional bool is_valid = 7 [default = true];
    if (has_is_valid()) {
      total_size += 1 + 1;
    }
    
    // optional fixed64 emit_time_millis = 8 [default = 0];
    if (has_emit_time_millis()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventBusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventBusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventBusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventBusMessage::MergeFrom(const EventBusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sender()) {
      mutable_sender()->::fim::eventbus::EndPoint::MergeFrom(from.sender());
    }
    if (from.has_is_valid()) {
      set_is_valid(from.is_valid());
    }
    if (from.has_emit_time_millis()) {
      set_emit_time_millis(from.emit_time_millis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventBusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBusMessage::CopyFrom(const EventBusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventBusMessage::Swap(EventBusMessage* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(sequence_, other->sequence_);
    std::swap(pid_, other->pid_);
    std::swap(id_, other->id_);
    std::swap(sender_, other->sender_);
    std::swap(is_valid_, other->is_valid_);
    std::swap(emit_time_millis_, other->emit_time_millis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventBusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventBusMessage_descriptor_;
  metadata.reflection = EventBusMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SenderInfo_PB::kPidFieldNumber;
const int SenderInfo_PB::kSessionIdFieldNumber;
#endif  // !_MSC_VER

SenderInfo_PB::SenderInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SenderInfo_PB::InitAsDefaultInstance() {
}

SenderInfo_PB::SenderInfo_PB(const SenderInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SenderInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0u;
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderInfo_PB::~SenderInfo_PB() {
  SharedDtor();
}

void SenderInfo_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SenderInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderInfo_PB_descriptor_;
}

const SenderInfo_PB& SenderInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fbus_2eproto();  return *default_instance_;
}

SenderInfo_PB* SenderInfo_PB::default_instance_ = NULL;

SenderInfo_PB* SenderInfo_PB::New() const {
  return new SenderInfo_PB;
}

void SenderInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0u;
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }
      
      // required uint32 session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SenderInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }
  
  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SenderInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }
  
  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SenderInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }
    
    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderInfo_PB::MergeFrom(const SenderInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderInfo_PB::CopyFrom(const SenderInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderInfo_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SenderInfo_PB::Swap(SenderInfo_PB* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderInfo_PB_descriptor_;
  metadata.reflection = SenderInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HostInfo_PB::kIpFieldNumber;
const int HostInfo_PB::kSenderFieldNumber;
#endif  // !_MSC_VER

HostInfo_PB::HostInfo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HostInfo_PB::InitAsDefaultInstance() {
}

HostInfo_PB::HostInfo_PB(const HostInfo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HostInfo_PB::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostInfo_PB::~HostInfo_PB() {
  SharedDtor();
}

void HostInfo_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HostInfo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostInfo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostInfo_PB_descriptor_;
}

const HostInfo_PB& HostInfo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fbus_2eproto();  return *default_instance_;
}

HostInfo_PB* HostInfo_PB::default_instance_ = NULL;

HostInfo_PB* HostInfo_PB::New() const {
  return new HostInfo_PB;
}

void HostInfo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
  }
  sender_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostInfo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }
      
      // repeated .fim.eventbus.SenderInfo_PB sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HostInfo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }
  
  // repeated .fim.eventbus.SenderInfo_PB sender = 2;
  for (int i = 0; i < this->sender_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sender(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HostInfo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }
  
  // repeated .fim.eventbus.SenderInfo_PB sender = 2;
  for (int i = 0; i < this->sender_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sender(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HostInfo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .fim.eventbus.SenderInfo_PB sender = 2;
  total_size += 1 * this->sender_size();
  for (int i = 0; i < this->sender_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sender(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostInfo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostInfo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostInfo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostInfo_PB::MergeFrom(const HostInfo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  sender_.MergeFrom(from.sender_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostInfo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostInfo_PB::CopyFrom(const HostInfo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostInfo_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < sender_size(); i++) {
    if (!this->sender(i).IsInitialized()) return false;
  }
  return true;
}

void HostInfo_PB::Swap(HostInfo_PB* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    sender_.Swap(&other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostInfo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostInfo_PB_descriptor_;
  metadata.reflection = HostInfo_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventBusFeedback_PB::kMulticastChannelFieldNumber;
const int EventBusFeedback_PB::kIpAddrFieldNumber;
const int EventBusFeedback_PB::kPartitionCountFieldNumber;
const int EventBusFeedback_PB::kPartitionIndexFieldNumber;
const int EventBusFeedback_PB::kRoleFieldNumber;
const int EventBusFeedback_PB::kTypeFieldNumber;
const int EventBusFeedback_PB::kHostFieldNumber;
#endif  // !_MSC_VER

EventBusFeedback_PB::EventBusFeedback_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventBusFeedback_PB::InitAsDefaultInstance() {
  multicast_channel_ = const_cast< ::fim::eventbus::EndPoint*>(&::fim::eventbus::EndPoint::default_instance());
}

EventBusFeedback_PB::EventBusFeedback_PB(const EventBusFeedback_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventBusFeedback_PB::SharedCtor() {
  _cached_size_ = 0;
  multicast_channel_ = NULL;
  ip_addr_ = 0u;
  partition_count_ = 0u;
  partition_index_ = 0u;
  role_ = 1;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventBusFeedback_PB::~EventBusFeedback_PB() {
  SharedDtor();
}

void EventBusFeedback_PB::SharedDtor() {
  if (this != default_instance_) {
    delete multicast_channel_;
  }
}

void EventBusFeedback_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventBusFeedback_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventBusFeedback_PB_descriptor_;
}

const EventBusFeedback_PB& EventBusFeedback_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fbus_2eproto();  return *default_instance_;
}

EventBusFeedback_PB* EventBusFeedback_PB::default_instance_ = NULL;

EventBusFeedback_PB* EventBusFeedback_PB::New() const {
  return new EventBusFeedback_PB;
}

void EventBusFeedback_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_multicast_channel()) {
      if (multicast_channel_ != NULL) multicast_channel_->::fim::eventbus::EndPoint::Clear();
    }
    ip_addr_ = 0u;
    partition_count_ = 0u;
    partition_index_ = 0u;
    role_ = 1;
    type_ = 1;
  }
  host_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventBusFeedback_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fim.eventbus.EndPoint multicast_channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multicast_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip_addr;
        break;
      }
      
      // required uint32 ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_addr_)));
          set_has_ip_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_partition_count;
        break;
      }
      
      // required uint32 partition_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partition_count_)));
          set_has_partition_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_partition_index;
        break;
      }
      
      // required uint32 partition_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partition_index_)));
          set_has_partition_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role;
        break;
      }
      
      // optional .fim.eventbus.Role_E role = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (fim::eventbus::Role_E_IsValid(value)) {
            set_role(static_cast< fim::eventbus::Role_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional .fim.eventbus.ListenerType_E type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (fim::eventbus::ListenerType_E_IsValid(value)) {
            set_type(static_cast< fim::eventbus::ListenerType_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_host;
        break;
      }
      
      // repeated .fim.eventbus.HostInfo_PB host = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_host;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventBusFeedback_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fim.eventbus.EndPoint multicast_channel = 1;
  if (has_multicast_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multicast_channel(), output);
  }
  
  // required uint32 ip_addr = 2;
  if (has_ip_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip_addr(), output);
  }
  
  // required uint32 partition_count = 3;
  if (has_partition_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->partition_count(), output);
  }
  
  // required uint32 partition_index = 4;
  if (has_partition_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->partition_index(), output);
  }
  
  // optional .fim.eventbus.Role_E role = 5;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->role(), output);
  }
  
  // optional .fim.eventbus.ListenerType_E type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }
  
  // repeated .fim.eventbus.HostInfo_PB host = 7;
  for (int i = 0; i < this->host_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->host(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventBusFeedback_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fim.eventbus.EndPoint multicast_channel = 1;
  if (has_multicast_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->multicast_channel(), target);
  }
  
  // required uint32 ip_addr = 2;
  if (has_ip_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip_addr(), target);
  }
  
  // required uint32 partition_count = 3;
  if (has_partition_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->partition_count(), target);
  }
  
  // required uint32 partition_index = 4;
  if (has_partition_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->partition_index(), target);
  }
  
  // optional .fim.eventbus.Role_E role = 5;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->role(), target);
  }
  
  // optional .fim.eventbus.ListenerType_E type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }
  
  // repeated .fim.eventbus.HostInfo_PB host = 7;
  for (int i = 0; i < this->host_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->host(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventBusFeedback_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fim.eventbus.EndPoint multicast_channel = 1;
    if (has_multicast_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multicast_channel());
    }
    
    // required uint32 ip_addr = 2;
    if (has_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_addr());
    }
    
    // required uint32 partition_count = 3;
    if (has_partition_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partition_count());
    }
    
    // required uint32 partition_index = 4;
    if (has_partition_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partition_index());
    }
    
    // optional .fim.eventbus.Role_E role = 5;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }
    
    // optional .fim.eventbus.ListenerType_E type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .fim.eventbus.HostInfo_PB host = 7;
  total_size += 1 * this->host_size();
  for (int i = 0; i < this->host_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->host(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventBusFeedback_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventBusFeedback_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventBusFeedback_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventBusFeedback_PB::MergeFrom(const EventBusFeedback_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_.MergeFrom(from.host_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multicast_channel()) {
      mutable_multicast_channel()->::fim::eventbus::EndPoint::MergeFrom(from.multicast_channel());
    }
    if (from.has_ip_addr()) {
      set_ip_addr(from.ip_addr());
    }
    if (from.has_partition_count()) {
      set_partition_count(from.partition_count());
    }
    if (from.has_partition_index()) {
      set_partition_index(from.partition_index());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventBusFeedback_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBusFeedback_PB::CopyFrom(const EventBusFeedback_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBusFeedback_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < host_size(); i++) {
    if (!this->host(i).IsInitialized()) return false;
  }
  return true;
}

void EventBusFeedback_PB::Swap(EventBusFeedback_PB* other) {
  if (other != this) {
    std::swap(multicast_channel_, other->multicast_channel_);
    std::swap(ip_addr_, other->ip_addr_);
    std::swap(partition_count_, other->partition_count_);
    std::swap(partition_index_, other->partition_index_);
    std::swap(role_, other->role_);
    std::swap(type_, other->type_);
    host_.Swap(&other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventBusFeedback_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventBusFeedback_PB_descriptor_;
  metadata.reflection = EventBusFeedback_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eventbus
}  // namespace fim

// @@protoc_insertion_point(global_scope)
