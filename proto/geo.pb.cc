// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace geo {

namespace {

const ::google::protobuf::Descriptor* Continent_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Continent_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Continent_PB_ContinentCode_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Country_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Country_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Country_PB_CountryCode_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Region_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Region_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Region_PB_RegionCode_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Speed_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Speed_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Speed_PB_SpeedType_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Geo_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geo_PB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_geo_2eproto() {
  protobuf_AddDesc_geo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "geo.proto");
  GOOGLE_CHECK(file != NULL);
  Continent_PB_descriptor_ = file->message_type(0);
  static const int Continent_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Continent_PB, continent_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Continent_PB, raw_value_),
  };
  Continent_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Continent_PB_descriptor_,
      Continent_PB::default_instance_,
      Continent_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Continent_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Continent_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Continent_PB));
  Continent_PB_ContinentCode_E_descriptor_ = Continent_PB_descriptor_->enum_type(0);
  Country_PB_descriptor_ = file->message_type(1);
  static const int Country_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_PB, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_PB, raw_value_),
  };
  Country_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Country_PB_descriptor_,
      Country_PB::default_instance_,
      Country_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Country_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Country_PB));
  Country_PB_CountryCode_E_descriptor_ = Country_PB_descriptor_->enum_type(0);
  Region_PB_descriptor_ = file->message_type(2);
  static const int Region_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region_PB, region_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region_PB, raw_value_),
  };
  Region_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Region_PB_descriptor_,
      Region_PB::default_instance_,
      Region_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Region_PB));
  Region_PB_RegionCode_E_descriptor_ = Region_PB_descriptor_->enum_type(0);
  Speed_PB_descriptor_ = file->message_type(3);
  static const int Speed_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed_PB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed_PB, raw_value_),
  };
  Speed_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Speed_PB_descriptor_,
      Speed_PB::default_instance_,
      Speed_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Speed_PB));
  Speed_PB_SpeedType_E_descriptor_ = Speed_PB_descriptor_->enum_type(0);
  Geo_PB_descriptor_ = file->message_type(4);
  static const int Geo_PB_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, isp_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, connection_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, continent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, deprecated_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, metro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, zip_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, area_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, gmt_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, domain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, region_),
  };
  Geo_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Geo_PB_descriptor_,
      Geo_PB::default_instance_,
      Geo_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Geo_PB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_geo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Continent_PB_descriptor_, &Continent_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Country_PB_descriptor_, &Country_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Region_PB_descriptor_, &Region_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Speed_PB_descriptor_, &Speed_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Geo_PB_descriptor_, &Geo_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_geo_2eproto() {
  delete Continent_PB::default_instance_;
  delete Continent_PB_reflection_;
  delete Country_PB::default_instance_;
  delete Country_PB_reflection_;
  delete Region_PB::default_instance_;
  delete Region_PB_reflection_;
  delete Speed_PB::default_instance_;
  delete Speed_PB_reflection_;
  delete Geo_PB::default_instance_;
  delete Geo_PB_reflection_;
}

void protobuf_AddDesc_geo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rubicon::data::common::protobuf_AddDesc_num_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tgeo.proto\022\020rubicon.data.geo\032\017num_types"
    ".proto\"\372\001\n\014Continent_PB\022O\n\016continent_cod"
    "e\030\001 \001(\0162..rubicon.data.geo.Continent_PB."
    "ContinentCode_E:\007UNKNOWN\022\021\n\traw_value\030\002 "
    "\001(\t\"\205\001\n\017ContinentCode_E\022\013\n\007UNKNOWN\020\000\022\n\n\006"
    "AFRICA\020\001\022\016\n\nANTARCTICA\020\002\022\010\n\004ASIA\020\003\022\r\n\tAU"
    "STRALIA\020\004\022\n\n\006EUROPE\020\005\022\021\n\rNORTH_AMERICA\020\006"
    "\022\021\n\rSOUTH_AMERICA\020\007\"\305\021\n\nCountry_PB\022I\n\014co"
    "untry_code\030\001 \001(\0162*.rubicon.data.geo.Coun"
    "try_PB.CountryCode_E:\007UNKNOWN\022\021\n\traw_val"
    "ue\030\002 \001(\t\"\330\020\n\rCountryCode_E\022\013\n\007UNKNOWN\020\000\022"
    "\006\n\002AD\020\001\022\006\n\002AE\020\002\022\006\n\002AF\020\003\022\006\n\002AG\020\004\022\006\n\002AI\020\005\022"
    "\006\n\002AL\020\006\022\006\n\002AM\020\007\022\006\n\002AN\020\010\022\006\n\002AO\020\t\022\006\n\002AP\020\n\022"
    "\006\n\002AQ\020\013\022\006\n\002AR\020\014\022\006\n\002AS\020\r\022\006\n\002AT\020\016\022\006\n\002AU\020\017\022"
    "\006\n\002AW\020\020\022\006\n\002AZ\020\021\022\006\n\002BA\020\022\022\006\n\002BB\020\023\022\006\n\002BD\020\024\022"
    "\006\n\002BE\020\025\022\006\n\002BF\020\026\022\006\n\002BG\020\027\022\006\n\002BH\020\030\022\006\n\002BI\020\031\022"
    "\006\n\002BJ\020\032\022\006\n\002BM\020\033\022\006\n\002BN\020\034\022\006\n\002BO\020\035\022\006\n\002BR\020\036\022"
    "\006\n\002BS\020\037\022\006\n\002BT\020 \022\006\n\002BV\020!\022\006\n\002BW\020\"\022\006\n\002BY\020#\022"
    "\006\n\002BZ\020$\022\006\n\002CA\020%\022\006\n\002CC\020&\022\006\n\002CD\020\'\022\006\n\002CF\020(\022"
    "\006\n\002CG\020)\022\006\n\002CH\020*\022\006\n\002CI\020+\022\006\n\002CK\020,\022\006\n\002CL\020-\022"
    "\006\n\002CM\020.\022\006\n\002CN\020/\022\006\n\002CO\0200\022\007\n\003CR_\0201\022\006\n\002CS\0202"
    "\022\006\n\002CU\0203\022\006\n\002CV\0204\022\006\n\002CX\0205\022\006\n\002CY\0206\022\006\n\002CZ\0207"
    "\022\006\n\002DE\0208\022\006\n\002DJ\0209\022\006\n\002DK\020:\022\006\n\002DM\020;\022\006\n\002DO\020<"
    "\022\006\n\002DZ\020=\022\006\n\002EC\020>\022\006\n\002EE\020\?\022\006\n\002EG\020@\022\006\n\002EH\020A"
    "\022\006\n\002ER\020B\022\006\n\002ES\020C\022\006\n\002ET\020D\022\006\n\002EU\020E\022\006\n\002FI\020F"
    "\022\006\n\002FJ\020G\022\006\n\002FK\020H\022\006\n\002FM\020I\022\006\n\002FO\020J\022\006\n\002FR\020K"
    "\022\006\n\002GA\020L\022\006\n\002GD\020M\022\006\n\002GE\020N\022\006\n\002GF\020O\022\006\n\002GH\020P"
    "\022\006\n\002GI\020Q\022\006\n\002GL\020R\022\006\n\002GM\020S\022\006\n\002GN\020T\022\006\n\002GP\020U"
    "\022\006\n\002GQ\020V\022\006\n\002GR\020W\022\006\n\002GS\020X\022\006\n\002GT\020Y\022\006\n\002GU\020Z"
    "\022\006\n\002GW\020[\022\006\n\002GY\020\\\022\006\n\002HK\020]\022\006\n\002HM\020^\022\006\n\002HN\020_"
    "\022\006\n\002HR\020`\022\006\n\002HT\020a\022\006\n\002HU\020b\022\006\n\002ID\020c\022\006\n\002IE\020d"
    "\022\006\n\002IL\020e\022\006\n\002IN\020f\022\006\n\002IO\020g\022\006\n\002IQ\020h\022\006\n\002IR\020i"
    "\022\006\n\002IS\020j\022\006\n\002IT\020k\022\006\n\002JM\020l\022\006\n\002JO\020m\022\006\n\002JP\020n"
    "\022\006\n\002KE\020o\022\006\n\002KG\020p\022\006\n\002KH\020q\022\006\n\002KI\020r\022\006\n\002KM\020s"
    "\022\006\n\002KN\020t\022\006\n\002KP\020u\022\006\n\002KR\020v\022\006\n\002KW\020w\022\006\n\002KY\020x"
    "\022\006\n\002KZ\020y\022\006\n\002LA\020z\022\006\n\002LB\020{\022\006\n\002LC\020|\022\006\n\002LI\020}"
    "\022\006\n\002LK\020~\022\006\n\002LR\020\177\022\007\n\002LS\020\200\001\022\007\n\002LT\020\201\001\022\007\n\002LU"
    "\020\202\001\022\007\n\002LV\020\203\001\022\007\n\002LY\020\204\001\022\007\n\002MA\020\205\001\022\007\n\002MC\020\206\001\022"
    "\007\n\002MD\020\207\001\022\007\n\002MG\020\210\001\022\007\n\002MH\020\211\001\022\007\n\002MK\020\212\001\022\007\n\002M"
    "L\020\213\001\022\007\n\002MM\020\214\001\022\007\n\002MN\020\215\001\022\007\n\002MO\020\216\001\022\007\n\002MP\020\217\001"
    "\022\007\n\002MQ\020\220\001\022\007\n\002MR\020\221\001\022\007\n\002MS\020\222\001\022\007\n\002MT\020\223\001\022\007\n\002"
    "MU\020\224\001\022\007\n\002MV\020\225\001\022\007\n\002MW\020\226\001\022\007\n\002MX\020\227\001\022\007\n\002MY\020\230"
    "\001\022\007\n\002MZ\020\231\001\022\007\n\002NA\020\232\001\022\007\n\002NC\020\233\001\022\007\n\002NE\020\234\001\022\007\n"
    "\002NF\020\235\001\022\007\n\002NG\020\236\001\022\007\n\002NI\020\237\001\022\007\n\002NL\020\240\001\022\007\n\002NO\020"
    "\241\001\022\007\n\002NP\020\242\001\022\007\n\002NR\020\243\001\022\007\n\002NU\020\244\001\022\007\n\002NZ\020\245\001\022\007"
    "\n\002OM\020\246\001\022\007\n\002PA\020\247\001\022\007\n\002PE\020\250\001\022\007\n\002PF\020\251\001\022\007\n\002PG"
    "\020\252\001\022\007\n\002PH\020\253\001\022\007\n\002PK\020\254\001\022\007\n\002PL\020\255\001\022\007\n\002PM\020\256\001\022"
    "\007\n\002PN\020\257\001\022\007\n\002PR\020\260\001\022\007\n\002PS\020\261\001\022\007\n\002PT\020\262\001\022\007\n\002P"
    "W\020\263\001\022\007\n\002PY\020\264\001\022\007\n\002QA\020\265\001\022\007\n\002RE\020\266\001\022\007\n\002RO\020\267\001"
    "\022\007\n\002RU\020\270\001\022\007\n\002RW\020\271\001\022\007\n\002SA\020\272\001\022\007\n\002SB\020\273\001\022\007\n\002"
    "SC\020\274\001\022\007\n\002SD\020\275\001\022\007\n\002SE\020\276\001\022\007\n\002SG\020\277\001\022\007\n\002SH\020\300"
    "\001\022\007\n\002SI\020\301\001\022\007\n\002SJ\020\302\001\022\007\n\002SK\020\303\001\022\007\n\002SL\020\304\001\022\007\n"
    "\002SM\020\305\001\022\007\n\002SN\020\306\001\022\007\n\002SO\020\307\001\022\007\n\002SR\020\310\001\022\007\n\002ST\020"
    "\311\001\022\007\n\002SV\020\312\001\022\007\n\002SY\020\313\001\022\007\n\002SZ\020\314\001\022\007\n\002TC\020\315\001\022\007"
    "\n\002TD\020\316\001\022\007\n\002TF\020\317\001\022\007\n\002TG\020\320\001\022\007\n\002TH\020\321\001\022\007\n\002TJ"
    "\020\322\001\022\007\n\002TK\020\323\001\022\007\n\002TL\020\324\001\022\007\n\002TM\020\325\001\022\007\n\002TN\020\326\001\022"
    "\007\n\002TO\020\327\001\022\007\n\002TR\020\330\001\022\007\n\002TT\020\331\001\022\007\n\002TV\020\332\001\022\007\n\002T"
    "W\020\333\001\022\007\n\002TZ\020\334\001\022\007\n\002UA\020\335\001\022\007\n\002UG\020\336\001\022\007\n\002UK\020\337\001"
    "\022\007\n\002UM\020\340\001\022\007\n\002US\020\341\001\022\007\n\002UY\020\342\001\022\007\n\002UZ\020\343\001\022\007\n\002"
    "VA\020\344\001\022\007\n\002VC\020\345\001\022\007\n\002VE\020\346\001\022\007\n\002VG\020\347\001\022\007\n\002VN\020\350"
    "\001\022\007\n\002VU\020\351\001\022\007\n\002WF\020\352\001\022\007\n\002WS\020\353\001\022\007\n\002YE\020\354\001\022\007\n"
    "\002YT\020\355\001\022\007\n\002ZA\020\356\001\022\007\n\002ZM\020\357\001\022\007\n\002ZW\020\360\001\022\007\n\002IM\020"
    "\361\001\022\007\n\002JE\020\362\001\022\007\n\002RS\020\363\001\022\007\n\002VI\020\364\001\022\007\n\002AX\020\365\001\022\007"
    "\n\002GG\020\366\001\022\007\n\002ME\020\367\001\022\t\n\004STAR\020\364\003\"\334\007\n\tRegion_P"
    "B\022F\n\013region_code\030\001 \001(\0162(.rubicon.data.ge"
    "o.Region_PB.RegionCode_E:\007UNKNOWN\022\021\n\traw"
    "_value\030\002 \001(\t\"\363\006\n\014RegionCode_E\022\013\n\007UNKNOWN"
    "\020\000\022\006\n\002AL\020\001\022\006\n\002AK\020\002\022\006\n\002AZ\020\003\022\006\n\002AR\020\004\022\006\n\002CA"
    "\020\005\022\006\n\002CO\020\006\022\006\n\002CT\020\007\022\006\n\002DE\020\010\022\006\n\002FL\020\t\022\006\n\002GA"
    "\020\n\022\006\n\002HI\020\013\022\006\n\002ID\020\014\022\006\n\002IL\020\r\022\006\n\002IN\020\016\022\006\n\002IA"
    "\020\017\022\006\n\002KS\020\020\022\006\n\002KY\020\021\022\006\n\002LA\020\022\022\006\n\002ME\020\023\022\006\n\002MD"
    "\020\024\022\006\n\002MA\020\025\022\006\n\002MI\020\026\022\006\n\002MN\020\027\022\006\n\002MS\020\030\022\006\n\002MO"
    "\020\031\022\006\n\002MT\020\032\022\006\n\002NE\020\033\022\006\n\002NV\020\034\022\006\n\002NH\020\035\022\006\n\002NJ"
    "\020\036\022\006\n\002NM\020\037\022\006\n\002NY\020 \022\006\n\002NC\020!\022\006\n\002ND\020\"\022\006\n\002OH"
    "\020#\022\007\n\003OK_\020$\022\006\n\002OR\020%\022\006\n\002PA\020&\022\006\n\002RI\020\'\022\006\n\002S"
    "C\020(\022\006\n\002SD\020)\022\006\n\002TN\020*\022\006\n\002TX\020+\022\006\n\002UT\020,\022\006\n\002V"
    "T\020-\022\006\n\002VA\020.\022\006\n\002WA\020/\022\006\n\002WV\0200\022\006\n\002WI\0201\022\006\n\002W"
    "Y\0202\022\006\n\002AB\0203\022\007\n\003AOL\0204\022\005\n\001B\0205\022\006\n\002BC\0206\022\006\n\002B"
    "E\0207\022\006\n\002BR\0208\022\006\n\002BW\0209\022\006\n\002BY\020:\022\005\n\001C\020;\022\005\n\001D\020"
    "<\022\006\n\002DC\020=\022\005\n\001E\020>\022\007\n\003ENG\020\?\022\005\n\001F\020@\022\005\n\001G\020A\022"
    "\005\n\001H\020B\022\006\n\002HB\020C\022\006\n\002HE\020D\022\006\n\002HH\020E\022\005\n\001I\020F\022\005\n"
    "\001J\020G\022\005\n\001K\020H\022\005\n\001L\020I\022\005\n\001M\020J\022\006\n\002MB\020K\022\006\n\002MV\020"
    "L\022\005\n\001N\020M\022\006\n\002NB\020N\022\006\n\002NF\020O\022\006\n\002NI\020P\022\007\n\003NIR\020"
    "Q\022\006\n\002NS\020R\022\006\n\002NT\020S\022\006\n\002NU\020T\022\006\n\002NW\020U\022\005\n\001O\020V"
    "\022\006\n\002ON\020W\022\005\n\001P\020X\022\006\n\002PE\020Y\022\005\n\001Q\020Z\022\006\n\002QC\020[\022\006"
    "\n\002QL\020\\\022\005\n\001R\020]\022\006\n\002RP\020^\022\005\n\001S\020_\022\006\n\002SA\020`\022\006\n\002"
    "SH\020a\022\006\n\002SK\020b\022\006\n\002SL\020c\022\006\n\002SN\020d\022\006\n\002ST\020e\022\005\n\001"
    "T\020f\022\006\n\002TH\020g\022\006\n\002TS\020h\022\005\n\001U\020i\022\005\n\001V\020j\022\006\n\002VI\020"
    "k\022\007\n\003WLS\020l\022\006\n\002YT\020m\"\365\001\n\010Speed_PB\022=\n\004type\030"
    "\001 \001(\0162&.rubicon.data.geo.Speed_PB.SpeedT"
    "ype_E:\007UNKNOWN\022\021\n\traw_value\030\002 \001(\t\"\226\001\n\013Sp"
    "eedType_E\022\013\n\007UNKNOWN\020\001\022\n\n\006DIALUP\020\002\022\r\n\tBR"
    "OADBAND\020\003\022\t\n\005CABLE\020\004\022\010\n\004XSDL\020\005\022\006\n\002T1\020\006\022\006"
    "\n\002T3\020\007\022\007\n\003OC3\020\010\022\010\n\004OC12\020\t\022\r\n\tSATELLITE\020\n"
    "\022\014\n\010WIRELESS\020\013\022\n\n\006MOBILE\020\014\"\250\003\n\006Geo_PB\022\020\n"
    "\010isp_name\030\001 \001(\t\0224\n\020connection_speed\030\002 \001("
    "\0132\032.rubicon.data.geo.Speed_PB\0221\n\tcontine"
    "nt\030\003 \001(\0132\036.rubicon.data.geo.Continent_PB"
    "\022-\n\007country\030\004 \001(\0132\034.rubicon.data.geo.Cou"
    "ntry_PB\0226\n\021deprecated_region\030\005 \001(\0132\033.rub"
    "icon.data.geo.Region_PB\022\r\n\005metro\030\006 \001(\t\022\014"
    "\n\004city\030\007 \001(\t\022\020\n\010zip_code\030\010 \001(\t\0223\n\tarea_c"
    "ode\030\t \001(\0132 .rubicon.data.common.AnUInt32"
    "_PB\0223\n\ngmt_offset\030\n \001(\0132\037.rubicon.data.c"
    "ommon.AnInt32_PB\022\023\n\013domain_name\030\013 \001(\t\022\016\n"
    "\006region\030\014 \001(\tB\002H\001", 4217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geo.proto", &protobuf_RegisterTypes);
  Continent_PB::default_instance_ = new Continent_PB();
  Country_PB::default_instance_ = new Country_PB();
  Region_PB::default_instance_ = new Region_PB();
  Speed_PB::default_instance_ = new Speed_PB();
  Geo_PB::default_instance_ = new Geo_PB();
  Continent_PB::default_instance_->InitAsDefaultInstance();
  Country_PB::default_instance_->InitAsDefaultInstance();
  Region_PB::default_instance_->InitAsDefaultInstance();
  Speed_PB::default_instance_->InitAsDefaultInstance();
  Geo_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_geo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_geo_2eproto {
  StaticDescriptorInitializer_geo_2eproto() {
    protobuf_AddDesc_geo_2eproto();
  }
} static_descriptor_initializer_geo_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Continent_PB_ContinentCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Continent_PB_ContinentCode_E_descriptor_;
}
bool Continent_PB_ContinentCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Continent_PB_ContinentCode_E Continent_PB::UNKNOWN;
const Continent_PB_ContinentCode_E Continent_PB::AFRICA;
const Continent_PB_ContinentCode_E Continent_PB::ANTARCTICA;
const Continent_PB_ContinentCode_E Continent_PB::ASIA;
const Continent_PB_ContinentCode_E Continent_PB::AUSTRALIA;
const Continent_PB_ContinentCode_E Continent_PB::EUROPE;
const Continent_PB_ContinentCode_E Continent_PB::NORTH_AMERICA;
const Continent_PB_ContinentCode_E Continent_PB::SOUTH_AMERICA;
const Continent_PB_ContinentCode_E Continent_PB::ContinentCode_E_MIN;
const Continent_PB_ContinentCode_E Continent_PB::ContinentCode_E_MAX;
const int Continent_PB::ContinentCode_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Continent_PB::kContinentCodeFieldNumber;
const int Continent_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

Continent_PB::Continent_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Continent_PB::InitAsDefaultInstance() {
}

Continent_PB::Continent_PB(const Continent_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Continent_PB::SharedCtor() {
  _cached_size_ = 0;
  continent_code_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Continent_PB::~Continent_PB() {
  SharedDtor();
}

void Continent_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void Continent_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Continent_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Continent_PB_descriptor_;
}

const Continent_PB& Continent_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geo_2eproto();  return *default_instance_;
}

Continent_PB* Continent_PB::default_instance_ = NULL;

Continent_PB* Continent_PB::New() const {
  return new Continent_PB;
}

void Continent_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    continent_code_ = 0;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Continent_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.geo.Continent_PB.ContinentCode_E continent_code = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::geo::Continent_PB_ContinentCode_E_IsValid(value)) {
            set_continent_code(static_cast< ::rubicon::data::geo::Continent_PB_ContinentCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Continent_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.geo.Continent_PB.ContinentCode_E continent_code = 1 [default = UNKNOWN];
  if (has_continent_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->continent_code(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Continent_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.geo.Continent_PB.ContinentCode_E continent_code = 1 [default = UNKNOWN];
  if (has_continent_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->continent_code(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Continent_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.geo.Continent_PB.ContinentCode_E continent_code = 1 [default = UNKNOWN];
    if (has_continent_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->continent_code());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Continent_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Continent_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Continent_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Continent_PB::MergeFrom(const Continent_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_continent_code()) {
      set_continent_code(from.continent_code());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Continent_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Continent_PB::CopyFrom(const Continent_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Continent_PB::IsInitialized() const {
  
  return true;
}

void Continent_PB::Swap(Continent_PB* other) {
  if (other != this) {
    std::swap(continent_code_, other->continent_code_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Continent_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Continent_PB_descriptor_;
  metadata.reflection = Continent_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Country_PB_CountryCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_PB_CountryCode_E_descriptor_;
}
bool Country_PB_CountryCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 500:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Country_PB_CountryCode_E Country_PB::UNKNOWN;
const Country_PB_CountryCode_E Country_PB::AD;
const Country_PB_CountryCode_E Country_PB::AE;
const Country_PB_CountryCode_E Country_PB::AF;
const Country_PB_CountryCode_E Country_PB::AG;
const Country_PB_CountryCode_E Country_PB::AI;
const Country_PB_CountryCode_E Country_PB::AL;
const Country_PB_CountryCode_E Country_PB::AM;
const Country_PB_CountryCode_E Country_PB::AN;
const Country_PB_CountryCode_E Country_PB::AO;
const Country_PB_CountryCode_E Country_PB::AP;
const Country_PB_CountryCode_E Country_PB::AQ;
const Country_PB_CountryCode_E Country_PB::AR;
const Country_PB_CountryCode_E Country_PB::AS;
const Country_PB_CountryCode_E Country_PB::AT;
const Country_PB_CountryCode_E Country_PB::AU;
const Country_PB_CountryCode_E Country_PB::AW;
const Country_PB_CountryCode_E Country_PB::AZ;
const Country_PB_CountryCode_E Country_PB::BA;
const Country_PB_CountryCode_E Country_PB::BB;
const Country_PB_CountryCode_E Country_PB::BD;
const Country_PB_CountryCode_E Country_PB::BE;
const Country_PB_CountryCode_E Country_PB::BF;
const Country_PB_CountryCode_E Country_PB::BG;
const Country_PB_CountryCode_E Country_PB::BH;
const Country_PB_CountryCode_E Country_PB::BI;
const Country_PB_CountryCode_E Country_PB::BJ;
const Country_PB_CountryCode_E Country_PB::BM;
const Country_PB_CountryCode_E Country_PB::BN;
const Country_PB_CountryCode_E Country_PB::BO;
const Country_PB_CountryCode_E Country_PB::BR;
const Country_PB_CountryCode_E Country_PB::BS;
const Country_PB_CountryCode_E Country_PB::BT;
const Country_PB_CountryCode_E Country_PB::BV;
const Country_PB_CountryCode_E Country_PB::BW;
const Country_PB_CountryCode_E Country_PB::BY;
const Country_PB_CountryCode_E Country_PB::BZ;
const Country_PB_CountryCode_E Country_PB::CA;
const Country_PB_CountryCode_E Country_PB::CC;
const Country_PB_CountryCode_E Country_PB::CD;
const Country_PB_CountryCode_E Country_PB::CF;
const Country_PB_CountryCode_E Country_PB::CG;
const Country_PB_CountryCode_E Country_PB::CH;
const Country_PB_CountryCode_E Country_PB::CI;
const Country_PB_CountryCode_E Country_PB::CK;
const Country_PB_CountryCode_E Country_PB::CL;
const Country_PB_CountryCode_E Country_PB::CM;
const Country_PB_CountryCode_E Country_PB::CN;
const Country_PB_CountryCode_E Country_PB::CO;
const Country_PB_CountryCode_E Country_PB::CR_;
const Country_PB_CountryCode_E Country_PB::CS;
const Country_PB_CountryCode_E Country_PB::CU;
const Country_PB_CountryCode_E Country_PB::CV;
const Country_PB_CountryCode_E Country_PB::CX;
const Country_PB_CountryCode_E Country_PB::CY;
const Country_PB_CountryCode_E Country_PB::CZ;
const Country_PB_CountryCode_E Country_PB::DE;
const Country_PB_CountryCode_E Country_PB::DJ;
const Country_PB_CountryCode_E Country_PB::DK;
const Country_PB_CountryCode_E Country_PB::DM;
const Country_PB_CountryCode_E Country_PB::DO;
const Country_PB_CountryCode_E Country_PB::DZ;
const Country_PB_CountryCode_E Country_PB::EC;
const Country_PB_CountryCode_E Country_PB::EE;
const Country_PB_CountryCode_E Country_PB::EG;
const Country_PB_CountryCode_E Country_PB::EH;
const Country_PB_CountryCode_E Country_PB::ER;
const Country_PB_CountryCode_E Country_PB::ES;
const Country_PB_CountryCode_E Country_PB::ET;
const Country_PB_CountryCode_E Country_PB::EU;
const Country_PB_CountryCode_E Country_PB::FI;
const Country_PB_CountryCode_E Country_PB::FJ;
const Country_PB_CountryCode_E Country_PB::FK;
const Country_PB_CountryCode_E Country_PB::FM;
const Country_PB_CountryCode_E Country_PB::FO;
const Country_PB_CountryCode_E Country_PB::FR;
const Country_PB_CountryCode_E Country_PB::GA;
const Country_PB_CountryCode_E Country_PB::GD;
const Country_PB_CountryCode_E Country_PB::GE;
const Country_PB_CountryCode_E Country_PB::GF;
const Country_PB_CountryCode_E Country_PB::GH;
const Country_PB_CountryCode_E Country_PB::GI;
const Country_PB_CountryCode_E Country_PB::GL;
const Country_PB_CountryCode_E Country_PB::GM;
const Country_PB_CountryCode_E Country_PB::GN;
const Country_PB_CountryCode_E Country_PB::GP;
const Country_PB_CountryCode_E Country_PB::GQ;
const Country_PB_CountryCode_E Country_PB::GR;
const Country_PB_CountryCode_E Country_PB::GS;
const Country_PB_CountryCode_E Country_PB::GT;
const Country_PB_CountryCode_E Country_PB::GU;
const Country_PB_CountryCode_E Country_PB::GW;
const Country_PB_CountryCode_E Country_PB::GY;
const Country_PB_CountryCode_E Country_PB::HK;
const Country_PB_CountryCode_E Country_PB::HM;
const Country_PB_CountryCode_E Country_PB::HN;
const Country_PB_CountryCode_E Country_PB::HR;
const Country_PB_CountryCode_E Country_PB::HT;
const Country_PB_CountryCode_E Country_PB::HU;
const Country_PB_CountryCode_E Country_PB::ID;
const Country_PB_CountryCode_E Country_PB::IE;
const Country_PB_CountryCode_E Country_PB::IL;
const Country_PB_CountryCode_E Country_PB::IN;
const Country_PB_CountryCode_E Country_PB::IO;
const Country_PB_CountryCode_E Country_PB::IQ;
const Country_PB_CountryCode_E Country_PB::IR;
const Country_PB_CountryCode_E Country_PB::IS;
const Country_PB_CountryCode_E Country_PB::IT;
const Country_PB_CountryCode_E Country_PB::JM;
const Country_PB_CountryCode_E Country_PB::JO;
const Country_PB_CountryCode_E Country_PB::JP;
const Country_PB_CountryCode_E Country_PB::KE;
const Country_PB_CountryCode_E Country_PB::KG;
const Country_PB_CountryCode_E Country_PB::KH;
const Country_PB_CountryCode_E Country_PB::KI;
const Country_PB_CountryCode_E Country_PB::KM;
const Country_PB_CountryCode_E Country_PB::KN;
const Country_PB_CountryCode_E Country_PB::KP;
const Country_PB_CountryCode_E Country_PB::KR;
const Country_PB_CountryCode_E Country_PB::KW;
const Country_PB_CountryCode_E Country_PB::KY;
const Country_PB_CountryCode_E Country_PB::KZ;
const Country_PB_CountryCode_E Country_PB::LA;
const Country_PB_CountryCode_E Country_PB::LB;
const Country_PB_CountryCode_E Country_PB::LC;
const Country_PB_CountryCode_E Country_PB::LI;
const Country_PB_CountryCode_E Country_PB::LK;
const Country_PB_CountryCode_E Country_PB::LR;
const Country_PB_CountryCode_E Country_PB::LS;
const Country_PB_CountryCode_E Country_PB::LT;
const Country_PB_CountryCode_E Country_PB::LU;
const Country_PB_CountryCode_E Country_PB::LV;
const Country_PB_CountryCode_E Country_PB::LY;
const Country_PB_CountryCode_E Country_PB::MA;
const Country_PB_CountryCode_E Country_PB::MC;
const Country_PB_CountryCode_E Country_PB::MD;
const Country_PB_CountryCode_E Country_PB::MG;
const Country_PB_CountryCode_E Country_PB::MH;
const Country_PB_CountryCode_E Country_PB::MK;
const Country_PB_CountryCode_E Country_PB::ML;
const Country_PB_CountryCode_E Country_PB::MM;
const Country_PB_CountryCode_E Country_PB::MN;
const Country_PB_CountryCode_E Country_PB::MO;
const Country_PB_CountryCode_E Country_PB::MP;
const Country_PB_CountryCode_E Country_PB::MQ;
const Country_PB_CountryCode_E Country_PB::MR;
const Country_PB_CountryCode_E Country_PB::MS;
const Country_PB_CountryCode_E Country_PB::MT;
const Country_PB_CountryCode_E Country_PB::MU;
const Country_PB_CountryCode_E Country_PB::MV;
const Country_PB_CountryCode_E Country_PB::MW;
const Country_PB_CountryCode_E Country_PB::MX;
const Country_PB_CountryCode_E Country_PB::MY;
const Country_PB_CountryCode_E Country_PB::MZ;
const Country_PB_CountryCode_E Country_PB::NA;
const Country_PB_CountryCode_E Country_PB::NC;
const Country_PB_CountryCode_E Country_PB::NE;
const Country_PB_CountryCode_E Country_PB::NF;
const Country_PB_CountryCode_E Country_PB::NG;
const Country_PB_CountryCode_E Country_PB::NI;
const Country_PB_CountryCode_E Country_PB::NL;
const Country_PB_CountryCode_E Country_PB::NO;
const Country_PB_CountryCode_E Country_PB::NP;
const Country_PB_CountryCode_E Country_PB::NR;
const Country_PB_CountryCode_E Country_PB::NU;
const Country_PB_CountryCode_E Country_PB::NZ;
const Country_PB_CountryCode_E Country_PB::OM;
const Country_PB_CountryCode_E Country_PB::PA;
const Country_PB_CountryCode_E Country_PB::PE;
const Country_PB_CountryCode_E Country_PB::PF;
const Country_PB_CountryCode_E Country_PB::PG;
const Country_PB_CountryCode_E Country_PB::PH;
const Country_PB_CountryCode_E Country_PB::PK;
const Country_PB_CountryCode_E Country_PB::PL;
const Country_PB_CountryCode_E Country_PB::PM;
const Country_PB_CountryCode_E Country_PB::PN;
const Country_PB_CountryCode_E Country_PB::PR;
const Country_PB_CountryCode_E Country_PB::PS;
const Country_PB_CountryCode_E Country_PB::PT;
const Country_PB_CountryCode_E Country_PB::PW;
const Country_PB_CountryCode_E Country_PB::PY;
const Country_PB_CountryCode_E Country_PB::QA;
const Country_PB_CountryCode_E Country_PB::RE;
const Country_PB_CountryCode_E Country_PB::RO;
const Country_PB_CountryCode_E Country_PB::RU;
const Country_PB_CountryCode_E Country_PB::RW;
const Country_PB_CountryCode_E Country_PB::SA;
const Country_PB_CountryCode_E Country_PB::SB;
const Country_PB_CountryCode_E Country_PB::SC;
const Country_PB_CountryCode_E Country_PB::SD;
const Country_PB_CountryCode_E Country_PB::SE;
const Country_PB_CountryCode_E Country_PB::SG;
const Country_PB_CountryCode_E Country_PB::SH;
const Country_PB_CountryCode_E Country_PB::SI;
const Country_PB_CountryCode_E Country_PB::SJ;
const Country_PB_CountryCode_E Country_PB::SK;
const Country_PB_CountryCode_E Country_PB::SL;
const Country_PB_CountryCode_E Country_PB::SM;
const Country_PB_CountryCode_E Country_PB::SN;
const Country_PB_CountryCode_E Country_PB::SO;
const Country_PB_CountryCode_E Country_PB::SR;
const Country_PB_CountryCode_E Country_PB::ST;
const Country_PB_CountryCode_E Country_PB::SV;
const Country_PB_CountryCode_E Country_PB::SY;
const Country_PB_CountryCode_E Country_PB::SZ;
const Country_PB_CountryCode_E Country_PB::TC;
const Country_PB_CountryCode_E Country_PB::TD;
const Country_PB_CountryCode_E Country_PB::TF;
const Country_PB_CountryCode_E Country_PB::TG;
const Country_PB_CountryCode_E Country_PB::TH;
const Country_PB_CountryCode_E Country_PB::TJ;
const Country_PB_CountryCode_E Country_PB::TK;
const Country_PB_CountryCode_E Country_PB::TL;
const Country_PB_CountryCode_E Country_PB::TM;
const Country_PB_CountryCode_E Country_PB::TN;
const Country_PB_CountryCode_E Country_PB::TO;
const Country_PB_CountryCode_E Country_PB::TR;
const Country_PB_CountryCode_E Country_PB::TT;
const Country_PB_CountryCode_E Country_PB::TV;
const Country_PB_CountryCode_E Country_PB::TW;
const Country_PB_CountryCode_E Country_PB::TZ;
const Country_PB_CountryCode_E Country_PB::UA;
const Country_PB_CountryCode_E Country_PB::UG;
const Country_PB_CountryCode_E Country_PB::UK;
const Country_PB_CountryCode_E Country_PB::UM;
const Country_PB_CountryCode_E Country_PB::US;
const Country_PB_CountryCode_E Country_PB::UY;
const Country_PB_CountryCode_E Country_PB::UZ;
const Country_PB_CountryCode_E Country_PB::VA;
const Country_PB_CountryCode_E Country_PB::VC;
const Country_PB_CountryCode_E Country_PB::VE;
const Country_PB_CountryCode_E Country_PB::VG;
const Country_PB_CountryCode_E Country_PB::VN;
const Country_PB_CountryCode_E Country_PB::VU;
const Country_PB_CountryCode_E Country_PB::WF;
const Country_PB_CountryCode_E Country_PB::WS;
const Country_PB_CountryCode_E Country_PB::YE;
const Country_PB_CountryCode_E Country_PB::YT;
const Country_PB_CountryCode_E Country_PB::ZA;
const Country_PB_CountryCode_E Country_PB::ZM;
const Country_PB_CountryCode_E Country_PB::ZW;
const Country_PB_CountryCode_E Country_PB::IM;
const Country_PB_CountryCode_E Country_PB::JE;
const Country_PB_CountryCode_E Country_PB::RS;
const Country_PB_CountryCode_E Country_PB::VI;
const Country_PB_CountryCode_E Country_PB::AX;
const Country_PB_CountryCode_E Country_PB::GG;
const Country_PB_CountryCode_E Country_PB::ME;
const Country_PB_CountryCode_E Country_PB::STAR;
const Country_PB_CountryCode_E Country_PB::CountryCode_E_MIN;
const Country_PB_CountryCode_E Country_PB::CountryCode_E_MAX;
const int Country_PB::CountryCode_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Country_PB::kCountryCodeFieldNumber;
const int Country_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

Country_PB::Country_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Country_PB::InitAsDefaultInstance() {
}

Country_PB::Country_PB(const Country_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Country_PB::SharedCtor() {
  _cached_size_ = 0;
  country_code_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Country_PB::~Country_PB() {
  SharedDtor();
}

void Country_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void Country_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Country_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Country_PB_descriptor_;
}

const Country_PB& Country_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geo_2eproto();  return *default_instance_;
}

Country_PB* Country_PB::default_instance_ = NULL;

Country_PB* Country_PB::New() const {
  return new Country_PB;
}

void Country_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_code_ = 0;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Country_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.geo.Country_PB.CountryCode_E country_code = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::geo::Country_PB_CountryCode_E_IsValid(value)) {
            set_country_code(static_cast< ::rubicon::data::geo::Country_PB_CountryCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Country_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.geo.Country_PB.CountryCode_E country_code = 1 [default = UNKNOWN];
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->country_code(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Country_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.geo.Country_PB.CountryCode_E country_code = 1 [default = UNKNOWN];
  if (has_country_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->country_code(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Country_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.geo.Country_PB.CountryCode_E country_code = 1 [default = UNKNOWN];
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->country_code());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Country_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Country_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Country_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Country_PB::MergeFrom(const Country_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Country_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country_PB::CopyFrom(const Country_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country_PB::IsInitialized() const {
  
  return true;
}

void Country_PB::Swap(Country_PB* other) {
  if (other != this) {
    std::swap(country_code_, other->country_code_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Country_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Country_PB_descriptor_;
  metadata.reflection = Country_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Region_PB_RegionCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_PB_RegionCode_E_descriptor_;
}
bool Region_PB_RegionCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Region_PB_RegionCode_E Region_PB::UNKNOWN;
const Region_PB_RegionCode_E Region_PB::AL;
const Region_PB_RegionCode_E Region_PB::AK;
const Region_PB_RegionCode_E Region_PB::AZ;
const Region_PB_RegionCode_E Region_PB::AR;
const Region_PB_RegionCode_E Region_PB::CA;
const Region_PB_RegionCode_E Region_PB::CO;
const Region_PB_RegionCode_E Region_PB::CT;
const Region_PB_RegionCode_E Region_PB::DE;
const Region_PB_RegionCode_E Region_PB::FL;
const Region_PB_RegionCode_E Region_PB::GA;
const Region_PB_RegionCode_E Region_PB::HI;
const Region_PB_RegionCode_E Region_PB::ID;
const Region_PB_RegionCode_E Region_PB::IL;
const Region_PB_RegionCode_E Region_PB::IN;
const Region_PB_RegionCode_E Region_PB::IA;
const Region_PB_RegionCode_E Region_PB::KS;
const Region_PB_RegionCode_E Region_PB::KY;
const Region_PB_RegionCode_E Region_PB::LA;
const Region_PB_RegionCode_E Region_PB::ME;
const Region_PB_RegionCode_E Region_PB::MD;
const Region_PB_RegionCode_E Region_PB::MA;
const Region_PB_RegionCode_E Region_PB::MI;
const Region_PB_RegionCode_E Region_PB::MN;
const Region_PB_RegionCode_E Region_PB::MS;
const Region_PB_RegionCode_E Region_PB::MO;
const Region_PB_RegionCode_E Region_PB::MT;
const Region_PB_RegionCode_E Region_PB::NE;
const Region_PB_RegionCode_E Region_PB::NV;
const Region_PB_RegionCode_E Region_PB::NH;
const Region_PB_RegionCode_E Region_PB::NJ;
const Region_PB_RegionCode_E Region_PB::NM;
const Region_PB_RegionCode_E Region_PB::NY;
const Region_PB_RegionCode_E Region_PB::NC;
const Region_PB_RegionCode_E Region_PB::ND;
const Region_PB_RegionCode_E Region_PB::OH;
const Region_PB_RegionCode_E Region_PB::OK_;
const Region_PB_RegionCode_E Region_PB::OR;
const Region_PB_RegionCode_E Region_PB::PA;
const Region_PB_RegionCode_E Region_PB::RI;
const Region_PB_RegionCode_E Region_PB::SC;
const Region_PB_RegionCode_E Region_PB::SD;
const Region_PB_RegionCode_E Region_PB::TN;
const Region_PB_RegionCode_E Region_PB::TX;
const Region_PB_RegionCode_E Region_PB::UT;
const Region_PB_RegionCode_E Region_PB::VT;
const Region_PB_RegionCode_E Region_PB::VA;
const Region_PB_RegionCode_E Region_PB::WA;
const Region_PB_RegionCode_E Region_PB::WV;
const Region_PB_RegionCode_E Region_PB::WI;
const Region_PB_RegionCode_E Region_PB::WY;
const Region_PB_RegionCode_E Region_PB::AB;
const Region_PB_RegionCode_E Region_PB::AOL;
const Region_PB_RegionCode_E Region_PB::B;
const Region_PB_RegionCode_E Region_PB::BC;
const Region_PB_RegionCode_E Region_PB::BE;
const Region_PB_RegionCode_E Region_PB::BR;
const Region_PB_RegionCode_E Region_PB::BW;
const Region_PB_RegionCode_E Region_PB::BY;
const Region_PB_RegionCode_E Region_PB::C;
const Region_PB_RegionCode_E Region_PB::D;
const Region_PB_RegionCode_E Region_PB::DC;
const Region_PB_RegionCode_E Region_PB::E;
const Region_PB_RegionCode_E Region_PB::ENG;
const Region_PB_RegionCode_E Region_PB::F;
const Region_PB_RegionCode_E Region_PB::G;
const Region_PB_RegionCode_E Region_PB::H;
const Region_PB_RegionCode_E Region_PB::HB;
const Region_PB_RegionCode_E Region_PB::HE;
const Region_PB_RegionCode_E Region_PB::HH;
const Region_PB_RegionCode_E Region_PB::I;
const Region_PB_RegionCode_E Region_PB::J;
const Region_PB_RegionCode_E Region_PB::K;
const Region_PB_RegionCode_E Region_PB::L;
const Region_PB_RegionCode_E Region_PB::M;
const Region_PB_RegionCode_E Region_PB::MB;
const Region_PB_RegionCode_E Region_PB::MV;
const Region_PB_RegionCode_E Region_PB::N;
const Region_PB_RegionCode_E Region_PB::NB;
const Region_PB_RegionCode_E Region_PB::NF;
const Region_PB_RegionCode_E Region_PB::NI;
const Region_PB_RegionCode_E Region_PB::NIR;
const Region_PB_RegionCode_E Region_PB::NS;
const Region_PB_RegionCode_E Region_PB::NT;
const Region_PB_RegionCode_E Region_PB::NU;
const Region_PB_RegionCode_E Region_PB::NW;
const Region_PB_RegionCode_E Region_PB::O;
const Region_PB_RegionCode_E Region_PB::ON;
const Region_PB_RegionCode_E Region_PB::P;
const Region_PB_RegionCode_E Region_PB::PE;
const Region_PB_RegionCode_E Region_PB::Q;
const Region_PB_RegionCode_E Region_PB::QC;
const Region_PB_RegionCode_E Region_PB::QL;
const Region_PB_RegionCode_E Region_PB::R;
const Region_PB_RegionCode_E Region_PB::RP;
const Region_PB_RegionCode_E Region_PB::S;
const Region_PB_RegionCode_E Region_PB::SA;
const Region_PB_RegionCode_E Region_PB::SH;
const Region_PB_RegionCode_E Region_PB::SK;
const Region_PB_RegionCode_E Region_PB::SL;
const Region_PB_RegionCode_E Region_PB::SN;
const Region_PB_RegionCode_E Region_PB::ST;
const Region_PB_RegionCode_E Region_PB::T;
const Region_PB_RegionCode_E Region_PB::TH;
const Region_PB_RegionCode_E Region_PB::TS;
const Region_PB_RegionCode_E Region_PB::U;
const Region_PB_RegionCode_E Region_PB::V;
const Region_PB_RegionCode_E Region_PB::VI;
const Region_PB_RegionCode_E Region_PB::WLS;
const Region_PB_RegionCode_E Region_PB::YT;
const Region_PB_RegionCode_E Region_PB::RegionCode_E_MIN;
const Region_PB_RegionCode_E Region_PB::RegionCode_E_MAX;
const int Region_PB::RegionCode_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Region_PB::kRegionCodeFieldNumber;
const int Region_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

Region_PB::Region_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Region_PB::InitAsDefaultInstance() {
}

Region_PB::Region_PB(const Region_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Region_PB::SharedCtor() {
  _cached_size_ = 0;
  region_code_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Region_PB::~Region_PB() {
  SharedDtor();
}

void Region_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void Region_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Region_PB_descriptor_;
}

const Region_PB& Region_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geo_2eproto();  return *default_instance_;
}

Region_PB* Region_PB::default_instance_ = NULL;

Region_PB* Region_PB::New() const {
  return new Region_PB;
}

void Region_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_code_ = 0;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Region_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.geo.Region_PB.RegionCode_E region_code = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::geo::Region_PB_RegionCode_E_IsValid(value)) {
            set_region_code(static_cast< ::rubicon::data::geo::Region_PB_RegionCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Region_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.geo.Region_PB.RegionCode_E region_code = 1 [default = UNKNOWN];
  if (has_region_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region_code(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Region_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.geo.Region_PB.RegionCode_E region_code = 1 [default = UNKNOWN];
  if (has_region_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region_code(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Region_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.geo.Region_PB.RegionCode_E region_code = 1 [default = UNKNOWN];
    if (has_region_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region_code());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Region_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Region_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Region_PB::MergeFrom(const Region_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_code()) {
      set_region_code(from.region_code());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Region_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region_PB::CopyFrom(const Region_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region_PB::IsInitialized() const {
  
  return true;
}

void Region_PB::Swap(Region_PB* other) {
  if (other != this) {
    std::swap(region_code_, other->region_code_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Region_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Region_PB_descriptor_;
  metadata.reflection = Region_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Speed_PB_SpeedType_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Speed_PB_SpeedType_E_descriptor_;
}
bool Speed_PB_SpeedType_E_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Speed_PB_SpeedType_E Speed_PB::UNKNOWN;
const Speed_PB_SpeedType_E Speed_PB::DIALUP;
const Speed_PB_SpeedType_E Speed_PB::BROADBAND;
const Speed_PB_SpeedType_E Speed_PB::CABLE;
const Speed_PB_SpeedType_E Speed_PB::XSDL;
const Speed_PB_SpeedType_E Speed_PB::T1;
const Speed_PB_SpeedType_E Speed_PB::T3;
const Speed_PB_SpeedType_E Speed_PB::OC3;
const Speed_PB_SpeedType_E Speed_PB::OC12;
const Speed_PB_SpeedType_E Speed_PB::SATELLITE;
const Speed_PB_SpeedType_E Speed_PB::WIRELESS;
const Speed_PB_SpeedType_E Speed_PB::MOBILE;
const Speed_PB_SpeedType_E Speed_PB::SpeedType_E_MIN;
const Speed_PB_SpeedType_E Speed_PB::SpeedType_E_MAX;
const int Speed_PB::SpeedType_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Speed_PB::kTypeFieldNumber;
const int Speed_PB::kRawValueFieldNumber;
#endif  // !_MSC_VER

Speed_PB::Speed_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Speed_PB::InitAsDefaultInstance() {
}

Speed_PB::Speed_PB(const Speed_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Speed_PB::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Speed_PB::~Speed_PB() {
  SharedDtor();
}

void Speed_PB::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void Speed_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Speed_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Speed_PB_descriptor_;
}

const Speed_PB& Speed_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geo_2eproto();  return *default_instance_;
}

Speed_PB* Speed_PB::default_instance_ = NULL;

Speed_PB* Speed_PB::New() const {
  return new Speed_PB;
}

void Speed_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Speed_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.geo.Speed_PB.SpeedType_E type = 1 [default = UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data::geo::Speed_PB_SpeedType_E_IsValid(value)) {
            set_type(static_cast< ::rubicon::data::geo::Speed_PB_SpeedType_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_value;
        break;
      }
      
      // optional string raw_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Speed_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.geo.Speed_PB.SpeedType_E type = 1 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Speed_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.geo.Speed_PB.SpeedType_E type = 1 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string raw_value = 2;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Speed_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.geo.Speed_PB.SpeedType_E type = 1 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string raw_value = 2;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Speed_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Speed_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Speed_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Speed_PB::MergeFrom(const Speed_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Speed_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed_PB::CopyFrom(const Speed_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed_PB::IsInitialized() const {
  
  return true;
}

void Speed_PB::Swap(Speed_PB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Speed_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Speed_PB_descriptor_;
  metadata.reflection = Speed_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Geo_PB::kIspNameFieldNumber;
const int Geo_PB::kConnectionSpeedFieldNumber;
const int Geo_PB::kContinentFieldNumber;
const int Geo_PB::kCountryFieldNumber;
const int Geo_PB::kDeprecatedRegionFieldNumber;
const int Geo_PB::kMetroFieldNumber;
const int Geo_PB::kCityFieldNumber;
const int Geo_PB::kZipCodeFieldNumber;
const int Geo_PB::kAreaCodeFieldNumber;
const int Geo_PB::kGmtOffsetFieldNumber;
const int Geo_PB::kDomainNameFieldNumber;
const int Geo_PB::kRegionFieldNumber;
#endif  // !_MSC_VER

Geo_PB::Geo_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Geo_PB::InitAsDefaultInstance() {
  connection_speed_ = const_cast< ::rubicon::data::geo::Speed_PB*>(&::rubicon::data::geo::Speed_PB::default_instance());
  continent_ = const_cast< ::rubicon::data::geo::Continent_PB*>(&::rubicon::data::geo::Continent_PB::default_instance());
  country_ = const_cast< ::rubicon::data::geo::Country_PB*>(&::rubicon::data::geo::Country_PB::default_instance());
  deprecated_region_ = const_cast< ::rubicon::data::geo::Region_PB*>(&::rubicon::data::geo::Region_PB::default_instance());
  area_code_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  gmt_offset_ = const_cast< ::rubicon::data::common::AnInt32_PB*>(&::rubicon::data::common::AnInt32_PB::default_instance());
}

Geo_PB::Geo_PB(const Geo_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Geo_PB::SharedCtor() {
  _cached_size_ = 0;
  isp_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connection_speed_ = NULL;
  continent_ = NULL;
  country_ = NULL;
  deprecated_region_ = NULL;
  metro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_code_ = NULL;
  gmt_offset_ = NULL;
  domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geo_PB::~Geo_PB() {
  SharedDtor();
}

void Geo_PB::SharedDtor() {
  if (isp_name_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_name_;
  }
  if (metro_ != &::google::protobuf::internal::kEmptyString) {
    delete metro_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    delete zip_code_;
  }
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_name_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (this != default_instance_) {
    delete connection_speed_;
    delete continent_;
    delete country_;
    delete deprecated_region_;
    delete area_code_;
    delete gmt_offset_;
  }
}

void Geo_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geo_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geo_PB_descriptor_;
}

const Geo_PB& Geo_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_geo_2eproto();  return *default_instance_;
}

Geo_PB* Geo_PB::default_instance_ = NULL;

Geo_PB* Geo_PB::New() const {
  return new Geo_PB;
}

void Geo_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_isp_name()) {
      if (isp_name_ != &::google::protobuf::internal::kEmptyString) {
        isp_name_->clear();
      }
    }
    if (has_connection_speed()) {
      if (connection_speed_ != NULL) connection_speed_->::rubicon::data::geo::Speed_PB::Clear();
    }
    if (has_continent()) {
      if (continent_ != NULL) continent_->::rubicon::data::geo::Continent_PB::Clear();
    }
    if (has_country()) {
      if (country_ != NULL) country_->::rubicon::data::geo::Country_PB::Clear();
    }
    if (has_deprecated_region()) {
      if (deprecated_region_ != NULL) deprecated_region_->::rubicon::data::geo::Region_PB::Clear();
    }
    if (has_metro()) {
      if (metro_ != &::google::protobuf::internal::kEmptyString) {
        metro_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    if (has_zip_code()) {
      if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
        zip_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_area_code()) {
      if (area_code_ != NULL) area_code_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_gmt_offset()) {
      if (gmt_offset_ != NULL) gmt_offset_->::rubicon::data::common::AnInt32_PB::Clear();
    }
    if (has_domain_name()) {
      if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
        domain_name_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Geo_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string isp_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isp_name().data(), this->isp_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_speed;
        break;
      }
      
      // optional .rubicon.data.geo.Speed_PB connection_speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_continent;
        break;
      }
      
      // optional .rubicon.data.geo.Continent_PB continent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_continent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }
      
      // optional .rubicon.data.geo.Country_PB country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deprecated_region;
        break;
      }
      
      // optional .rubicon.data.geo.Region_PB deprecated_region = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_metro;
        break;
      }
      
      // optional string metro = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metro().data(), this->metro().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }
      
      // optional string city = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_zip_code;
        break;
      }
      
      // optional string zip_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zip_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zip_code().data(), this->zip_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_area_code;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB area_code = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_area_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gmt_offset;
        break;
      }
      
      // optional .rubicon.data.common.AnInt32_PB gmt_offset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmt_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmt_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_domain_name;
        break;
      }
      
      // optional string domain_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_region;
        break;
      }
      
      // optional string region = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Geo_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string isp_name = 1;
  if (has_isp_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp_name().data(), this->isp_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->isp_name(), output);
  }
  
  // optional .rubicon.data.geo.Speed_PB connection_speed = 2;
  if (has_connection_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection_speed(), output);
  }
  
  // optional .rubicon.data.geo.Continent_PB continent = 3;
  if (has_continent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->continent(), output);
  }
  
  // optional .rubicon.data.geo.Country_PB country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->country(), output);
  }
  
  // optional .rubicon.data.geo.Region_PB deprecated_region = 5;
  if (has_deprecated_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deprecated_region(), output);
  }
  
  // optional string metro = 6;
  if (has_metro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metro().data(), this->metro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->metro(), output);
  }
  
  // optional string city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->city(), output);
  }
  
  // optional string zip_code = 8;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->zip_code(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB area_code = 9;
  if (has_area_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->area_code(), output);
  }
  
  // optional .rubicon.data.common.AnInt32_PB gmt_offset = 10;
  if (has_gmt_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gmt_offset(), output);
  }
  
  // optional string domain_name = 11;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->domain_name(), output);
  }
  
  // optional string region = 12;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->region(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Geo_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string isp_name = 1;
  if (has_isp_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isp_name().data(), this->isp_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->isp_name(), target);
  }
  
  // optional .rubicon.data.geo.Speed_PB connection_speed = 2;
  if (has_connection_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connection_speed(), target);
  }
  
  // optional .rubicon.data.geo.Continent_PB continent = 3;
  if (has_continent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->continent(), target);
  }
  
  // optional .rubicon.data.geo.Country_PB country = 4;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->country(), target);
  }
  
  // optional .rubicon.data.geo.Region_PB deprecated_region = 5;
  if (has_deprecated_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deprecated_region(), target);
  }
  
  // optional string metro = 6;
  if (has_metro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metro().data(), this->metro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metro(), target);
  }
  
  // optional string city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->city(), target);
  }
  
  // optional string zip_code = 8;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zip_code(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB area_code = 9;
  if (has_area_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->area_code(), target);
  }
  
  // optional .rubicon.data.common.AnInt32_PB gmt_offset = 10;
  if (has_gmt_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gmt_offset(), target);
  }
  
  // optional string domain_name = 11;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->domain_name(), target);
  }
  
  // optional string region = 12;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->region(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Geo_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string isp_name = 1;
    if (has_isp_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp_name());
    }
    
    // optional .rubicon.data.geo.Speed_PB connection_speed = 2;
    if (has_connection_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_speed());
    }
    
    // optional .rubicon.data.geo.Continent_PB continent = 3;
    if (has_continent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->continent());
    }
    
    // optional .rubicon.data.geo.Country_PB country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->country());
    }
    
    // optional .rubicon.data.geo.Region_PB deprecated_region = 5;
    if (has_deprecated_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_region());
    }
    
    // optional string metro = 6;
    if (has_metro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metro());
    }
    
    // optional string city = 7;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional string zip_code = 8;
    if (has_zip_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip_code());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rubicon.data.common.AnUInt32_PB area_code = 9;
    if (has_area_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->area_code());
    }
    
    // optional .rubicon.data.common.AnInt32_PB gmt_offset = 10;
    if (has_gmt_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gmt_offset());
    }
    
    // optional string domain_name = 11;
    if (has_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain_name());
    }
    
    // optional string region = 12;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geo_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Geo_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Geo_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Geo_PB::MergeFrom(const Geo_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isp_name()) {
      set_isp_name(from.isp_name());
    }
    if (from.has_connection_speed()) {
      mutable_connection_speed()->::rubicon::data::geo::Speed_PB::MergeFrom(from.connection_speed());
    }
    if (from.has_continent()) {
      mutable_continent()->::rubicon::data::geo::Continent_PB::MergeFrom(from.continent());
    }
    if (from.has_country()) {
      mutable_country()->::rubicon::data::geo::Country_PB::MergeFrom(from.country());
    }
    if (from.has_deprecated_region()) {
      mutable_deprecated_region()->::rubicon::data::geo::Region_PB::MergeFrom(from.deprecated_region());
    }
    if (from.has_metro()) {
      set_metro(from.metro());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_zip_code()) {
      set_zip_code(from.zip_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_area_code()) {
      mutable_area_code()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.area_code());
    }
    if (from.has_gmt_offset()) {
      mutable_gmt_offset()->::rubicon::data::common::AnInt32_PB::MergeFrom(from.gmt_offset());
    }
    if (from.has_domain_name()) {
      set_domain_name(from.domain_name());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Geo_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo_PB::CopyFrom(const Geo_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo_PB::IsInitialized() const {
  
  return true;
}

void Geo_PB::Swap(Geo_PB* other) {
  if (other != this) {
    std::swap(isp_name_, other->isp_name_);
    std::swap(connection_speed_, other->connection_speed_);
    std::swap(continent_, other->continent_);
    std::swap(country_, other->country_);
    std::swap(deprecated_region_, other->deprecated_region_);
    std::swap(metro_, other->metro_);
    std::swap(city_, other->city_);
    std::swap(zip_code_, other->zip_code_);
    std::swap(area_code_, other->area_code_);
    std::swap(gmt_offset_, other->gmt_offset_);
    std::swap(domain_name_, other->domain_name_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Geo_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geo_PB_descriptor_;
  metadata.reflection = Geo_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace geo
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
