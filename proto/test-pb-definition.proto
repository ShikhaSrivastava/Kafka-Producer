// Proto file for different aggregated reports

option optimize_for = SPEED;

package rubicon.data_pipeline.aggregation_framework;

message Audience_PB {
    required uint32 date        = 1;
    required uint32 account_id  = 2;
    required uint32 site_id     = 3;
    required uint32 size_id     = 4;
    required uint32 country_id  = 5;
    required uint32 behavior_id = 6;
    required uint32 gender_id   = 7;
    required uint32 ethnicity_i = 8;
    required uint32 income_id   = 9;
    required uint32 age_id      = 10;
    required uint32 duplicate   = 11;
}

message BrowserOS_PB {
    required uint32 date        = 1;
    required uint32 account_id  = 2;
    required uint32 site_id     = 3;
    required uint32 size_id     = 4;
    required uint32 ad_id       = 5;
    required uint32 creative_id = 6;
    required uint32 campaign_id = 7;
    required uint32 browser     = 8;
    required uint32 osystem     = 9;
}


message AggregatorReports_PB {
    enum AggregatorReportsCode_E {
	UNSET      = 0; 
	AUDIENCE   = 1;
	BROWSER_OS = 2;
    }

    required uint32 account_id                   =  100;
    required AggregatorReportsCode_E report_type =  1 [default = UNSET];
    optional Audience_PB audience                =  2;
    optional BrowserOS_PB browser_os             =  3;
}

message ReportsValue_PB {
    optional uint32 rubicon_imps    = 1  [default = 0];
    optional uint32 defaults_in     = 2  [default = 0];
    optional uint32 defaults_out    = 3  [default = 0];
    optional uint32 rubicon_clicks  = 4  [default = 0];
    optional uint32 rubicon_actions = 5  [default = 0];
    optional double network_revenue = 6  [default = 0.0];
    optional uint32 network_clicks  = 7  [default = 0];
    optional uint32 network_imps    = 8  [default = 0];
    optional double tech_fee        = 9  [default = 0.0];
    optional uint64 score           = 10 [default = 0];
    optional int64  weight          = 11 [default = 0];
    optional int32  value           = 12 [default = 0];
    optional float  weighted_score  = 13 [default = 0.0];
    optional uint32 finalized_date  = 14;
}

message SimpleMessage_PB {
    required uint64 emit_time       = 1;
    required double tech_fee        = 2;
    optional double network_revenue = 3;
}