// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ae_inventory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data {
namespace ad_engine {

namespace {

const ::google::protobuf::Descriptor* Inventory_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_PB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ae_5finventory_2eproto() {
  protobuf_AddDesc_ae_5finventory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ae_inventory.proto");
  GOOGLE_CHECK(file != NULL);
  Inventory_PB_descriptor_ = file->message_type(0);
  static const int Inventory_PB_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, size_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, zonesize_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, zone_size_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, org_zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, org_size_id_),
  };
  Inventory_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inventory_PB_descriptor_,
      Inventory_PB::default_instance_,
      Inventory_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inventory_PB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ae_5finventory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inventory_PB_descriptor_, &Inventory_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ae_5finventory_2eproto() {
  delete Inventory_PB::default_instance_;
  delete Inventory_PB_reflection_;
}

void protobuf_AddDesc_ae_5finventory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rubicon::data::common::protobuf_AddDesc_num_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ae_inventory.proto\022\026rubicon.data.ad_en"
    "gine\032\017num_types.proto\"\231\003\n\014Inventory_PB\0224"
    "\n\naccount_id\030\001 \001(\0132 .rubicon.data.common"
    ".AnUInt32_PB\0221\n\007site_id\030\002 \001(\0132 .rubicon."
    "data.common.AnUInt32_PB\0221\n\007zone_id\030\003 \001(\013"
    "2 .rubicon.data.common.AnUInt32_PB\0221\n\007si"
    "ze_id\030\004 \001(\0132 .rubicon.data.common.AnUInt"
    "32_PB\0225\n\013zonesize_id\030\005 \001(\0132 .rubicon.dat"
    "a.common.AnUInt32_PB\022\025\n\rzone_size_str\030\006 "
    "\001(\t\0225\n\013org_zone_id\030\007 \001(\0132 .rubicon.data."
    "common.AnUInt32_PB\0225\n\013org_size_id\030\010 \001(\0132"
    " .rubicon.data.common.AnUInt32_PBB\002H\001", 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ae_inventory.proto", &protobuf_RegisterTypes);
  Inventory_PB::default_instance_ = new Inventory_PB();
  Inventory_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ae_5finventory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ae_5finventory_2eproto {
  StaticDescriptorInitializer_ae_5finventory_2eproto() {
    protobuf_AddDesc_ae_5finventory_2eproto();
  }
} static_descriptor_initializer_ae_5finventory_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Inventory_PB::kAccountIdFieldNumber;
const int Inventory_PB::kSiteIdFieldNumber;
const int Inventory_PB::kZoneIdFieldNumber;
const int Inventory_PB::kSizeIdFieldNumber;
const int Inventory_PB::kZonesizeIdFieldNumber;
const int Inventory_PB::kZoneSizeStrFieldNumber;
const int Inventory_PB::kOrgZoneIdFieldNumber;
const int Inventory_PB::kOrgSizeIdFieldNumber;
#endif  // !_MSC_VER

Inventory_PB::Inventory_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Inventory_PB::InitAsDefaultInstance() {
  account_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  site_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  zone_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  size_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  zonesize_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  org_zone_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
  org_size_id_ = const_cast< ::rubicon::data::common::AnUInt32_PB*>(&::rubicon::data::common::AnUInt32_PB::default_instance());
}

Inventory_PB::Inventory_PB(const Inventory_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Inventory_PB::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = NULL;
  site_id_ = NULL;
  zone_id_ = NULL;
  size_id_ = NULL;
  zonesize_id_ = NULL;
  zone_size_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  org_zone_id_ = NULL;
  org_size_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inventory_PB::~Inventory_PB() {
  SharedDtor();
}

void Inventory_PB::SharedDtor() {
  if (zone_size_str_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_size_str_;
  }
  if (this != default_instance_) {
    delete account_id_;
    delete site_id_;
    delete zone_id_;
    delete size_id_;
    delete zonesize_id_;
    delete org_zone_id_;
    delete org_size_id_;
  }
}

void Inventory_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_PB_descriptor_;
}

const Inventory_PB& Inventory_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ae_5finventory_2eproto();  return *default_instance_;
}

Inventory_PB* Inventory_PB::default_instance_ = NULL;

Inventory_PB* Inventory_PB::New() const {
  return new Inventory_PB;
}

void Inventory_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_site_id()) {
      if (site_id_ != NULL) site_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_zone_id()) {
      if (zone_id_ != NULL) zone_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_size_id()) {
      if (size_id_ != NULL) size_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_zonesize_id()) {
      if (zonesize_id_ != NULL) zonesize_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_zone_size_str()) {
      if (zone_size_str_ != &::google::protobuf::internal::kEmptyString) {
        zone_size_str_->clear();
      }
    }
    if (has_org_zone_id()) {
      if (org_zone_id_ != NULL) org_zone_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
    if (has_org_size_id()) {
      if (org_size_id_ != NULL) org_size_id_->::rubicon::data::common::AnUInt32_PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inventory_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rubicon.data.common.AnUInt32_PB account_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_site_id;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB site_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_site_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zone_id;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zone_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_size_id;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB size_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_zonesize_id;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB zonesize_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zonesize_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zonesize_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zone_size_str;
        break;
      }
      
      // optional string zone_size_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone_size_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone_size_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone_size_str().data(), this->zone_size_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_org_zone_id;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB org_zone_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_org_zone_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_org_zone_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_org_size_id;
        break;
      }
      
      // optional .rubicon.data.common.AnUInt32_PB org_size_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_org_size_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_org_size_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Inventory_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rubicon.data.common.AnUInt32_PB account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_id(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB site_id = 2;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->site_id(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zone_id(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB size_id = 4;
  if (has_size_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->size_id(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB zonesize_id = 5;
  if (has_zonesize_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->zonesize_id(), output);
  }
  
  // optional string zone_size_str = 6;
  if (has_zone_size_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_size_str().data(), this->zone_size_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->zone_size_str(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB org_zone_id = 7;
  if (has_org_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->org_zone_id(), output);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB org_size_id = 8;
  if (has_org_size_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->org_size_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Inventory_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rubicon.data.common.AnUInt32_PB account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_id(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB site_id = 2;
  if (has_site_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->site_id(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zone_id(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB size_id = 4;
  if (has_size_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->size_id(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB zonesize_id = 5;
  if (has_zonesize_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->zonesize_id(), target);
  }
  
  // optional string zone_size_str = 6;
  if (has_zone_size_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone_size_str().data(), this->zone_size_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->zone_size_str(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB org_zone_id = 7;
  if (has_org_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->org_zone_id(), target);
  }
  
  // optional .rubicon.data.common.AnUInt32_PB org_size_id = 8;
  if (has_org_size_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->org_size_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Inventory_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rubicon.data.common.AnUInt32_PB account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB site_id = 2;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site_id());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zone_id());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB size_id = 4;
    if (has_size_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size_id());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB zonesize_id = 5;
    if (has_zonesize_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zonesize_id());
    }
    
    // optional string zone_size_str = 6;
    if (has_zone_size_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone_size_str());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB org_zone_id = 7;
    if (has_org_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->org_zone_id());
    }
    
    // optional .rubicon.data.common.AnUInt32_PB org_size_id = 8;
    if (has_org_size_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->org_size_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inventory_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inventory_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inventory_PB::MergeFrom(const Inventory_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      mutable_account_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.account_id());
    }
    if (from.has_site_id()) {
      mutable_site_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.site_id());
    }
    if (from.has_zone_id()) {
      mutable_zone_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.zone_id());
    }
    if (from.has_size_id()) {
      mutable_size_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.size_id());
    }
    if (from.has_zonesize_id()) {
      mutable_zonesize_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.zonesize_id());
    }
    if (from.has_zone_size_str()) {
      set_zone_size_str(from.zone_size_str());
    }
    if (from.has_org_zone_id()) {
      mutable_org_zone_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.org_zone_id());
    }
    if (from.has_org_size_id()) {
      mutable_org_size_id()->::rubicon::data::common::AnUInt32_PB::MergeFrom(from.org_size_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inventory_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory_PB::CopyFrom(const Inventory_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory_PB::IsInitialized() const {
  
  return true;
}

void Inventory_PB::Swap(Inventory_PB* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(site_id_, other->site_id_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(size_id_, other->size_id_);
    std::swap(zonesize_id_, other->zonesize_id_);
    std::swap(zone_size_str_, other->zone_size_str_);
    std::swap(org_zone_id_, other->org_zone_id_);
    std::swap(org_size_id_, other->org_size_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inventory_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_PB_descriptor_;
  metadata.reflection = Inventory_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ad_engine
}  // namespace data
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
