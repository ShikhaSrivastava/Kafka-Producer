// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EventJournaller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fim {
namespace event {
namespace journaller {

namespace {

const ::google::protobuf::Descriptor* RecordedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordedEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnparsedRecordedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnparsedRecordedEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconciledEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconciledEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReconciledEvent_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EventJournaller_2eproto() {
  protobuf_AddDesc_EventJournaller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EventJournaller.proto");
  GOOGLE_CHECK(file != NULL);
  RecordedEvent_descriptor_ = file->message_type(0);
  static const int RecordedEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordedEvent, arrival_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordedEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordedEvent, channel_),
  };
  RecordedEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordedEvent_descriptor_,
      RecordedEvent::default_instance_,
      RecordedEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordedEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordedEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordedEvent));
  UnparsedRecordedEvent_descriptor_ = file->message_type(1);
  static const int UnparsedRecordedEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnparsedRecordedEvent, arrival_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnparsedRecordedEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnparsedRecordedEvent, channel_),
  };
  UnparsedRecordedEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnparsedRecordedEvent_descriptor_,
      UnparsedRecordedEvent::default_instance_,
      UnparsedRecordedEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnparsedRecordedEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnparsedRecordedEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnparsedRecordedEvent));
  ReconciledEvent_descriptor_ = file->message_type(2);
  static const int ReconciledEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, original_journaler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, journalers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, run_count_),
  };
  ReconciledEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconciledEvent_descriptor_,
      ReconciledEvent::default_instance_,
      ReconciledEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciledEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconciledEvent));
  ReconciledEvent_Type_descriptor_ = ReconciledEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EventJournaller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordedEvent_descriptor_, &RecordedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnparsedRecordedEvent_descriptor_, &UnparsedRecordedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconciledEvent_descriptor_, &ReconciledEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EventJournaller_2eproto() {
  delete RecordedEvent::default_instance_;
  delete RecordedEvent_reflection_;
  delete UnparsedRecordedEvent::default_instance_;
  delete UnparsedRecordedEvent_reflection_;
  delete ReconciledEvent::default_instance_;
  delete ReconciledEvent_reflection_;
}

void protobuf_AddDesc_EventJournaller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fim::eventbus::protobuf_AddDesc_event_5fbus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EventJournaller.proto\022\024fim.event.journ"
    "aller\032\017event_bus.proto\"|\n\rRecordedEvent\022"
    "\024\n\014arrival_time\030\002 \001(\004\022,\n\005event\030\003 \001(\0132\035.f"
    "im.eventbus.EventBusMessage\022\'\n\007channel\030\005"
    " \001(\0132\026.fim.eventbus.EndPoint\"e\n\025Unparsed"
    "RecordedEvent\022\024\n\014arrival_time\030\002 \001(\004\022\r\n\005e"
    "vent\030\003 \001(\014\022\'\n\007channel\030\005 \001(\0132\026.fim.eventb"
    "us.EndPoint\"\365\003\n\017ReconciledEvent\022\?\n\004type\030"
    "\002 \002(\0162*.fim.event.journaller.ReconciledE"
    "vent.Type:\005UNSET\0222\n\005event\030\003 \001(\0132#.fim.ev"
    "ent.journaller.RecordedEvent\022\032\n\022original"
    "_journaler\030\004 \001(\t\022\022\n\njournalers\030\005 \003(\t\022\021\n\t"
    "run_count\030\006 \001(\r\"\251\002\n\004Type\022\034\n\030CORRUPT_RECO"
    "RDED_JOURNAL\020\000\022\035\n\031CORRUPT_EVENT_BUS_MESS"
    "AGE\020\001\022\035\n\031INVALID_EVENT_BUS_MESSAGE\020\002\022\035\n\031"
    "UNKNOWN_EVENT_BUS_MESSAGE\020\003\022 \n\034UNPARSABL"
    "E_EVENT_BUS_MESSAGE\020\004\022\023\n\017BACKLOG_MESSAGE"
    "\020\005\022\030\n\024INCONSISTENT_MESSAGE\020\006\022\021\n\rVALID_ME"
    "SSAGE\020\007\022\032\n\026MERGED_MESSAGES_SENDER\020\010\022\033\n\027M"
    "ERGED_MESSAGES_CHANNEL\020\t\022\t\n\005UNSET\020\024B\037B\033E"
    "ventJournallerMessageProtoH\001", 828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EventJournaller.proto", &protobuf_RegisterTypes);
  RecordedEvent::default_instance_ = new RecordedEvent();
  UnparsedRecordedEvent::default_instance_ = new UnparsedRecordedEvent();
  ReconciledEvent::default_instance_ = new ReconciledEvent();
  RecordedEvent::default_instance_->InitAsDefaultInstance();
  UnparsedRecordedEvent::default_instance_->InitAsDefaultInstance();
  ReconciledEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EventJournaller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EventJournaller_2eproto {
  StaticDescriptorInitializer_EventJournaller_2eproto() {
    protobuf_AddDesc_EventJournaller_2eproto();
  }
} static_descriptor_initializer_EventJournaller_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RecordedEvent::kArrivalTimeFieldNumber;
const int RecordedEvent::kEventFieldNumber;
const int RecordedEvent::kChannelFieldNumber;
#endif  // !_MSC_VER

RecordedEvent::RecordedEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordedEvent::InitAsDefaultInstance() {
  event_ = const_cast< ::fim::eventbus::EventBusMessage*>(&::fim::eventbus::EventBusMessage::default_instance());
  channel_ = const_cast< ::fim::eventbus::EndPoint*>(&::fim::eventbus::EndPoint::default_instance());
}

RecordedEvent::RecordedEvent(const RecordedEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordedEvent::SharedCtor() {
  _cached_size_ = 0;
  arrival_time_ = GOOGLE_ULONGLONG(0);
  event_ = NULL;
  channel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordedEvent::~RecordedEvent() {
  SharedDtor();
}

void RecordedEvent::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
    delete channel_;
  }
}

void RecordedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordedEvent_descriptor_;
}

const RecordedEvent& RecordedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventJournaller_2eproto();  return *default_instance_;
}

RecordedEvent* RecordedEvent::default_instance_ = NULL;

RecordedEvent* RecordedEvent::New() const {
  return new RecordedEvent;
}

void RecordedEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    arrival_time_ = GOOGLE_ULONGLONG(0);
    if (has_event()) {
      if (event_ != NULL) event_->::fim::eventbus::EventBusMessage::Clear();
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::fim::eventbus::EndPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 arrival_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arrival_time_)));
          set_has_arrival_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }
      
      // optional .fim.eventbus.EventBusMessage event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }
      
      // optional .fim.eventbus.EndPoint channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 arrival_time = 2;
  if (has_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->arrival_time(), output);
  }
  
  // optional .fim.eventbus.EventBusMessage event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event(), output);
  }
  
  // optional .fim.eventbus.EndPoint channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->channel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordedEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 arrival_time = 2;
  if (has_arrival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->arrival_time(), target);
  }
  
  // optional .fim.eventbus.EventBusMessage event = 3;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event(), target);
  }
  
  // optional .fim.eventbus.EndPoint channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->channel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordedEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 arrival_time = 2;
    if (has_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arrival_time());
    }
    
    // optional .fim.eventbus.EventBusMessage event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }
    
    // optional .fim.eventbus.EndPoint channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordedEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordedEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordedEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordedEvent::MergeFrom(const RecordedEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arrival_time()) {
      set_arrival_time(from.arrival_time());
    }
    if (from.has_event()) {
      mutable_event()->::fim::eventbus::EventBusMessage::MergeFrom(from.event());
    }
    if (from.has_channel()) {
      mutable_channel()->::fim::eventbus::EndPoint::MergeFrom(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordedEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordedEvent::CopyFrom(const RecordedEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordedEvent::IsInitialized() const {
  
  if (has_event()) {
    if (!this->event().IsInitialized()) return false;
  }
  return true;
}

void RecordedEvent::Swap(RecordedEvent* other) {
  if (other != this) {
    std::swap(arrival_time_, other->arrival_time_);
    std::swap(event_, other->event_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordedEvent_descriptor_;
  metadata.reflection = RecordedEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnparsedRecordedEvent::kArrivalTimeFieldNumber;
const int UnparsedRecordedEvent::kEventFieldNumber;
const int UnparsedRecordedEvent::kChannelFieldNumber;
#endif  // !_MSC_VER

UnparsedRecordedEvent::UnparsedRecordedEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnparsedRecordedEvent::InitAsDefaultInstance() {
  channel_ = const_cast< ::fim::eventbus::EndPoint*>(&::fim::eventbus::EndPoint::default_instance());
}

UnparsedRecordedEvent::UnparsedRecordedEvent(const UnparsedRecordedEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnparsedRecordedEvent::SharedCtor() {
  _cached_size_ = 0;
  arrival_time_ = GOOGLE_ULONGLONG(0);
  event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnparsedRecordedEvent::~UnparsedRecordedEvent() {
  SharedDtor();
}

void UnparsedRecordedEvent::SharedDtor() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (this != default_instance_) {
    delete channel_;
  }
}

void UnparsedRecordedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnparsedRecordedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnparsedRecordedEvent_descriptor_;
}

const UnparsedRecordedEvent& UnparsedRecordedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventJournaller_2eproto();  return *default_instance_;
}

UnparsedRecordedEvent* UnparsedRecordedEvent::default_instance_ = NULL;

UnparsedRecordedEvent* UnparsedRecordedEvent::New() const {
  return new UnparsedRecordedEvent;
}

void UnparsedRecordedEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    arrival_time_ = GOOGLE_ULONGLONG(0);
    if (has_event()) {
      if (event_ != &::google::protobuf::internal::kEmptyString) {
        event_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::fim::eventbus::EndPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnparsedRecordedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 arrival_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arrival_time_)));
          set_has_arrival_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }
      
      // optional bytes event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }
      
      // optional .fim.eventbus.EndPoint channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnparsedRecordedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 arrival_time = 2;
  if (has_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->arrival_time(), output);
  }
  
  // optional bytes event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->event(), output);
  }
  
  // optional .fim.eventbus.EndPoint channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->channel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnparsedRecordedEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 arrival_time = 2;
  if (has_arrival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->arrival_time(), target);
  }
  
  // optional bytes event = 3;
  if (has_event()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->event(), target);
  }
  
  // optional .fim.eventbus.EndPoint channel = 5;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->channel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnparsedRecordedEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 arrival_time = 2;
    if (has_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arrival_time());
    }
    
    // optional bytes event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event());
    }
    
    // optional .fim.eventbus.EndPoint channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnparsedRecordedEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnparsedRecordedEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnparsedRecordedEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnparsedRecordedEvent::MergeFrom(const UnparsedRecordedEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arrival_time()) {
      set_arrival_time(from.arrival_time());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_channel()) {
      mutable_channel()->::fim::eventbus::EndPoint::MergeFrom(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnparsedRecordedEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnparsedRecordedEvent::CopyFrom(const UnparsedRecordedEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnparsedRecordedEvent::IsInitialized() const {
  
  return true;
}

void UnparsedRecordedEvent::Swap(UnparsedRecordedEvent* other) {
  if (other != this) {
    std::swap(arrival_time_, other->arrival_time_);
    std::swap(event_, other->event_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnparsedRecordedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnparsedRecordedEvent_descriptor_;
  metadata.reflection = UnparsedRecordedEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReconciledEvent_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconciledEvent_Type_descriptor_;
}
bool ReconciledEvent_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReconciledEvent_Type ReconciledEvent::CORRUPT_RECORDED_JOURNAL;
const ReconciledEvent_Type ReconciledEvent::CORRUPT_EVENT_BUS_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::INVALID_EVENT_BUS_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::UNKNOWN_EVENT_BUS_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::UNPARSABLE_EVENT_BUS_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::BACKLOG_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::INCONSISTENT_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::VALID_MESSAGE;
const ReconciledEvent_Type ReconciledEvent::MERGED_MESSAGES_SENDER;
const ReconciledEvent_Type ReconciledEvent::MERGED_MESSAGES_CHANNEL;
const ReconciledEvent_Type ReconciledEvent::UNSET;
const ReconciledEvent_Type ReconciledEvent::Type_MIN;
const ReconciledEvent_Type ReconciledEvent::Type_MAX;
const int ReconciledEvent::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReconciledEvent::kTypeFieldNumber;
const int ReconciledEvent::kEventFieldNumber;
const int ReconciledEvent::kOriginalJournalerFieldNumber;
const int ReconciledEvent::kJournalersFieldNumber;
const int ReconciledEvent::kRunCountFieldNumber;
#endif  // !_MSC_VER

ReconciledEvent::ReconciledEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconciledEvent::InitAsDefaultInstance() {
  event_ = const_cast< ::fim::event::journaller::RecordedEvent*>(&::fim::event::journaller::RecordedEvent::default_instance());
}

ReconciledEvent::ReconciledEvent(const ReconciledEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconciledEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 20;
  event_ = NULL;
  original_journaler_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  run_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconciledEvent::~ReconciledEvent() {
  SharedDtor();
}

void ReconciledEvent::SharedDtor() {
  if (original_journaler_ != &::google::protobuf::internal::kEmptyString) {
    delete original_journaler_;
  }
  if (this != default_instance_) {
    delete event_;
  }
}

void ReconciledEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconciledEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconciledEvent_descriptor_;
}

const ReconciledEvent& ReconciledEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventJournaller_2eproto();  return *default_instance_;
}

ReconciledEvent* ReconciledEvent::default_instance_ = NULL;

ReconciledEvent* ReconciledEvent::New() const {
  return new ReconciledEvent;
}

void ReconciledEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 20;
    if (has_event()) {
      if (event_ != NULL) event_->::fim::event::journaller::RecordedEvent::Clear();
    }
    if (has_original_journaler()) {
      if (original_journaler_ != &::google::protobuf::internal::kEmptyString) {
        original_journaler_->clear();
      }
    }
    run_count_ = 0u;
  }
  journalers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconciledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fim.event.journaller.ReconciledEvent.Type type = 2 [default = UNSET];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fim::event::journaller::ReconciledEvent_Type_IsValid(value)) {
            set_type(static_cast< ::fim::event::journaller::ReconciledEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }
      
      // optional .fim.event.journaller.RecordedEvent event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_original_journaler;
        break;
      }
      
      // optional string original_journaler = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_journaler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_journaler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->original_journaler().data(), this->original_journaler().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_journalers;
        break;
      }
      
      // repeated string journalers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_journalers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_journalers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->journalers(0).data(), this->journalers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_journalers;
        if (input->ExpectTag(48)) goto parse_run_count;
        break;
      }
      
      // optional uint32 run_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_count_)));
          set_has_run_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconciledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fim.event.journaller.ReconciledEvent.Type type = 2 [default = UNSET];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional .fim.event.journaller.RecordedEvent event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event(), output);
  }
  
  // optional string original_journaler = 4;
  if (has_original_journaler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_journaler().data(), this->original_journaler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->original_journaler(), output);
  }
  
  // repeated string journalers = 5;
  for (int i = 0; i < this->journalers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->journalers(i).data(), this->journalers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->journalers(i), output);
  }
  
  // optional uint32 run_count = 6;
  if (has_run_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->run_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconciledEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fim.event.journaller.ReconciledEvent.Type type = 2 [default = UNSET];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional .fim.event.journaller.RecordedEvent event = 3;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event(), target);
  }
  
  // optional string original_journaler = 4;
  if (has_original_journaler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_journaler().data(), this->original_journaler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->original_journaler(), target);
  }
  
  // repeated string journalers = 5;
  for (int i = 0; i < this->journalers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->journalers(i).data(), this->journalers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->journalers(i), target);
  }
  
  // optional uint32 run_count = 6;
  if (has_run_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->run_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconciledEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fim.event.journaller.ReconciledEvent.Type type = 2 [default = UNSET];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .fim.event.journaller.RecordedEvent event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }
    
    // optional string original_journaler = 4;
    if (has_original_journaler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_journaler());
    }
    
    // optional uint32 run_count = 6;
    if (has_run_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_count());
    }
    
  }
  // repeated string journalers = 5;
  total_size += 1 * this->journalers_size();
  for (int i = 0; i < this->journalers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->journalers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconciledEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconciledEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconciledEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconciledEvent::MergeFrom(const ReconciledEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  journalers_.MergeFrom(from.journalers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_event()) {
      mutable_event()->::fim::event::journaller::RecordedEvent::MergeFrom(from.event());
    }
    if (from.has_original_journaler()) {
      set_original_journaler(from.original_journaler());
    }
    if (from.has_run_count()) {
      set_run_count(from.run_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconciledEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconciledEvent::CopyFrom(const ReconciledEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconciledEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_event()) {
    if (!this->event().IsInitialized()) return false;
  }
  return true;
}

void ReconciledEvent::Swap(ReconciledEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(event_, other->event_);
    std::swap(original_journaler_, other->original_journaler_);
    journalers_.Swap(&other->journalers_);
    std::swap(run_count_, other->run_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconciledEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconciledEvent_descriptor_;
  metadata.reflection = ReconciledEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace journaller
}  // namespace event
}  // namespace fim

// @@protoc_insertion_point(global_scope)
