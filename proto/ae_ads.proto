//
// the structure of ads that are defined in ad_engine 
//

option optimize_for = SPEED;

package rubicon.data.ad_engine;

import "types.proto";

message MatchingPoints_PB {
    optional uint32     targeting_points            = 1;
    optional uint32     audience_points             = 2;    
}

//
// structrure of guaranteed info of partner, direct and static (not rtb)
//
message GuaranteedAd_PB {
    // guaranteed ad class
    enum GuaranteedAdClass_E {
        UNKNOWN_GUARANTEED_CLASS        = 0;
        STANDARD_GUARANTEED_CLASS       = 1;
        PRIORITY_GUARANTEED_CLASS       = 2;
        EXCLUSIVE_GUARANTEED_CLASS      = 3;
    }

    optional GuaranteedAdClass_E    guar_class          = 1 [default = UNKNOWN_GUARANTEED_CLASS];
    optional int32                  rank                = 2;    // MRK: int or uint?
    optional double                 sov                 = 3;    // MRK: a better name?
    optional double                 price_tolerance     = 4;
}

//
// regular ad, and the common part between regular and rtb
//
message RegularAd_PB {
        
    optional rubicon.data.common.AdClassType_E      ad_class                    = 1 [default = UNKNOWN_AD_CLASS];
    optional rubicon.data.common.PMPClassType_E     pmp_class                   = 2 [default = STANDARD_PMP_CLASS];
    optional string                                 ad_id_str                   = 3;
    optional uint32                                 ad_id                       = 4;                        // generated from ad_id_str
    optional bool                                   valid                       = 5 [default = true];
    optional double                                 weight                      = 6;
    optional double                                 cpm_price                   = 7;
    optional double                                 cpm_price_effective_bid     = 8;  
    optional double                                 cpm_price_charged           = 9;
    
    optional uint32                                 network_id                  = 20;
    optional uint32                                 campaign_id                 = 21;
    optional bool                                   no_click_server             = 22 [default = false];     // MRK: this is to address
                                                                                                            // the cases where we multiply campaign_id by "-1"!!
    optional double                                 delivery_pacing             = 23;

    optional uint32                                 advertiser_id               = 30;
    optional uint32                                 billable_seat_id            = 31;
    repeated uint32                                 seat_ids                    = 32;
    optional uint32                                 deal_id                     = 33;
    
    optional string                                 creative_id                 = 40;                       // creative_id of the winning ad    
    repeated string                                 creative_ids                = 41;                       // all creative_ids for an ad

    optional MatchingPoints_PB                      matching_points             = 50;
    
    optional GuaranteedAd_PB                        guaranteed_info             = 60;                       // populated only for partner, direct and static ads          
    
    optional bool                                   capped                      = 70 [default = false];     // whether the ad is marked capped in rules file
    optional bool                                   mark_for_csi                = 71 [default = false];     // marked to create csiX cookie (equal to marks[] in old code
    optional bool                                   disabled                    = 72 [default = false];     // disabled ad, equal to zeros[] in the old code
}

//
// pmp ad
//
message PMPAd_PB {
    optional uint64         bid_id              = 1;
    optional double         bid_price           = 2;
    optional double         bid_price_adjusted  = 3;
    optional double         price_floor         = 4;
    optional bool           dynamic_floor       = 5 [default = false];
    optional bool           infinite_floor      = 6 [default = false];
    optional double         premium             = 7;        // MRK: deprecated? remove?
    optional double         tech_fee            = 8;
}

//
// one ad object
// 
message Ad_PB {
    enum AdType_E {
        UNSPECIFIED_AD_TYPE          = 0;
        REGULAR_AD_TYPE              = 1;
        PMP_AD_TYPE                  = 2;
    }
    
//    // this is intentionally defined so a bitwise int32 can be defined
//    enum AdFlags_E {
//        AF_NONE                 = 0;
//        AF_BACKFILL             = 1;
//        AF_NO_COOKIE            = 3;
//        AF_HOUSE                = 2;
//        // other flags for an ad
//    }
    
    optional AdType_E           type            = 2 [default = UNSPECIFIED_AD_TYPE];
//    optional int32              flags           = 3 [default = 0];     // bitwise OR of Flags, default is AF_NONE
    optional RegularAd_PB       common          = 4;    // regular ad if type is REGULAR, or the common part of the ads
                                                        // if the type is PMP 
    optional PMPAd_PB           pmp_ad          = 5;    // pmp ad, if type is PMP
}

