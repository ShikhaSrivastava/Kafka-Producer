#GEN_SOURCE_FILES = $(notdir $(proto_files:.proto=.pb.cc))
GEN_SOURCE_FILES = $(gen_proto_files)
GEN_HEADER_FILES = ${GEN_SOURCE_FILES:.cc=.h}

CLEANFILES =				\
	@PACKAGEPACKED@.h		\
	*.pb.cc				\
	*.pb.h

MAINTAINERCLEANFILES =			\
        morpheus-proto.am               \
	Makefile.in			\
	*.gcno				\
	*.gcda				\
	*.gcov


maintainer-clean-local:

# The generated library is <package_name>_protobuf
lib_LTLIBRARIES = lib@PACKAGE_NAME@_protobuf.la
lib@PACKAGE_NAME@_protobuf_la_SOURCES = ${GEN_SOURCE_FILES}
lib@PACKAGE_NAME@_protobuf_la_LDFLAGS = -version-info @MAJOR_VERSION@:@MINOR_VERSION@:0

# Code generation rules.
# The rules are filtered from the various file list variables to avoid matching
# already installed generated header files.
PB_INCLUDE_OPTS = -I/usr/include
PB_INCLUDE_OPTS += $(addprefix -I, $(proto_dirs))
VPATH = $(SHELL) echo $(proto_dirs) | perl -pe 's/ /:/')
vpath %.proto
$(filter %.pb.h %.pb.cc, $(GEN_SOURCE_FILES)): $(proto_files)
	for pb_file in $(proto_files); do \
		gen_file=`echo $${pb_file} | perl -pe 's/\.proto/\.pb\.cc/'`; \
		echo "*** Building $${gen_file} from $${pb_file} ***"; \
		protoc ${PB_INCLUDE_OPTS} --cpp_out=./ $${pb_file};\
	done

# .BEGIN is ignored by GNU make so we can use it as a guard
.BEGIN:
	@echo "error: GNU Make is required, try aliasing gmake to make"
	@exit 1

# Created on ${MORPHEUS_BUILD_DATE} by morpheus Version ${MORPHEUS_VERSION}
