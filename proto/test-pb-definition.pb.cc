// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test-pb-definition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rubicon {
namespace data_pipeline {
namespace aggregation_framework {

namespace {

const ::google::protobuf::Descriptor* Audience_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Audience_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrowserOS_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrowserOS_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AggregatorReports_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggregatorReports_PB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AggregatorReports_PB_AggregatorReportsCode_E_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReportsValue_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportsValue_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleMessage_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleMessage_PB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2dpb_2ddefinition_2eproto() {
  protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test-pb-definition.proto");
  GOOGLE_CHECK(file != NULL);
  Audience_PB_descriptor_ = file->message_type(0);
  static const int Audience_PB_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, size_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, country_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, behavior_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, gender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, ethnicity_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, income_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, age_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, duplicate_),
  };
  Audience_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Audience_PB_descriptor_,
      Audience_PB::default_instance_,
      Audience_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Audience_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Audience_PB));
  BrowserOS_PB_descriptor_ = file->message_type(1);
  static const int BrowserOS_PB_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, size_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, browser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, osystem_),
  };
  BrowserOS_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrowserOS_PB_descriptor_,
      BrowserOS_PB::default_instance_,
      BrowserOS_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrowserOS_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrowserOS_PB));
  AggregatorReports_PB_descriptor_ = file->message_type(2);
  static const int AggregatorReports_PB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorReports_PB, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorReports_PB, report_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorReports_PB, audience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorReports_PB, browser_os_),
  };
  AggregatorReports_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggregatorReports_PB_descriptor_,
      AggregatorReports_PB::default_instance_,
      AggregatorReports_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorReports_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggregatorReports_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggregatorReports_PB));
  AggregatorReports_PB_AggregatorReportsCode_E_descriptor_ = AggregatorReports_PB_descriptor_->enum_type(0);
  ReportsValue_PB_descriptor_ = file->message_type(3);
  static const int ReportsValue_PB_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, rubicon_imps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, defaults_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, defaults_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, rubicon_clicks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, rubicon_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, network_revenue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, network_clicks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, network_imps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, tech_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, weighted_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, finalized_date_),
  };
  ReportsValue_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportsValue_PB_descriptor_,
      ReportsValue_PB::default_instance_,
      ReportsValue_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportsValue_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportsValue_PB));
  SimpleMessage_PB_descriptor_ = file->message_type(4);
  static const int SimpleMessage_PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage_PB, emit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage_PB, tech_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage_PB, network_revenue_),
  };
  SimpleMessage_PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleMessage_PB_descriptor_,
      SimpleMessage_PB::default_instance_,
      SimpleMessage_PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage_PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage_PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleMessage_PB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2dpb_2ddefinition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Audience_PB_descriptor_, &Audience_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrowserOS_PB_descriptor_, &BrowserOS_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggregatorReports_PB_descriptor_, &AggregatorReports_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportsValue_PB_descriptor_, &ReportsValue_PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleMessage_PB_descriptor_, &SimpleMessage_PB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2dpb_2ddefinition_2eproto() {
  delete Audience_PB::default_instance_;
  delete Audience_PB_reflection_;
  delete BrowserOS_PB::default_instance_;
  delete BrowserOS_PB_reflection_;
  delete AggregatorReports_PB::default_instance_;
  delete AggregatorReports_PB_reflection_;
  delete ReportsValue_PB::default_instance_;
  delete ReportsValue_PB_reflection_;
  delete SimpleMessage_PB::default_instance_;
  delete SimpleMessage_PB_reflection_;
}

void protobuf_AddDesc_test_2dpb_2ddefinition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030test-pb-definition.proto\022+rubicon.data"
    "_pipeline.aggregation_framework\"\330\001\n\013Audi"
    "ence_PB\022\014\n\004date\030\001 \002(\r\022\022\n\naccount_id\030\002 \002("
    "\r\022\017\n\007site_id\030\003 \002(\r\022\017\n\007size_id\030\004 \002(\r\022\022\n\nc"
    "ountry_id\030\005 \002(\r\022\023\n\013behavior_id\030\006 \002(\r\022\021\n\t"
    "gender_id\030\007 \002(\r\022\023\n\013ethnicity_i\030\010 \002(\r\022\021\n\t"
    "income_id\030\t \002(\r\022\016\n\006age_id\030\n \002(\r\022\021\n\tdupli"
    "cate\030\013 \002(\r\"\255\001\n\014BrowserOS_PB\022\014\n\004date\030\001 \002("
    "\r\022\022\n\naccount_id\030\002 \002(\r\022\017\n\007site_id\030\003 \002(\r\022\017"
    "\n\007size_id\030\004 \002(\r\022\r\n\005ad_id\030\005 \002(\r\022\023\n\013creati"
    "ve_id\030\006 \002(\r\022\023\n\013campaign_id\030\007 \002(\r\022\017\n\007brow"
    "ser\030\010 \002(\r\022\017\n\007osystem\030\t \002(\r\"\200\003\n\024Aggregato"
    "rReports_PB\022\022\n\naccount_id\030d \002(\r\022u\n\013repor"
    "t_type\030\001 \002(\0162Y.rubicon.data_pipeline.agg"
    "regation_framework.AggregatorReports_PB."
    "AggregatorReportsCode_E:\005UNSET\022J\n\010audien"
    "ce\030\002 \001(\01328.rubicon.data_pipeline.aggrega"
    "tion_framework.Audience_PB\022M\n\nbrowser_os"
    "\030\003 \001(\01329.rubicon.data_pipeline.aggregati"
    "on_framework.BrowserOS_PB\"B\n\027AggregatorR"
    "eportsCode_E\022\t\n\005UNSET\020\000\022\014\n\010AUDIENCE\020\001\022\016\n"
    "\nBROWSER_OS\020\002\"\341\002\n\017ReportsValue_PB\022\027\n\014rub"
    "icon_imps\030\001 \001(\r:\0010\022\026\n\013defaults_in\030\002 \001(\r:"
    "\0010\022\027\n\014defaults_out\030\003 \001(\r:\0010\022\031\n\016rubicon_c"
    "licks\030\004 \001(\r:\0010\022\032\n\017rubicon_actions\030\005 \001(\r:"
    "\0010\022\032\n\017network_revenue\030\006 \001(\001:\0010\022\031\n\016networ"
    "k_clicks\030\007 \001(\r:\0010\022\027\n\014network_imps\030\010 \001(\r:"
    "\0010\022\023\n\010tech_fee\030\t \001(\001:\0010\022\020\n\005score\030\n \001(\004:\001"
    "0\022\021\n\006weight\030\013 \001(\003:\0010\022\020\n\005value\030\014 \001(\005:\0010\022\031"
    "\n\016weighted_score\030\r \001(\002:\0010\022\026\n\016finalized_d"
    "ate\030\016 \001(\r\"P\n\020SimpleMessage_PB\022\021\n\temit_ti"
    "me\030\001 \002(\004\022\020\n\010tech_fee\030\002 \002(\001\022\027\n\017network_re"
    "venue\030\003 \001(\001B\002H\001", 1295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test-pb-definition.proto", &protobuf_RegisterTypes);
  Audience_PB::default_instance_ = new Audience_PB();
  BrowserOS_PB::default_instance_ = new BrowserOS_PB();
  AggregatorReports_PB::default_instance_ = new AggregatorReports_PB();
  ReportsValue_PB::default_instance_ = new ReportsValue_PB();
  SimpleMessage_PB::default_instance_ = new SimpleMessage_PB();
  Audience_PB::default_instance_->InitAsDefaultInstance();
  BrowserOS_PB::default_instance_->InitAsDefaultInstance();
  AggregatorReports_PB::default_instance_->InitAsDefaultInstance();
  ReportsValue_PB::default_instance_->InitAsDefaultInstance();
  SimpleMessage_PB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2dpb_2ddefinition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2dpb_2ddefinition_2eproto {
  StaticDescriptorInitializer_test_2dpb_2ddefinition_2eproto() {
    protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();
  }
} static_descriptor_initializer_test_2dpb_2ddefinition_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Audience_PB::kDateFieldNumber;
const int Audience_PB::kAccountIdFieldNumber;
const int Audience_PB::kSiteIdFieldNumber;
const int Audience_PB::kSizeIdFieldNumber;
const int Audience_PB::kCountryIdFieldNumber;
const int Audience_PB::kBehaviorIdFieldNumber;
const int Audience_PB::kGenderIdFieldNumber;
const int Audience_PB::kEthnicityIFieldNumber;
const int Audience_PB::kIncomeIdFieldNumber;
const int Audience_PB::kAgeIdFieldNumber;
const int Audience_PB::kDuplicateFieldNumber;
#endif  // !_MSC_VER

Audience_PB::Audience_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Audience_PB::InitAsDefaultInstance() {
}

Audience_PB::Audience_PB(const Audience_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Audience_PB::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0u;
  account_id_ = 0u;
  site_id_ = 0u;
  size_id_ = 0u;
  country_id_ = 0u;
  behavior_id_ = 0u;
  gender_id_ = 0u;
  ethnicity_i_ = 0u;
  income_id_ = 0u;
  age_id_ = 0u;
  duplicate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Audience_PB::~Audience_PB() {
  SharedDtor();
}

void Audience_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Audience_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Audience_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Audience_PB_descriptor_;
}

const Audience_PB& Audience_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();  return *default_instance_;
}

Audience_PB* Audience_PB::default_instance_ = NULL;

Audience_PB* Audience_PB::New() const {
  return new Audience_PB;
}

void Audience_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0u;
    account_id_ = 0u;
    site_id_ = 0u;
    size_id_ = 0u;
    country_id_ = 0u;
    behavior_id_ = 0u;
    gender_id_ = 0u;
    ethnicity_i_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    income_id_ = 0u;
    age_id_ = 0u;
    duplicate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Audience_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // required uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_site_id;
        break;
      }
      
      // required uint32 site_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_site_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_id_)));
          set_has_site_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size_id;
        break;
      }
      
      // required uint32 size_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_id_)));
          set_has_size_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country_id;
        break;
      }
      
      // required uint32 country_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
          set_has_country_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_behavior_id;
        break;
      }
      
      // required uint32 behavior_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_behavior_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &behavior_id_)));
          set_has_behavior_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gender_id;
        break;
      }
      
      // required uint32 gender_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_id_)));
          set_has_gender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ethnicity_i;
        break;
      }
      
      // required uint32 ethnicity_i = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ethnicity_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ethnicity_i_)));
          set_has_ethnicity_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_income_id;
        break;
      }
      
      // required uint32 income_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_income_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &income_id_)));
          set_has_income_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_age_id;
        break;
      }
      
      // required uint32 age_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_id_)));
          set_has_age_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_duplicate;
        break;
      }
      
      // required uint32 duplicate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplicate_)));
          set_has_duplicate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Audience_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date(), output);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // required uint32 site_id = 3;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->site_id(), output);
  }
  
  // required uint32 size_id = 4;
  if (has_size_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size_id(), output);
  }
  
  // required uint32 country_id = 5;
  if (has_country_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->country_id(), output);
  }
  
  // required uint32 behavior_id = 6;
  if (has_behavior_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->behavior_id(), output);
  }
  
  // required uint32 gender_id = 7;
  if (has_gender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gender_id(), output);
  }
  
  // required uint32 ethnicity_i = 8;
  if (has_ethnicity_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ethnicity_i(), output);
  }
  
  // required uint32 income_id = 9;
  if (has_income_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->income_id(), output);
  }
  
  // required uint32 age_id = 10;
  if (has_age_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->age_id(), output);
  }
  
  // required uint32 duplicate = 11;
  if (has_duplicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->duplicate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Audience_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date(), target);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // required uint32 site_id = 3;
  if (has_site_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->site_id(), target);
  }
  
  // required uint32 size_id = 4;
  if (has_size_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size_id(), target);
  }
  
  // required uint32 country_id = 5;
  if (has_country_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->country_id(), target);
  }
  
  // required uint32 behavior_id = 6;
  if (has_behavior_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->behavior_id(), target);
  }
  
  // required uint32 gender_id = 7;
  if (has_gender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gender_id(), target);
  }
  
  // required uint32 ethnicity_i = 8;
  if (has_ethnicity_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ethnicity_i(), target);
  }
  
  // required uint32 income_id = 9;
  if (has_income_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->income_id(), target);
  }
  
  // required uint32 age_id = 10;
  if (has_age_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->age_id(), target);
  }
  
  // required uint32 duplicate = 11;
  if (has_duplicate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->duplicate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Audience_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }
    
    // required uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // required uint32 site_id = 3;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->site_id());
    }
    
    // required uint32 size_id = 4;
    if (has_size_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_id());
    }
    
    // required uint32 country_id = 5;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }
    
    // required uint32 behavior_id = 6;
    if (has_behavior_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->behavior_id());
    }
    
    // required uint32 gender_id = 7;
    if (has_gender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender_id());
    }
    
    // required uint32 ethnicity_i = 8;
    if (has_ethnicity_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ethnicity_i());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 income_id = 9;
    if (has_income_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->income_id());
    }
    
    // required uint32 age_id = 10;
    if (has_age_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age_id());
    }
    
    // required uint32 duplicate = 11;
    if (has_duplicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplicate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Audience_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Audience_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Audience_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Audience_PB::MergeFrom(const Audience_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_site_id()) {
      set_site_id(from.site_id());
    }
    if (from.has_size_id()) {
      set_size_id(from.size_id());
    }
    if (from.has_country_id()) {
      set_country_id(from.country_id());
    }
    if (from.has_behavior_id()) {
      set_behavior_id(from.behavior_id());
    }
    if (from.has_gender_id()) {
      set_gender_id(from.gender_id());
    }
    if (from.has_ethnicity_i()) {
      set_ethnicity_i(from.ethnicity_i());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_income_id()) {
      set_income_id(from.income_id());
    }
    if (from.has_age_id()) {
      set_age_id(from.age_id());
    }
    if (from.has_duplicate()) {
      set_duplicate(from.duplicate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Audience_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Audience_PB::CopyFrom(const Audience_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Audience_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void Audience_PB::Swap(Audience_PB* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(account_id_, other->account_id_);
    std::swap(site_id_, other->site_id_);
    std::swap(size_id_, other->size_id_);
    std::swap(country_id_, other->country_id_);
    std::swap(behavior_id_, other->behavior_id_);
    std::swap(gender_id_, other->gender_id_);
    std::swap(ethnicity_i_, other->ethnicity_i_);
    std::swap(income_id_, other->income_id_);
    std::swap(age_id_, other->age_id_);
    std::swap(duplicate_, other->duplicate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Audience_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Audience_PB_descriptor_;
  metadata.reflection = Audience_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrowserOS_PB::kDateFieldNumber;
const int BrowserOS_PB::kAccountIdFieldNumber;
const int BrowserOS_PB::kSiteIdFieldNumber;
const int BrowserOS_PB::kSizeIdFieldNumber;
const int BrowserOS_PB::kAdIdFieldNumber;
const int BrowserOS_PB::kCreativeIdFieldNumber;
const int BrowserOS_PB::kCampaignIdFieldNumber;
const int BrowserOS_PB::kBrowserFieldNumber;
const int BrowserOS_PB::kOsystemFieldNumber;
#endif  // !_MSC_VER

BrowserOS_PB::BrowserOS_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrowserOS_PB::InitAsDefaultInstance() {
}

BrowserOS_PB::BrowserOS_PB(const BrowserOS_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrowserOS_PB::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0u;
  account_id_ = 0u;
  site_id_ = 0u;
  size_id_ = 0u;
  ad_id_ = 0u;
  creative_id_ = 0u;
  campaign_id_ = 0u;
  browser_ = 0u;
  osystem_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrowserOS_PB::~BrowserOS_PB() {
  SharedDtor();
}

void BrowserOS_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrowserOS_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrowserOS_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrowserOS_PB_descriptor_;
}

const BrowserOS_PB& BrowserOS_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();  return *default_instance_;
}

BrowserOS_PB* BrowserOS_PB::default_instance_ = NULL;

BrowserOS_PB* BrowserOS_PB::New() const {
  return new BrowserOS_PB;
}

void BrowserOS_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0u;
    account_id_ = 0u;
    site_id_ = 0u;
    size_id_ = 0u;
    ad_id_ = 0u;
    creative_id_ = 0u;
    campaign_id_ = 0u;
    browser_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    osystem_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrowserOS_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // required uint32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_site_id;
        break;
      }
      
      // required uint32 site_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_site_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_id_)));
          set_has_site_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size_id;
        break;
      }
      
      // required uint32 size_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_id_)));
          set_has_size_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ad_id;
        break;
      }
      
      // required uint32 ad_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ad_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_id_)));
          set_has_ad_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_creative_id;
        break;
      }
      
      // required uint32 creative_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creative_id_)));
          set_has_creative_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_campaign_id;
        break;
      }
      
      // required uint32 campaign_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campaign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campaign_id_)));
          set_has_campaign_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_browser;
        break;
      }
      
      // required uint32 browser = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_browser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &browser_)));
          set_has_browser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_osystem;
        break;
      }
      
      // required uint32 osystem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_osystem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &osystem_)));
          set_has_osystem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrowserOS_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date(), output);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }
  
  // required uint32 site_id = 3;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->site_id(), output);
  }
  
  // required uint32 size_id = 4;
  if (has_size_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size_id(), output);
  }
  
  // required uint32 ad_id = 5;
  if (has_ad_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ad_id(), output);
  }
  
  // required uint32 creative_id = 6;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->creative_id(), output);
  }
  
  // required uint32 campaign_id = 7;
  if (has_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->campaign_id(), output);
  }
  
  // required uint32 browser = 8;
  if (has_browser()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->browser(), output);
  }
  
  // required uint32 osystem = 9;
  if (has_osystem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->osystem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrowserOS_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date(), target);
  }
  
  // required uint32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }
  
  // required uint32 site_id = 3;
  if (has_site_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->site_id(), target);
  }
  
  // required uint32 size_id = 4;
  if (has_size_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size_id(), target);
  }
  
  // required uint32 ad_id = 5;
  if (has_ad_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ad_id(), target);
  }
  
  // required uint32 creative_id = 6;
  if (has_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->creative_id(), target);
  }
  
  // required uint32 campaign_id = 7;
  if (has_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->campaign_id(), target);
  }
  
  // required uint32 browser = 8;
  if (has_browser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->browser(), target);
  }
  
  // required uint32 osystem = 9;
  if (has_osystem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->osystem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrowserOS_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }
    
    // required uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // required uint32 site_id = 3;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->site_id());
    }
    
    // required uint32 size_id = 4;
    if (has_size_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_id());
    }
    
    // required uint32 ad_id = 5;
    if (has_ad_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_id());
    }
    
    // required uint32 creative_id = 6;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creative_id());
    }
    
    // required uint32 campaign_id = 7;
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campaign_id());
    }
    
    // required uint32 browser = 8;
    if (has_browser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->browser());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 osystem = 9;
    if (has_osystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->osystem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrowserOS_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrowserOS_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrowserOS_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrowserOS_PB::MergeFrom(const BrowserOS_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_site_id()) {
      set_site_id(from.site_id());
    }
    if (from.has_size_id()) {
      set_size_id(from.size_id());
    }
    if (from.has_ad_id()) {
      set_ad_id(from.ad_id());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_campaign_id()) {
      set_campaign_id(from.campaign_id());
    }
    if (from.has_browser()) {
      set_browser(from.browser());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_osystem()) {
      set_osystem(from.osystem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrowserOS_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowserOS_PB::CopyFrom(const BrowserOS_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserOS_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void BrowserOS_PB::Swap(BrowserOS_PB* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(account_id_, other->account_id_);
    std::swap(site_id_, other->site_id_);
    std::swap(size_id_, other->size_id_);
    std::swap(ad_id_, other->ad_id_);
    std::swap(creative_id_, other->creative_id_);
    std::swap(campaign_id_, other->campaign_id_);
    std::swap(browser_, other->browser_);
    std::swap(osystem_, other->osystem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrowserOS_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrowserOS_PB_descriptor_;
  metadata.reflection = BrowserOS_PB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AggregatorReports_PB_AggregatorReportsCode_E_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregatorReports_PB_AggregatorReportsCode_E_descriptor_;
}
bool AggregatorReports_PB_AggregatorReportsCode_E_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AggregatorReports_PB_AggregatorReportsCode_E AggregatorReports_PB::UNSET;
const AggregatorReports_PB_AggregatorReportsCode_E AggregatorReports_PB::AUDIENCE;
const AggregatorReports_PB_AggregatorReportsCode_E AggregatorReports_PB::BROWSER_OS;
const AggregatorReports_PB_AggregatorReportsCode_E AggregatorReports_PB::AggregatorReportsCode_E_MIN;
const AggregatorReports_PB_AggregatorReportsCode_E AggregatorReports_PB::AggregatorReportsCode_E_MAX;
const int AggregatorReports_PB::AggregatorReportsCode_E_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AggregatorReports_PB::kAccountIdFieldNumber;
const int AggregatorReports_PB::kReportTypeFieldNumber;
const int AggregatorReports_PB::kAudienceFieldNumber;
const int AggregatorReports_PB::kBrowserOsFieldNumber;
#endif  // !_MSC_VER

AggregatorReports_PB::AggregatorReports_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggregatorReports_PB::InitAsDefaultInstance() {
  audience_ = const_cast< ::rubicon::data_pipeline::aggregation_framework::Audience_PB*>(&::rubicon::data_pipeline::aggregation_framework::Audience_PB::default_instance());
  browser_os_ = const_cast< ::rubicon::data_pipeline::aggregation_framework::BrowserOS_PB*>(&::rubicon::data_pipeline::aggregation_framework::BrowserOS_PB::default_instance());
}

AggregatorReports_PB::AggregatorReports_PB(const AggregatorReports_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggregatorReports_PB::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
  report_type_ = 0;
  audience_ = NULL;
  browser_os_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggregatorReports_PB::~AggregatorReports_PB() {
  SharedDtor();
}

void AggregatorReports_PB::SharedDtor() {
  if (this != default_instance_) {
    delete audience_;
    delete browser_os_;
  }
}

void AggregatorReports_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggregatorReports_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggregatorReports_PB_descriptor_;
}

const AggregatorReports_PB& AggregatorReports_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();  return *default_instance_;
}

AggregatorReports_PB* AggregatorReports_PB::default_instance_ = NULL;

AggregatorReports_PB* AggregatorReports_PB::New() const {
  return new AggregatorReports_PB;
}

void AggregatorReports_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_id_ = 0u;
    report_type_ = 0;
    if (has_audience()) {
      if (audience_ != NULL) audience_->::rubicon::data_pipeline::aggregation_framework::Audience_PB::Clear();
    }
    if (has_browser_os()) {
      if (browser_os_ != NULL) browser_os_->::rubicon::data_pipeline::aggregation_framework::BrowserOS_PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggregatorReports_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rubicon.data_pipeline.aggregation_framework.AggregatorReports_PB.AggregatorReportsCode_E report_type = 1 [default = UNSET];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rubicon::data_pipeline::aggregation_framework::AggregatorReports_PB_AggregatorReportsCode_E_IsValid(value)) {
            set_report_type(static_cast< ::rubicon::data_pipeline::aggregation_framework::AggregatorReports_PB_AggregatorReportsCode_E >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_audience;
        break;
      }
      
      // optional .rubicon.data_pipeline.aggregation_framework.Audience_PB audience = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audience:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audience()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_browser_os;
        break;
      }
      
      // optional .rubicon.data_pipeline.aggregation_framework.BrowserOS_PB browser_os = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browser_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_browser_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_account_id;
        break;
      }
      
      // required uint32 account_id = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggregatorReports_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rubicon.data_pipeline.aggregation_framework.AggregatorReports_PB.AggregatorReportsCode_E report_type = 1 [default = UNSET];
  if (has_report_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->report_type(), output);
  }
  
  // optional .rubicon.data_pipeline.aggregation_framework.Audience_PB audience = 2;
  if (has_audience()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->audience(), output);
  }
  
  // optional .rubicon.data_pipeline.aggregation_framework.BrowserOS_PB browser_os = 3;
  if (has_browser_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->browser_os(), output);
  }
  
  // required uint32 account_id = 100;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->account_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggregatorReports_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rubicon.data_pipeline.aggregation_framework.AggregatorReports_PB.AggregatorReportsCode_E report_type = 1 [default = UNSET];
  if (has_report_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->report_type(), target);
  }
  
  // optional .rubicon.data_pipeline.aggregation_framework.Audience_PB audience = 2;
  if (has_audience()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->audience(), target);
  }
  
  // optional .rubicon.data_pipeline.aggregation_framework.BrowserOS_PB browser_os = 3;
  if (has_browser_os()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->browser_os(), target);
  }
  
  // required uint32 account_id = 100;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->account_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggregatorReports_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account_id = 100;
    if (has_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }
    
    // required .rubicon.data_pipeline.aggregation_framework.AggregatorReports_PB.AggregatorReportsCode_E report_type = 1 [default = UNSET];
    if (has_report_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->report_type());
    }
    
    // optional .rubicon.data_pipeline.aggregation_framework.Audience_PB audience = 2;
    if (has_audience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audience());
    }
    
    // optional .rubicon.data_pipeline.aggregation_framework.BrowserOS_PB browser_os = 3;
    if (has_browser_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->browser_os());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatorReports_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggregatorReports_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggregatorReports_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggregatorReports_PB::MergeFrom(const AggregatorReports_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_report_type()) {
      set_report_type(from.report_type());
    }
    if (from.has_audience()) {
      mutable_audience()->::rubicon::data_pipeline::aggregation_framework::Audience_PB::MergeFrom(from.audience());
    }
    if (from.has_browser_os()) {
      mutable_browser_os()->::rubicon::data_pipeline::aggregation_framework::BrowserOS_PB::MergeFrom(from.browser_os());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggregatorReports_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatorReports_PB::CopyFrom(const AggregatorReports_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorReports_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_audience()) {
    if (!this->audience().IsInitialized()) return false;
  }
  if (has_browser_os()) {
    if (!this->browser_os().IsInitialized()) return false;
  }
  return true;
}

void AggregatorReports_PB::Swap(AggregatorReports_PB* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(report_type_, other->report_type_);
    std::swap(audience_, other->audience_);
    std::swap(browser_os_, other->browser_os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggregatorReports_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggregatorReports_PB_descriptor_;
  metadata.reflection = AggregatorReports_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportsValue_PB::kRubiconImpsFieldNumber;
const int ReportsValue_PB::kDefaultsInFieldNumber;
const int ReportsValue_PB::kDefaultsOutFieldNumber;
const int ReportsValue_PB::kRubiconClicksFieldNumber;
const int ReportsValue_PB::kRubiconActionsFieldNumber;
const int ReportsValue_PB::kNetworkRevenueFieldNumber;
const int ReportsValue_PB::kNetworkClicksFieldNumber;
const int ReportsValue_PB::kNetworkImpsFieldNumber;
const int ReportsValue_PB::kTechFeeFieldNumber;
const int ReportsValue_PB::kScoreFieldNumber;
const int ReportsValue_PB::kWeightFieldNumber;
const int ReportsValue_PB::kValueFieldNumber;
const int ReportsValue_PB::kWeightedScoreFieldNumber;
const int ReportsValue_PB::kFinalizedDateFieldNumber;
#endif  // !_MSC_VER

ReportsValue_PB::ReportsValue_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportsValue_PB::InitAsDefaultInstance() {
}

ReportsValue_PB::ReportsValue_PB(const ReportsValue_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportsValue_PB::SharedCtor() {
  _cached_size_ = 0;
  rubicon_imps_ = 0u;
  defaults_in_ = 0u;
  defaults_out_ = 0u;
  rubicon_clicks_ = 0u;
  rubicon_actions_ = 0u;
  network_revenue_ = 0;
  network_clicks_ = 0u;
  network_imps_ = 0u;
  tech_fee_ = 0;
  score_ = GOOGLE_ULONGLONG(0);
  weight_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  weighted_score_ = 0;
  finalized_date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportsValue_PB::~ReportsValue_PB() {
  SharedDtor();
}

void ReportsValue_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportsValue_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportsValue_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportsValue_PB_descriptor_;
}

const ReportsValue_PB& ReportsValue_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();  return *default_instance_;
}

ReportsValue_PB* ReportsValue_PB::default_instance_ = NULL;

ReportsValue_PB* ReportsValue_PB::New() const {
  return new ReportsValue_PB;
}

void ReportsValue_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rubicon_imps_ = 0u;
    defaults_in_ = 0u;
    defaults_out_ = 0u;
    rubicon_clicks_ = 0u;
    rubicon_actions_ = 0u;
    network_revenue_ = 0;
    network_clicks_ = 0u;
    network_imps_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tech_fee_ = 0;
    score_ = GOOGLE_ULONGLONG(0);
    weight_ = GOOGLE_LONGLONG(0);
    value_ = 0;
    weighted_score_ = 0;
    finalized_date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportsValue_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rubicon_imps = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rubicon_imps_)));
          set_has_rubicon_imps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defaults_in;
        break;
      }
      
      // optional uint32 defaults_in = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defaults_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defaults_in_)));
          set_has_defaults_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defaults_out;
        break;
      }
      
      // optional uint32 defaults_out = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defaults_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defaults_out_)));
          set_has_defaults_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rubicon_clicks;
        break;
      }
      
      // optional uint32 rubicon_clicks = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rubicon_clicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rubicon_clicks_)));
          set_has_rubicon_clicks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rubicon_actions;
        break;
      }
      
      // optional uint32 rubicon_actions = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rubicon_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rubicon_actions_)));
          set_has_rubicon_actions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_network_revenue;
        break;
      }
      
      // optional double network_revenue = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_network_revenue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &network_revenue_)));
          set_has_network_revenue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_network_clicks;
        break;
      }
      
      // optional uint32 network_clicks = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_clicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_clicks_)));
          set_has_network_clicks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_network_imps;
        break;
      }
      
      // optional uint32 network_imps = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_imps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_imps_)));
          set_has_network_imps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_tech_fee;
        break;
      }
      
      // optional double tech_fee = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tech_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tech_fee_)));
          set_has_tech_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_score;
        break;
      }
      
      // optional uint64 score = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weight;
        break;
      }
      
      // optional int64 weight = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_value;
        break;
      }
      
      // optional int32 value = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_weighted_score;
        break;
      }
      
      // optional float weighted_score = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weighted_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weighted_score_)));
          set_has_weighted_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_finalized_date;
        break;
      }
      
      // optional uint32 finalized_date = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalized_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finalized_date_)));
          set_has_finalized_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportsValue_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rubicon_imps = 1 [default = 0];
  if (has_rubicon_imps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rubicon_imps(), output);
  }
  
  // optional uint32 defaults_in = 2 [default = 0];
  if (has_defaults_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defaults_in(), output);
  }
  
  // optional uint32 defaults_out = 3 [default = 0];
  if (has_defaults_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defaults_out(), output);
  }
  
  // optional uint32 rubicon_clicks = 4 [default = 0];
  if (has_rubicon_clicks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rubicon_clicks(), output);
  }
  
  // optional uint32 rubicon_actions = 5 [default = 0];
  if (has_rubicon_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rubicon_actions(), output);
  }
  
  // optional double network_revenue = 6 [default = 0];
  if (has_network_revenue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->network_revenue(), output);
  }
  
  // optional uint32 network_clicks = 7 [default = 0];
  if (has_network_clicks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->network_clicks(), output);
  }
  
  // optional uint32 network_imps = 8 [default = 0];
  if (has_network_imps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->network_imps(), output);
  }
  
  // optional double tech_fee = 9 [default = 0];
  if (has_tech_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tech_fee(), output);
  }
  
  // optional uint64 score = 10 [default = 0];
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->score(), output);
  }
  
  // optional int64 weight = 11 [default = 0];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->weight(), output);
  }
  
  // optional int32 value = 12 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->value(), output);
  }
  
  // optional float weighted_score = 13 [default = 0];
  if (has_weighted_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->weighted_score(), output);
  }
  
  // optional uint32 finalized_date = 14;
  if (has_finalized_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->finalized_date(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportsValue_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rubicon_imps = 1 [default = 0];
  if (has_rubicon_imps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rubicon_imps(), target);
  }
  
  // optional uint32 defaults_in = 2 [default = 0];
  if (has_defaults_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defaults_in(), target);
  }
  
  // optional uint32 defaults_out = 3 [default = 0];
  if (has_defaults_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defaults_out(), target);
  }
  
  // optional uint32 rubicon_clicks = 4 [default = 0];
  if (has_rubicon_clicks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rubicon_clicks(), target);
  }
  
  // optional uint32 rubicon_actions = 5 [default = 0];
  if (has_rubicon_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rubicon_actions(), target);
  }
  
  // optional double network_revenue = 6 [default = 0];
  if (has_network_revenue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->network_revenue(), target);
  }
  
  // optional uint32 network_clicks = 7 [default = 0];
  if (has_network_clicks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->network_clicks(), target);
  }
  
  // optional uint32 network_imps = 8 [default = 0];
  if (has_network_imps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->network_imps(), target);
  }
  
  // optional double tech_fee = 9 [default = 0];
  if (has_tech_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tech_fee(), target);
  }
  
  // optional uint64 score = 10 [default = 0];
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->score(), target);
  }
  
  // optional int64 weight = 11 [default = 0];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->weight(), target);
  }
  
  // optional int32 value = 12 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->value(), target);
  }
  
  // optional float weighted_score = 13 [default = 0];
  if (has_weighted_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->weighted_score(), target);
  }
  
  // optional uint32 finalized_date = 14;
  if (has_finalized_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->finalized_date(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportsValue_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rubicon_imps = 1 [default = 0];
    if (has_rubicon_imps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rubicon_imps());
    }
    
    // optional uint32 defaults_in = 2 [default = 0];
    if (has_defaults_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defaults_in());
    }
    
    // optional uint32 defaults_out = 3 [default = 0];
    if (has_defaults_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defaults_out());
    }
    
    // optional uint32 rubicon_clicks = 4 [default = 0];
    if (has_rubicon_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rubicon_clicks());
    }
    
    // optional uint32 rubicon_actions = 5 [default = 0];
    if (has_rubicon_actions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rubicon_actions());
    }
    
    // optional double network_revenue = 6 [default = 0];
    if (has_network_revenue()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 network_clicks = 7 [default = 0];
    if (has_network_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_clicks());
    }
    
    // optional uint32 network_imps = 8 [default = 0];
    if (has_network_imps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_imps());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double tech_fee = 9 [default = 0];
    if (has_tech_fee()) {
      total_size += 1 + 8;
    }
    
    // optional uint64 score = 10 [default = 0];
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }
    
    // optional int64 weight = 11 [default = 0];
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weight());
    }
    
    // optional int32 value = 12 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional float weighted_score = 13 [default = 0];
    if (has_weighted_score()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 finalized_date = 14;
    if (has_finalized_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finalized_date());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportsValue_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportsValue_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportsValue_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportsValue_PB::MergeFrom(const ReportsValue_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rubicon_imps()) {
      set_rubicon_imps(from.rubicon_imps());
    }
    if (from.has_defaults_in()) {
      set_defaults_in(from.defaults_in());
    }
    if (from.has_defaults_out()) {
      set_defaults_out(from.defaults_out());
    }
    if (from.has_rubicon_clicks()) {
      set_rubicon_clicks(from.rubicon_clicks());
    }
    if (from.has_rubicon_actions()) {
      set_rubicon_actions(from.rubicon_actions());
    }
    if (from.has_network_revenue()) {
      set_network_revenue(from.network_revenue());
    }
    if (from.has_network_clicks()) {
      set_network_clicks(from.network_clicks());
    }
    if (from.has_network_imps()) {
      set_network_imps(from.network_imps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tech_fee()) {
      set_tech_fee(from.tech_fee());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_weighted_score()) {
      set_weighted_score(from.weighted_score());
    }
    if (from.has_finalized_date()) {
      set_finalized_date(from.finalized_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportsValue_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportsValue_PB::CopyFrom(const ReportsValue_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportsValue_PB::IsInitialized() const {
  
  return true;
}

void ReportsValue_PB::Swap(ReportsValue_PB* other) {
  if (other != this) {
    std::swap(rubicon_imps_, other->rubicon_imps_);
    std::swap(defaults_in_, other->defaults_in_);
    std::swap(defaults_out_, other->defaults_out_);
    std::swap(rubicon_clicks_, other->rubicon_clicks_);
    std::swap(rubicon_actions_, other->rubicon_actions_);
    std::swap(network_revenue_, other->network_revenue_);
    std::swap(network_clicks_, other->network_clicks_);
    std::swap(network_imps_, other->network_imps_);
    std::swap(tech_fee_, other->tech_fee_);
    std::swap(score_, other->score_);
    std::swap(weight_, other->weight_);
    std::swap(value_, other->value_);
    std::swap(weighted_score_, other->weighted_score_);
    std::swap(finalized_date_, other->finalized_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportsValue_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportsValue_PB_descriptor_;
  metadata.reflection = ReportsValue_PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleMessage_PB::kEmitTimeFieldNumber;
const int SimpleMessage_PB::kTechFeeFieldNumber;
const int SimpleMessage_PB::kNetworkRevenueFieldNumber;
#endif  // !_MSC_VER

SimpleMessage_PB::SimpleMessage_PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleMessage_PB::InitAsDefaultInstance() {
}

SimpleMessage_PB::SimpleMessage_PB(const SimpleMessage_PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleMessage_PB::SharedCtor() {
  _cached_size_ = 0;
  emit_time_ = GOOGLE_ULONGLONG(0);
  tech_fee_ = 0;
  network_revenue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleMessage_PB::~SimpleMessage_PB() {
  SharedDtor();
}

void SimpleMessage_PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleMessage_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMessage_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleMessage_PB_descriptor_;
}

const SimpleMessage_PB& SimpleMessage_PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2dpb_2ddefinition_2eproto();  return *default_instance_;
}

SimpleMessage_PB* SimpleMessage_PB::default_instance_ = NULL;

SimpleMessage_PB* SimpleMessage_PB::New() const {
  return new SimpleMessage_PB;
}

void SimpleMessage_PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    emit_time_ = GOOGLE_ULONGLONG(0);
    tech_fee_ = 0;
    network_revenue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleMessage_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 emit_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emit_time_)));
          set_has_emit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_tech_fee;
        break;
      }
      
      // required double tech_fee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tech_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tech_fee_)));
          set_has_tech_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_network_revenue;
        break;
      }
      
      // optional double network_revenue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_network_revenue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &network_revenue_)));
          set_has_network_revenue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleMessage_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 emit_time = 1;
  if (has_emit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->emit_time(), output);
  }
  
  // required double tech_fee = 2;
  if (has_tech_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tech_fee(), output);
  }
  
  // optional double network_revenue = 3;
  if (has_network_revenue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->network_revenue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleMessage_PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 emit_time = 1;
  if (has_emit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->emit_time(), target);
  }
  
  // required double tech_fee = 2;
  if (has_tech_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tech_fee(), target);
  }
  
  // optional double network_revenue = 3;
  if (has_network_revenue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->network_revenue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleMessage_PB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 emit_time = 1;
    if (has_emit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emit_time());
    }
    
    // required double tech_fee = 2;
    if (has_tech_fee()) {
      total_size += 1 + 8;
    }
    
    // optional double network_revenue = 3;
    if (has_network_revenue()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMessage_PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleMessage_PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleMessage_PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleMessage_PB::MergeFrom(const SimpleMessage_PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emit_time()) {
      set_emit_time(from.emit_time());
    }
    if (from.has_tech_fee()) {
      set_tech_fee(from.tech_fee());
    }
    if (from.has_network_revenue()) {
      set_network_revenue(from.network_revenue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleMessage_PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMessage_PB::CopyFrom(const SimpleMessage_PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMessage_PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimpleMessage_PB::Swap(SimpleMessage_PB* other) {
  if (other != this) {
    std::swap(emit_time_, other->emit_time_);
    std::swap(tech_fee_, other->tech_fee_);
    std::swap(network_revenue_, other->network_revenue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleMessage_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleMessage_PB_descriptor_;
  metadata.reflection = SimpleMessage_PB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace aggregation_framework
}  // namespace data_pipeline
}  // namespace rubicon

// @@protoc_insertion_point(global_scope)
