// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventJournaller.proto

#ifndef PROTOBUF_EventJournaller_2eproto__INCLUDED
#define PROTOBUF_EventJournaller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "event_bus.pb.h"
// @@protoc_insertion_point(includes)

namespace fim {
namespace event {
namespace journaller {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EventJournaller_2eproto();
void protobuf_AssignDesc_EventJournaller_2eproto();
void protobuf_ShutdownFile_EventJournaller_2eproto();

class RecordedEvent;
class UnparsedRecordedEvent;
class ReconciledEvent;

enum ReconciledEvent_Type {
  ReconciledEvent_Type_CORRUPT_RECORDED_JOURNAL = 0,
  ReconciledEvent_Type_CORRUPT_EVENT_BUS_MESSAGE = 1,
  ReconciledEvent_Type_INVALID_EVENT_BUS_MESSAGE = 2,
  ReconciledEvent_Type_UNKNOWN_EVENT_BUS_MESSAGE = 3,
  ReconciledEvent_Type_UNPARSABLE_EVENT_BUS_MESSAGE = 4,
  ReconciledEvent_Type_BACKLOG_MESSAGE = 5,
  ReconciledEvent_Type_INCONSISTENT_MESSAGE = 6,
  ReconciledEvent_Type_VALID_MESSAGE = 7,
  ReconciledEvent_Type_MERGED_MESSAGES_SENDER = 8,
  ReconciledEvent_Type_MERGED_MESSAGES_CHANNEL = 9,
  ReconciledEvent_Type_UNSET = 20
};
bool ReconciledEvent_Type_IsValid(int value);
const ReconciledEvent_Type ReconciledEvent_Type_Type_MIN = ReconciledEvent_Type_CORRUPT_RECORDED_JOURNAL;
const ReconciledEvent_Type ReconciledEvent_Type_Type_MAX = ReconciledEvent_Type_UNSET;
const int ReconciledEvent_Type_Type_ARRAYSIZE = ReconciledEvent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReconciledEvent_Type_descriptor();
inline const ::std::string& ReconciledEvent_Type_Name(ReconciledEvent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReconciledEvent_Type_descriptor(), value);
}
inline bool ReconciledEvent_Type_Parse(
    const ::std::string& name, ReconciledEvent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReconciledEvent_Type>(
    ReconciledEvent_Type_descriptor(), name, value);
}
// ===================================================================

class RecordedEvent : public ::google::protobuf::Message {
 public:
  RecordedEvent();
  virtual ~RecordedEvent();
  
  RecordedEvent(const RecordedEvent& from);
  
  inline RecordedEvent& operator=(const RecordedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordedEvent& default_instance();
  
  void Swap(RecordedEvent* other);
  
  // implements Message ----------------------------------------------
  
  RecordedEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordedEvent& from);
  void MergeFrom(const RecordedEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 arrival_time = 2;
  inline bool has_arrival_time() const;
  inline void clear_arrival_time();
  static const int kArrivalTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 arrival_time() const;
  inline void set_arrival_time(::google::protobuf::uint64 value);
  
  // optional .fim.eventbus.EventBusMessage event = 3;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::fim::eventbus::EventBusMessage& event() const;
  inline ::fim::eventbus::EventBusMessage* mutable_event();
  inline ::fim::eventbus::EventBusMessage* release_event();
  
  // optional .fim.eventbus.EndPoint channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline const ::fim::eventbus::EndPoint& channel() const;
  inline ::fim::eventbus::EndPoint* mutable_channel();
  inline ::fim::eventbus::EndPoint* release_channel();
  
  // @@protoc_insertion_point(class_scope:fim.event.journaller.RecordedEvent)
 private:
  inline void set_has_arrival_time();
  inline void clear_has_arrival_time();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_channel();
  inline void clear_has_channel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 arrival_time_;
  ::fim::eventbus::EventBusMessage* event_;
  ::fim::eventbus::EndPoint* channel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_EventJournaller_2eproto();
  friend void protobuf_AssignDesc_EventJournaller_2eproto();
  friend void protobuf_ShutdownFile_EventJournaller_2eproto();
  
  void InitAsDefaultInstance();
  static RecordedEvent* default_instance_;
};
// -------------------------------------------------------------------

class UnparsedRecordedEvent : public ::google::protobuf::Message {
 public:
  UnparsedRecordedEvent();
  virtual ~UnparsedRecordedEvent();
  
  UnparsedRecordedEvent(const UnparsedRecordedEvent& from);
  
  inline UnparsedRecordedEvent& operator=(const UnparsedRecordedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnparsedRecordedEvent& default_instance();
  
  void Swap(UnparsedRecordedEvent* other);
  
  // implements Message ----------------------------------------------
  
  UnparsedRecordedEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnparsedRecordedEvent& from);
  void MergeFrom(const UnparsedRecordedEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 arrival_time = 2;
  inline bool has_arrival_time() const;
  inline void clear_arrival_time();
  static const int kArrivalTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 arrival_time() const;
  inline void set_arrival_time(::google::protobuf::uint64 value);
  
  // optional bytes event = 3;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const void* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  
  // optional .fim.eventbus.EndPoint channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline const ::fim::eventbus::EndPoint& channel() const;
  inline ::fim::eventbus::EndPoint* mutable_channel();
  inline ::fim::eventbus::EndPoint* release_channel();
  
  // @@protoc_insertion_point(class_scope:fim.event.journaller.UnparsedRecordedEvent)
 private:
  inline void set_has_arrival_time();
  inline void clear_has_arrival_time();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_channel();
  inline void clear_has_channel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 arrival_time_;
  ::std::string* event_;
  ::fim::eventbus::EndPoint* channel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_EventJournaller_2eproto();
  friend void protobuf_AssignDesc_EventJournaller_2eproto();
  friend void protobuf_ShutdownFile_EventJournaller_2eproto();
  
  void InitAsDefaultInstance();
  static UnparsedRecordedEvent* default_instance_;
};
// -------------------------------------------------------------------

class ReconciledEvent : public ::google::protobuf::Message {
 public:
  ReconciledEvent();
  virtual ~ReconciledEvent();
  
  ReconciledEvent(const ReconciledEvent& from);
  
  inline ReconciledEvent& operator=(const ReconciledEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconciledEvent& default_instance();
  
  void Swap(ReconciledEvent* other);
  
  // implements Message ----------------------------------------------
  
  ReconciledEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconciledEvent& from);
  void MergeFrom(const ReconciledEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ReconciledEvent_Type Type;
  static const Type CORRUPT_RECORDED_JOURNAL = ReconciledEvent_Type_CORRUPT_RECORDED_JOURNAL;
  static const Type CORRUPT_EVENT_BUS_MESSAGE = ReconciledEvent_Type_CORRUPT_EVENT_BUS_MESSAGE;
  static const Type INVALID_EVENT_BUS_MESSAGE = ReconciledEvent_Type_INVALID_EVENT_BUS_MESSAGE;
  static const Type UNKNOWN_EVENT_BUS_MESSAGE = ReconciledEvent_Type_UNKNOWN_EVENT_BUS_MESSAGE;
  static const Type UNPARSABLE_EVENT_BUS_MESSAGE = ReconciledEvent_Type_UNPARSABLE_EVENT_BUS_MESSAGE;
  static const Type BACKLOG_MESSAGE = ReconciledEvent_Type_BACKLOG_MESSAGE;
  static const Type INCONSISTENT_MESSAGE = ReconciledEvent_Type_INCONSISTENT_MESSAGE;
  static const Type VALID_MESSAGE = ReconciledEvent_Type_VALID_MESSAGE;
  static const Type MERGED_MESSAGES_SENDER = ReconciledEvent_Type_MERGED_MESSAGES_SENDER;
  static const Type MERGED_MESSAGES_CHANNEL = ReconciledEvent_Type_MERGED_MESSAGES_CHANNEL;
  static const Type UNSET = ReconciledEvent_Type_UNSET;
  static inline bool Type_IsValid(int value) {
    return ReconciledEvent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ReconciledEvent_Type_Type_MIN;
  static const Type Type_MAX =
    ReconciledEvent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ReconciledEvent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ReconciledEvent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ReconciledEvent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ReconciledEvent_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .fim.event.journaller.ReconciledEvent.Type type = 2 [default = UNSET];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::fim::event::journaller::ReconciledEvent_Type type() const;
  inline void set_type(::fim::event::journaller::ReconciledEvent_Type value);
  
  // optional .fim.event.journaller.RecordedEvent event = 3;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::fim::event::journaller::RecordedEvent& event() const;
  inline ::fim::event::journaller::RecordedEvent* mutable_event();
  inline ::fim::event::journaller::RecordedEvent* release_event();
  
  // optional string original_journaler = 4;
  inline bool has_original_journaler() const;
  inline void clear_original_journaler();
  static const int kOriginalJournalerFieldNumber = 4;
  inline const ::std::string& original_journaler() const;
  inline void set_original_journaler(const ::std::string& value);
  inline void set_original_journaler(const char* value);
  inline void set_original_journaler(const char* value, size_t size);
  inline ::std::string* mutable_original_journaler();
  inline ::std::string* release_original_journaler();
  
  // repeated string journalers = 5;
  inline int journalers_size() const;
  inline void clear_journalers();
  static const int kJournalersFieldNumber = 5;
  inline const ::std::string& journalers(int index) const;
  inline ::std::string* mutable_journalers(int index);
  inline void set_journalers(int index, const ::std::string& value);
  inline void set_journalers(int index, const char* value);
  inline void set_journalers(int index, const char* value, size_t size);
  inline ::std::string* add_journalers();
  inline void add_journalers(const ::std::string& value);
  inline void add_journalers(const char* value);
  inline void add_journalers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& journalers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_journalers();
  
  // optional uint32 run_count = 6;
  inline bool has_run_count() const;
  inline void clear_run_count();
  static const int kRunCountFieldNumber = 6;
  inline ::google::protobuf::uint32 run_count() const;
  inline void set_run_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:fim.event.journaller.ReconciledEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_original_journaler();
  inline void clear_has_original_journaler();
  inline void set_has_run_count();
  inline void clear_has_run_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::fim::event::journaller::RecordedEvent* event_;
  ::std::string* original_journaler_;
  int type_;
  ::google::protobuf::uint32 run_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> journalers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_EventJournaller_2eproto();
  friend void protobuf_AssignDesc_EventJournaller_2eproto();
  friend void protobuf_ShutdownFile_EventJournaller_2eproto();
  
  void InitAsDefaultInstance();
  static ReconciledEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// RecordedEvent

// optional uint64 arrival_time = 2;
inline bool RecordedEvent::has_arrival_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordedEvent::set_has_arrival_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordedEvent::clear_has_arrival_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordedEvent::clear_arrival_time() {
  arrival_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_time();
}
inline ::google::protobuf::uint64 RecordedEvent::arrival_time() const {
  return arrival_time_;
}
inline void RecordedEvent::set_arrival_time(::google::protobuf::uint64 value) {
  set_has_arrival_time();
  arrival_time_ = value;
}

// optional .fim.eventbus.EventBusMessage event = 3;
inline bool RecordedEvent::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordedEvent::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordedEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordedEvent::clear_event() {
  if (event_ != NULL) event_->::fim::eventbus::EventBusMessage::Clear();
  clear_has_event();
}
inline const ::fim::eventbus::EventBusMessage& RecordedEvent::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::fim::eventbus::EventBusMessage* RecordedEvent::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::fim::eventbus::EventBusMessage;
  return event_;
}
inline ::fim::eventbus::EventBusMessage* RecordedEvent::release_event() {
  clear_has_event();
  ::fim::eventbus::EventBusMessage* temp = event_;
  event_ = NULL;
  return temp;
}

// optional .fim.eventbus.EndPoint channel = 5;
inline bool RecordedEvent::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordedEvent::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordedEvent::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordedEvent::clear_channel() {
  if (channel_ != NULL) channel_->::fim::eventbus::EndPoint::Clear();
  clear_has_channel();
}
inline const ::fim::eventbus::EndPoint& RecordedEvent::channel() const {
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
inline ::fim::eventbus::EndPoint* RecordedEvent::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) channel_ = new ::fim::eventbus::EndPoint;
  return channel_;
}
inline ::fim::eventbus::EndPoint* RecordedEvent::release_channel() {
  clear_has_channel();
  ::fim::eventbus::EndPoint* temp = channel_;
  channel_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UnparsedRecordedEvent

// optional uint64 arrival_time = 2;
inline bool UnparsedRecordedEvent::has_arrival_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnparsedRecordedEvent::set_has_arrival_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnparsedRecordedEvent::clear_has_arrival_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnparsedRecordedEvent::clear_arrival_time() {
  arrival_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_time();
}
inline ::google::protobuf::uint64 UnparsedRecordedEvent::arrival_time() const {
  return arrival_time_;
}
inline void UnparsedRecordedEvent::set_arrival_time(::google::protobuf::uint64 value) {
  set_has_arrival_time();
  arrival_time_ = value;
}

// optional bytes event = 3;
inline bool UnparsedRecordedEvent::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnparsedRecordedEvent::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnparsedRecordedEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnparsedRecordedEvent::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& UnparsedRecordedEvent::event() const {
  return *event_;
}
inline void UnparsedRecordedEvent::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void UnparsedRecordedEvent::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void UnparsedRecordedEvent::set_event(const void* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnparsedRecordedEvent::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* UnparsedRecordedEvent::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .fim.eventbus.EndPoint channel = 5;
inline bool UnparsedRecordedEvent::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnparsedRecordedEvent::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnparsedRecordedEvent::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnparsedRecordedEvent::clear_channel() {
  if (channel_ != NULL) channel_->::fim::eventbus::EndPoint::Clear();
  clear_has_channel();
}
inline const ::fim::eventbus::EndPoint& UnparsedRecordedEvent::channel() const {
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
inline ::fim::eventbus::EndPoint* UnparsedRecordedEvent::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) channel_ = new ::fim::eventbus::EndPoint;
  return channel_;
}
inline ::fim::eventbus::EndPoint* UnparsedRecordedEvent::release_channel() {
  clear_has_channel();
  ::fim::eventbus::EndPoint* temp = channel_;
  channel_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ReconciledEvent

// required .fim.event.journaller.ReconciledEvent.Type type = 2 [default = UNSET];
inline bool ReconciledEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconciledEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconciledEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconciledEvent::clear_type() {
  type_ = 20;
  clear_has_type();
}
inline ::fim::event::journaller::ReconciledEvent_Type ReconciledEvent::type() const {
  return static_cast< ::fim::event::journaller::ReconciledEvent_Type >(type_);
}
inline void ReconciledEvent::set_type(::fim::event::journaller::ReconciledEvent_Type value) {
  GOOGLE_DCHECK(::fim::event::journaller::ReconciledEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .fim.event.journaller.RecordedEvent event = 3;
inline bool ReconciledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReconciledEvent::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReconciledEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReconciledEvent::clear_event() {
  if (event_ != NULL) event_->::fim::event::journaller::RecordedEvent::Clear();
  clear_has_event();
}
inline const ::fim::event::journaller::RecordedEvent& ReconciledEvent::event() const {
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::fim::event::journaller::RecordedEvent* ReconciledEvent::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::fim::event::journaller::RecordedEvent;
  return event_;
}
inline ::fim::event::journaller::RecordedEvent* ReconciledEvent::release_event() {
  clear_has_event();
  ::fim::event::journaller::RecordedEvent* temp = event_;
  event_ = NULL;
  return temp;
}

// optional string original_journaler = 4;
inline bool ReconciledEvent::has_original_journaler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReconciledEvent::set_has_original_journaler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReconciledEvent::clear_has_original_journaler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReconciledEvent::clear_original_journaler() {
  if (original_journaler_ != &::google::protobuf::internal::kEmptyString) {
    original_journaler_->clear();
  }
  clear_has_original_journaler();
}
inline const ::std::string& ReconciledEvent::original_journaler() const {
  return *original_journaler_;
}
inline void ReconciledEvent::set_original_journaler(const ::std::string& value) {
  set_has_original_journaler();
  if (original_journaler_ == &::google::protobuf::internal::kEmptyString) {
    original_journaler_ = new ::std::string;
  }
  original_journaler_->assign(value);
}
inline void ReconciledEvent::set_original_journaler(const char* value) {
  set_has_original_journaler();
  if (original_journaler_ == &::google::protobuf::internal::kEmptyString) {
    original_journaler_ = new ::std::string;
  }
  original_journaler_->assign(value);
}
inline void ReconciledEvent::set_original_journaler(const char* value, size_t size) {
  set_has_original_journaler();
  if (original_journaler_ == &::google::protobuf::internal::kEmptyString) {
    original_journaler_ = new ::std::string;
  }
  original_journaler_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReconciledEvent::mutable_original_journaler() {
  set_has_original_journaler();
  if (original_journaler_ == &::google::protobuf::internal::kEmptyString) {
    original_journaler_ = new ::std::string;
  }
  return original_journaler_;
}
inline ::std::string* ReconciledEvent::release_original_journaler() {
  clear_has_original_journaler();
  if (original_journaler_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = original_journaler_;
    original_journaler_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string journalers = 5;
inline int ReconciledEvent::journalers_size() const {
  return journalers_.size();
}
inline void ReconciledEvent::clear_journalers() {
  journalers_.Clear();
}
inline const ::std::string& ReconciledEvent::journalers(int index) const {
  return journalers_.Get(index);
}
inline ::std::string* ReconciledEvent::mutable_journalers(int index) {
  return journalers_.Mutable(index);
}
inline void ReconciledEvent::set_journalers(int index, const ::std::string& value) {
  journalers_.Mutable(index)->assign(value);
}
inline void ReconciledEvent::set_journalers(int index, const char* value) {
  journalers_.Mutable(index)->assign(value);
}
inline void ReconciledEvent::set_journalers(int index, const char* value, size_t size) {
  journalers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReconciledEvent::add_journalers() {
  return journalers_.Add();
}
inline void ReconciledEvent::add_journalers(const ::std::string& value) {
  journalers_.Add()->assign(value);
}
inline void ReconciledEvent::add_journalers(const char* value) {
  journalers_.Add()->assign(value);
}
inline void ReconciledEvent::add_journalers(const char* value, size_t size) {
  journalers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReconciledEvent::journalers() const {
  return journalers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReconciledEvent::mutable_journalers() {
  return &journalers_;
}

// optional uint32 run_count = 6;
inline bool ReconciledEvent::has_run_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReconciledEvent::set_has_run_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReconciledEvent::clear_has_run_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReconciledEvent::clear_run_count() {
  run_count_ = 0u;
  clear_has_run_count();
}
inline ::google::protobuf::uint32 ReconciledEvent::run_count() const {
  return run_count_;
}
inline void ReconciledEvent::set_run_count(::google::protobuf::uint32 value) {
  set_has_run_count();
  run_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace journaller
}  // namespace event
}  // namespace fim

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fim::event::journaller::ReconciledEvent_Type>() {
  return ::fim::event::journaller::ReconciledEvent_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EventJournaller_2eproto__INCLUDED
